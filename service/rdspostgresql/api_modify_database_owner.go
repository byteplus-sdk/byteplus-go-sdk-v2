// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdspostgresql

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyDatabaseOwnerCommon = "ModifyDatabaseOwner"

// ModifyDatabaseOwnerCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyDatabaseOwnerCommon operation. The "output" return
// value will be populated with the ModifyDatabaseOwnerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDatabaseOwnerCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDatabaseOwnerCommon Send returns without error.
//
// See ModifyDatabaseOwnerCommon for more information on using the ModifyDatabaseOwnerCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDatabaseOwnerCommonRequest method.
//    req, resp := client.ModifyDatabaseOwnerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSPOSTGRESQL) ModifyDatabaseOwnerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDatabaseOwnerCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDatabaseOwnerCommon API operation for RDS_POSTGRESQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_POSTGRESQL's
// API operation ModifyDatabaseOwnerCommon for usage and error information.
func (c *RDSPOSTGRESQL) ModifyDatabaseOwnerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDatabaseOwnerCommonRequest(input)
	return out, req.Send()
}

// ModifyDatabaseOwnerCommonWithContext is the same as ModifyDatabaseOwnerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDatabaseOwnerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSPOSTGRESQL) ModifyDatabaseOwnerCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDatabaseOwnerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDatabaseOwner = "ModifyDatabaseOwner"

// ModifyDatabaseOwnerRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyDatabaseOwner operation. The "output" return
// value will be populated with the ModifyDatabaseOwnerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDatabaseOwnerCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDatabaseOwnerCommon Send returns without error.
//
// See ModifyDatabaseOwner for more information on using the ModifyDatabaseOwner
// API call, and error handling.
//
//    // Example sending a request using the ModifyDatabaseOwnerRequest method.
//    req, resp := client.ModifyDatabaseOwnerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSPOSTGRESQL) ModifyDatabaseOwnerRequest(input *ModifyDatabaseOwnerInput) (req *request.Request, output *ModifyDatabaseOwnerOutput) {
	op := &request.Operation{
		Name:       opModifyDatabaseOwner,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDatabaseOwnerInput{}
	}

	output = &ModifyDatabaseOwnerOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDatabaseOwner API operation for RDS_POSTGRESQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_POSTGRESQL's
// API operation ModifyDatabaseOwner for usage and error information.
func (c *RDSPOSTGRESQL) ModifyDatabaseOwner(input *ModifyDatabaseOwnerInput) (*ModifyDatabaseOwnerOutput, error) {
	req, out := c.ModifyDatabaseOwnerRequest(input)
	return out, req.Send()
}

// ModifyDatabaseOwnerWithContext is the same as ModifyDatabaseOwner with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDatabaseOwner for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSPOSTGRESQL) ModifyDatabaseOwnerWithContext(ctx byteplus.Context, input *ModifyDatabaseOwnerInput, opts ...request.Option) (*ModifyDatabaseOwnerOutput, error) {
	req, out := c.ModifyDatabaseOwnerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyDatabaseOwnerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// DBName is a required field
	DBName *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// Owner is a required field
	Owner *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyDatabaseOwnerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDatabaseOwnerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDatabaseOwnerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDatabaseOwnerInput"}
	if s.DBName == nil {
		invalidParams.Add(request.NewErrParamRequired("DBName"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.Owner == nil {
		invalidParams.Add(request.NewErrParamRequired("Owner"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDBName sets the DBName field's value.
func (s *ModifyDatabaseOwnerInput) SetDBName(v string) *ModifyDatabaseOwnerInput {
	s.DBName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDatabaseOwnerInput) SetInstanceId(v string) *ModifyDatabaseOwnerInput {
	s.InstanceId = &v
	return s
}

// SetOwner sets the Owner field's value.
func (s *ModifyDatabaseOwnerInput) SetOwner(v string) *ModifyDatabaseOwnerInput {
	s.Owner = &v
	return s
}

type ModifyDatabaseOwnerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyDatabaseOwnerOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDatabaseOwnerOutput) GoString() string {
	return s.String()
}
