// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdspostgresql

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUnifyNewAllowListCommon = "UnifyNewAllowList"

// UnifyNewAllowListCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UnifyNewAllowListCommon operation. The "output" return
// value will be populated with the UnifyNewAllowListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UnifyNewAllowListCommon Request to send the API call to the service.
// the "output" return value is not valid until after UnifyNewAllowListCommon Send returns without error.
//
// See UnifyNewAllowListCommon for more information on using the UnifyNewAllowListCommon
// API call, and error handling.
//
//    // Example sending a request using the UnifyNewAllowListCommonRequest method.
//    req, resp := client.UnifyNewAllowListCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSPOSTGRESQL) UnifyNewAllowListCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUnifyNewAllowListCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UnifyNewAllowListCommon API operation for RDS_POSTGRESQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_POSTGRESQL's
// API operation UnifyNewAllowListCommon for usage and error information.
func (c *RDSPOSTGRESQL) UnifyNewAllowListCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UnifyNewAllowListCommonRequest(input)
	return out, req.Send()
}

// UnifyNewAllowListCommonWithContext is the same as UnifyNewAllowListCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UnifyNewAllowListCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSPOSTGRESQL) UnifyNewAllowListCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UnifyNewAllowListCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUnifyNewAllowList = "UnifyNewAllowList"

// UnifyNewAllowListRequest generates a "byteplus/request.Request" representing the
// client's request for the UnifyNewAllowList operation. The "output" return
// value will be populated with the UnifyNewAllowListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UnifyNewAllowListCommon Request to send the API call to the service.
// the "output" return value is not valid until after UnifyNewAllowListCommon Send returns without error.
//
// See UnifyNewAllowList for more information on using the UnifyNewAllowList
// API call, and error handling.
//
//    // Example sending a request using the UnifyNewAllowListRequest method.
//    req, resp := client.UnifyNewAllowListRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSPOSTGRESQL) UnifyNewAllowListRequest(input *UnifyNewAllowListInput) (req *request.Request, output *UnifyNewAllowListOutput) {
	op := &request.Operation{
		Name:       opUnifyNewAllowList,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UnifyNewAllowListInput{}
	}

	output = &UnifyNewAllowListOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UnifyNewAllowList API operation for RDS_POSTGRESQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_POSTGRESQL's
// API operation UnifyNewAllowList for usage and error information.
func (c *RDSPOSTGRESQL) UnifyNewAllowList(input *UnifyNewAllowListInput) (*UnifyNewAllowListOutput, error) {
	req, out := c.UnifyNewAllowListRequest(input)
	return out, req.Send()
}

// UnifyNewAllowListWithContext is the same as UnifyNewAllowList with the addition of
// the ability to pass a context and additional request options.
//
// See UnifyNewAllowList for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSPOSTGRESQL) UnifyNewAllowListWithContext(ctx byteplus.Context, input *UnifyNewAllowListInput, opts ...request.Option) (*UnifyNewAllowListOutput, error) {
	req, out := c.UnifyNewAllowListRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UnifyNewAllowListInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AllowListDesc *string `type:"string" json:",omitempty"`

	// AllowListName is a required field
	AllowListName *string `type:"string" json:",omitempty" required:"true"`

	InstanceIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UnifyNewAllowListInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UnifyNewAllowListInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UnifyNewAllowListInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UnifyNewAllowListInput"}
	if s.AllowListName == nil {
		invalidParams.Add(request.NewErrParamRequired("AllowListName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAllowListDesc sets the AllowListDesc field's value.
func (s *UnifyNewAllowListInput) SetAllowListDesc(v string) *UnifyNewAllowListInput {
	s.AllowListDesc = &v
	return s
}

// SetAllowListName sets the AllowListName field's value.
func (s *UnifyNewAllowListInput) SetAllowListName(v string) *UnifyNewAllowListInput {
	s.AllowListName = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *UnifyNewAllowListInput) SetInstanceIds(v []*string) *UnifyNewAllowListInput {
	s.InstanceIds = v
	return s
}

type UnifyNewAllowListOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AllowListId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UnifyNewAllowListOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UnifyNewAllowListOutput) GoString() string {
	return s.String()
}

// SetAllowListId sets the AllowListId field's value.
func (s *UnifyNewAllowListOutput) SetAllowListId(v string) *UnifyNewAllowListOutput {
	s.AllowListId = &v
	return s
}
