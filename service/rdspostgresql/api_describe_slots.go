// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdspostgresql

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeSlotsCommon = "DescribeSlots"

// DescribeSlotsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeSlotsCommon operation. The "output" return
// value will be populated with the DescribeSlotsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSlotsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSlotsCommon Send returns without error.
//
// See DescribeSlotsCommon for more information on using the DescribeSlotsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeSlotsCommonRequest method.
//    req, resp := client.DescribeSlotsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSPOSTGRESQL) DescribeSlotsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeSlotsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeSlotsCommon API operation for RDS_POSTGRESQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_POSTGRESQL's
// API operation DescribeSlotsCommon for usage and error information.
func (c *RDSPOSTGRESQL) DescribeSlotsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeSlotsCommonRequest(input)
	return out, req.Send()
}

// DescribeSlotsCommonWithContext is the same as DescribeSlotsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSlotsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSPOSTGRESQL) DescribeSlotsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeSlotsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSlots = "DescribeSlots"

// DescribeSlotsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeSlots operation. The "output" return
// value will be populated with the DescribeSlotsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSlotsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSlotsCommon Send returns without error.
//
// See DescribeSlots for more information on using the DescribeSlots
// API call, and error handling.
//
//    // Example sending a request using the DescribeSlotsRequest method.
//    req, resp := client.DescribeSlotsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSPOSTGRESQL) DescribeSlotsRequest(input *DescribeSlotsInput) (req *request.Request, output *DescribeSlotsOutput) {
	op := &request.Operation{
		Name:       opDescribeSlots,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSlotsInput{}
	}

	output = &DescribeSlotsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeSlots API operation for RDS_POSTGRESQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_POSTGRESQL's
// API operation DescribeSlots for usage and error information.
func (c *RDSPOSTGRESQL) DescribeSlots(input *DescribeSlotsInput) (*DescribeSlotsOutput, error) {
	req, out := c.DescribeSlotsRequest(input)
	return out, req.Send()
}

// DescribeSlotsWithContext is the same as DescribeSlots with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSlots for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSPOSTGRESQL) DescribeSlotsWithContext(ctx byteplus.Context, input *DescribeSlotsInput, opts ...request.Option) (*DescribeSlotsOutput, error) {
	req, out := c.DescribeSlotsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeSlotsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Database *string `type:"string" json:",omitempty"`

	IPAddress *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	Plugin *string `type:"string" json:",omitempty"`

	SlotName *string `type:"string" json:",omitempty"`

	SlotStatus *string `type:"string" json:",omitempty"`

	SlotType *string `type:"string" json:",omitempty"`

	Temporary *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s DescribeSlotsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSlotsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeSlotsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeSlotsInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDatabase sets the Database field's value.
func (s *DescribeSlotsInput) SetDatabase(v string) *DescribeSlotsInput {
	s.Database = &v
	return s
}

// SetIPAddress sets the IPAddress field's value.
func (s *DescribeSlotsInput) SetIPAddress(v string) *DescribeSlotsInput {
	s.IPAddress = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeSlotsInput) SetInstanceId(v string) *DescribeSlotsInput {
	s.InstanceId = &v
	return s
}

// SetPlugin sets the Plugin field's value.
func (s *DescribeSlotsInput) SetPlugin(v string) *DescribeSlotsInput {
	s.Plugin = &v
	return s
}

// SetSlotName sets the SlotName field's value.
func (s *DescribeSlotsInput) SetSlotName(v string) *DescribeSlotsInput {
	s.SlotName = &v
	return s
}

// SetSlotStatus sets the SlotStatus field's value.
func (s *DescribeSlotsInput) SetSlotStatus(v string) *DescribeSlotsInput {
	s.SlotStatus = &v
	return s
}

// SetSlotType sets the SlotType field's value.
func (s *DescribeSlotsInput) SetSlotType(v string) *DescribeSlotsInput {
	s.SlotType = &v
	return s
}

// SetTemporary sets the Temporary field's value.
func (s *DescribeSlotsInput) SetTemporary(v bool) *DescribeSlotsInput {
	s.Temporary = &v
	return s
}

type DescribeSlotsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ReplicationSlots []*ReplicationSlotForDescribeSlotsOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeSlotsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSlotsOutput) GoString() string {
	return s.String()
}

// SetReplicationSlots sets the ReplicationSlots field's value.
func (s *DescribeSlotsOutput) SetReplicationSlots(v []*ReplicationSlotForDescribeSlotsOutput) *DescribeSlotsOutput {
	s.ReplicationSlots = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeSlotsOutput) SetTotal(v int32) *DescribeSlotsOutput {
	s.Total = &v
	return s
}

type ReplicationSlotForDescribeSlotsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Database *string `type:"string" json:",omitempty"`

	IPAddress *string `type:"string" json:",omitempty"`

	Plugin *string `type:"string" json:",omitempty"`

	SlotName *string `type:"string" json:",omitempty"`

	SlotStatus *string `type:"string" json:",omitempty"`

	SlotType *string `type:"string" json:",omitempty"`

	Temporary *bool `type:"boolean" json:",omitempty"`

	WalDelay *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ReplicationSlotForDescribeSlotsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplicationSlotForDescribeSlotsOutput) GoString() string {
	return s.String()
}

// SetDatabase sets the Database field's value.
func (s *ReplicationSlotForDescribeSlotsOutput) SetDatabase(v string) *ReplicationSlotForDescribeSlotsOutput {
	s.Database = &v
	return s
}

// SetIPAddress sets the IPAddress field's value.
func (s *ReplicationSlotForDescribeSlotsOutput) SetIPAddress(v string) *ReplicationSlotForDescribeSlotsOutput {
	s.IPAddress = &v
	return s
}

// SetPlugin sets the Plugin field's value.
func (s *ReplicationSlotForDescribeSlotsOutput) SetPlugin(v string) *ReplicationSlotForDescribeSlotsOutput {
	s.Plugin = &v
	return s
}

// SetSlotName sets the SlotName field's value.
func (s *ReplicationSlotForDescribeSlotsOutput) SetSlotName(v string) *ReplicationSlotForDescribeSlotsOutput {
	s.SlotName = &v
	return s
}

// SetSlotStatus sets the SlotStatus field's value.
func (s *ReplicationSlotForDescribeSlotsOutput) SetSlotStatus(v string) *ReplicationSlotForDescribeSlotsOutput {
	s.SlotStatus = &v
	return s
}

// SetSlotType sets the SlotType field's value.
func (s *ReplicationSlotForDescribeSlotsOutput) SetSlotType(v string) *ReplicationSlotForDescribeSlotsOutput {
	s.SlotType = &v
	return s
}

// SetTemporary sets the Temporary field's value.
func (s *ReplicationSlotForDescribeSlotsOutput) SetTemporary(v bool) *ReplicationSlotForDescribeSlotsOutput {
	s.Temporary = &v
	return s
}

// SetWalDelay sets the WalDelay field's value.
func (s *ReplicationSlotForDescribeSlotsOutput) SetWalDelay(v int64) *ReplicationSlotForDescribeSlotsOutput {
	s.WalDelay = &v
	return s
}
