// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdspostgresql

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifySchemaOwnerCommon = "ModifySchemaOwner"

// ModifySchemaOwnerCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifySchemaOwnerCommon operation. The "output" return
// value will be populated with the ModifySchemaOwnerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifySchemaOwnerCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifySchemaOwnerCommon Send returns without error.
//
// See ModifySchemaOwnerCommon for more information on using the ModifySchemaOwnerCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifySchemaOwnerCommonRequest method.
//    req, resp := client.ModifySchemaOwnerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSPOSTGRESQL) ModifySchemaOwnerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifySchemaOwnerCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifySchemaOwnerCommon API operation for RDS_POSTGRESQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_POSTGRESQL's
// API operation ModifySchemaOwnerCommon for usage and error information.
func (c *RDSPOSTGRESQL) ModifySchemaOwnerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifySchemaOwnerCommonRequest(input)
	return out, req.Send()
}

// ModifySchemaOwnerCommonWithContext is the same as ModifySchemaOwnerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifySchemaOwnerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSPOSTGRESQL) ModifySchemaOwnerCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifySchemaOwnerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifySchemaOwner = "ModifySchemaOwner"

// ModifySchemaOwnerRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifySchemaOwner operation. The "output" return
// value will be populated with the ModifySchemaOwnerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifySchemaOwnerCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifySchemaOwnerCommon Send returns without error.
//
// See ModifySchemaOwner for more information on using the ModifySchemaOwner
// API call, and error handling.
//
//    // Example sending a request using the ModifySchemaOwnerRequest method.
//    req, resp := client.ModifySchemaOwnerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSPOSTGRESQL) ModifySchemaOwnerRequest(input *ModifySchemaOwnerInput) (req *request.Request, output *ModifySchemaOwnerOutput) {
	op := &request.Operation{
		Name:       opModifySchemaOwner,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifySchemaOwnerInput{}
	}

	output = &ModifySchemaOwnerOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifySchemaOwner API operation for RDS_POSTGRESQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_POSTGRESQL's
// API operation ModifySchemaOwner for usage and error information.
func (c *RDSPOSTGRESQL) ModifySchemaOwner(input *ModifySchemaOwnerInput) (*ModifySchemaOwnerOutput, error) {
	req, out := c.ModifySchemaOwnerRequest(input)
	return out, req.Send()
}

// ModifySchemaOwnerWithContext is the same as ModifySchemaOwner with the addition of
// the ability to pass a context and additional request options.
//
// See ModifySchemaOwner for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSPOSTGRESQL) ModifySchemaOwnerWithContext(ctx byteplus.Context, input *ModifySchemaOwnerInput, opts ...request.Option) (*ModifySchemaOwnerOutput, error) {
	req, out := c.ModifySchemaOwnerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifySchemaOwnerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	SchemaInfo []*SchemaInfoForModifySchemaOwnerInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ModifySchemaOwnerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifySchemaOwnerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifySchemaOwnerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifySchemaOwnerInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifySchemaOwnerInput) SetInstanceId(v string) *ModifySchemaOwnerInput {
	s.InstanceId = &v
	return s
}

// SetSchemaInfo sets the SchemaInfo field's value.
func (s *ModifySchemaOwnerInput) SetSchemaInfo(v []*SchemaInfoForModifySchemaOwnerInput) *ModifySchemaOwnerInput {
	s.SchemaInfo = v
	return s
}

type ModifySchemaOwnerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifySchemaOwnerOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifySchemaOwnerOutput) GoString() string {
	return s.String()
}

type SchemaInfoForModifySchemaOwnerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DBName *string `type:"string" json:",omitempty"`

	Owner *string `type:"string" json:",omitempty"`

	SchemaName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SchemaInfoForModifySchemaOwnerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SchemaInfoForModifySchemaOwnerInput) GoString() string {
	return s.String()
}

// SetDBName sets the DBName field's value.
func (s *SchemaInfoForModifySchemaOwnerInput) SetDBName(v string) *SchemaInfoForModifySchemaOwnerInput {
	s.DBName = &v
	return s
}

// SetOwner sets the Owner field's value.
func (s *SchemaInfoForModifySchemaOwnerInput) SetOwner(v string) *SchemaInfoForModifySchemaOwnerInput {
	s.Owner = &v
	return s
}

// SetSchemaName sets the SchemaName field's value.
func (s *SchemaInfoForModifySchemaOwnerInput) SetSchemaName(v string) *SchemaInfoForModifySchemaOwnerInput {
	s.SchemaName = &v
	return s
}
