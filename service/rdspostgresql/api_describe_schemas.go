// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdspostgresql

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeSchemasCommon = "DescribeSchemas"

// DescribeSchemasCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeSchemasCommon operation. The "output" return
// value will be populated with the DescribeSchemasCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSchemasCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSchemasCommon Send returns without error.
//
// See DescribeSchemasCommon for more information on using the DescribeSchemasCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeSchemasCommonRequest method.
//    req, resp := client.DescribeSchemasCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSPOSTGRESQL) DescribeSchemasCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeSchemasCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeSchemasCommon API operation for RDS_POSTGRESQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_POSTGRESQL's
// API operation DescribeSchemasCommon for usage and error information.
func (c *RDSPOSTGRESQL) DescribeSchemasCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeSchemasCommonRequest(input)
	return out, req.Send()
}

// DescribeSchemasCommonWithContext is the same as DescribeSchemasCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSchemasCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSPOSTGRESQL) DescribeSchemasCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeSchemasCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSchemas = "DescribeSchemas"

// DescribeSchemasRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeSchemas operation. The "output" return
// value will be populated with the DescribeSchemasCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSchemasCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSchemasCommon Send returns without error.
//
// See DescribeSchemas for more information on using the DescribeSchemas
// API call, and error handling.
//
//    // Example sending a request using the DescribeSchemasRequest method.
//    req, resp := client.DescribeSchemasRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSPOSTGRESQL) DescribeSchemasRequest(input *DescribeSchemasInput) (req *request.Request, output *DescribeSchemasOutput) {
	op := &request.Operation{
		Name:       opDescribeSchemas,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSchemasInput{}
	}

	output = &DescribeSchemasOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeSchemas API operation for RDS_POSTGRESQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_POSTGRESQL's
// API operation DescribeSchemas for usage and error information.
func (c *RDSPOSTGRESQL) DescribeSchemas(input *DescribeSchemasInput) (*DescribeSchemasOutput, error) {
	req, out := c.DescribeSchemasRequest(input)
	return out, req.Send()
}

// DescribeSchemasWithContext is the same as DescribeSchemas with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSchemas for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSPOSTGRESQL) DescribeSchemasWithContext(ctx byteplus.Context, input *DescribeSchemasInput, opts ...request.Option) (*DescribeSchemasOutput, error) {
	req, out := c.DescribeSchemasRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeSchemasInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DBName *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeSchemasInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSchemasInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeSchemasInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeSchemasInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDBName sets the DBName field's value.
func (s *DescribeSchemasInput) SetDBName(v string) *DescribeSchemasInput {
	s.DBName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeSchemasInput) SetInstanceId(v string) *DescribeSchemasInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeSchemasInput) SetPageNumber(v int32) *DescribeSchemasInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeSchemasInput) SetPageSize(v int32) *DescribeSchemasInput {
	s.PageSize = &v
	return s
}

type DescribeSchemasOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Schemas []*SchemaForDescribeSchemasOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeSchemasOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSchemasOutput) GoString() string {
	return s.String()
}

// SetSchemas sets the Schemas field's value.
func (s *DescribeSchemasOutput) SetSchemas(v []*SchemaForDescribeSchemasOutput) *DescribeSchemasOutput {
	s.Schemas = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeSchemasOutput) SetTotal(v int32) *DescribeSchemasOutput {
	s.Total = &v
	return s
}

type SchemaForDescribeSchemasOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DBName *string `type:"string" json:",omitempty"`

	Owner *string `type:"string" json:",omitempty"`

	SchemaName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SchemaForDescribeSchemasOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SchemaForDescribeSchemasOutput) GoString() string {
	return s.String()
}

// SetDBName sets the DBName field's value.
func (s *SchemaForDescribeSchemasOutput) SetDBName(v string) *SchemaForDescribeSchemasOutput {
	s.DBName = &v
	return s
}

// SetOwner sets the Owner field's value.
func (s *SchemaForDescribeSchemasOutput) SetOwner(v string) *SchemaForDescribeSchemasOutput {
	s.Owner = &v
	return s
}

// SetSchemaName sets the SchemaName field's value.
func (s *SchemaForDescribeSchemasOutput) SetSchemaName(v string) *SchemaForDescribeSchemasOutput {
	s.SchemaName = &v
	return s
}
