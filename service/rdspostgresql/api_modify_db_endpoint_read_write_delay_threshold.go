// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdspostgresql

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyDBEndpointReadWriteDelayThresholdCommon = "ModifyDBEndpointReadWriteDelayThreshold"

// ModifyDBEndpointReadWriteDelayThresholdCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyDBEndpointReadWriteDelayThresholdCommon operation. The "output" return
// value will be populated with the ModifyDBEndpointReadWriteDelayThresholdCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBEndpointReadWriteDelayThresholdCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBEndpointReadWriteDelayThresholdCommon Send returns without error.
//
// See ModifyDBEndpointReadWriteDelayThresholdCommon for more information on using the ModifyDBEndpointReadWriteDelayThresholdCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBEndpointReadWriteDelayThresholdCommonRequest method.
//    req, resp := client.ModifyDBEndpointReadWriteDelayThresholdCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSPOSTGRESQL) ModifyDBEndpointReadWriteDelayThresholdCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBEndpointReadWriteDelayThresholdCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBEndpointReadWriteDelayThresholdCommon API operation for RDS_POSTGRESQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_POSTGRESQL's
// API operation ModifyDBEndpointReadWriteDelayThresholdCommon for usage and error information.
func (c *RDSPOSTGRESQL) ModifyDBEndpointReadWriteDelayThresholdCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBEndpointReadWriteDelayThresholdCommonRequest(input)
	return out, req.Send()
}

// ModifyDBEndpointReadWriteDelayThresholdCommonWithContext is the same as ModifyDBEndpointReadWriteDelayThresholdCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBEndpointReadWriteDelayThresholdCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSPOSTGRESQL) ModifyDBEndpointReadWriteDelayThresholdCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBEndpointReadWriteDelayThresholdCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBEndpointReadWriteDelayThreshold = "ModifyDBEndpointReadWriteDelayThreshold"

// ModifyDBEndpointReadWriteDelayThresholdRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyDBEndpointReadWriteDelayThreshold operation. The "output" return
// value will be populated with the ModifyDBEndpointReadWriteDelayThresholdCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBEndpointReadWriteDelayThresholdCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBEndpointReadWriteDelayThresholdCommon Send returns without error.
//
// See ModifyDBEndpointReadWriteDelayThreshold for more information on using the ModifyDBEndpointReadWriteDelayThreshold
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBEndpointReadWriteDelayThresholdRequest method.
//    req, resp := client.ModifyDBEndpointReadWriteDelayThresholdRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSPOSTGRESQL) ModifyDBEndpointReadWriteDelayThresholdRequest(input *ModifyDBEndpointReadWriteDelayThresholdInput) (req *request.Request, output *ModifyDBEndpointReadWriteDelayThresholdOutput) {
	op := &request.Operation{
		Name:       opModifyDBEndpointReadWriteDelayThreshold,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBEndpointReadWriteDelayThresholdInput{}
	}

	output = &ModifyDBEndpointReadWriteDelayThresholdOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBEndpointReadWriteDelayThreshold API operation for RDS_POSTGRESQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_POSTGRESQL's
// API operation ModifyDBEndpointReadWriteDelayThreshold for usage and error information.
func (c *RDSPOSTGRESQL) ModifyDBEndpointReadWriteDelayThreshold(input *ModifyDBEndpointReadWriteDelayThresholdInput) (*ModifyDBEndpointReadWriteDelayThresholdOutput, error) {
	req, out := c.ModifyDBEndpointReadWriteDelayThresholdRequest(input)
	return out, req.Send()
}

// ModifyDBEndpointReadWriteDelayThresholdWithContext is the same as ModifyDBEndpointReadWriteDelayThreshold with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBEndpointReadWriteDelayThreshold for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSPOSTGRESQL) ModifyDBEndpointReadWriteDelayThresholdWithContext(ctx byteplus.Context, input *ModifyDBEndpointReadWriteDelayThresholdInput, opts ...request.Option) (*ModifyDBEndpointReadWriteDelayThresholdOutput, error) {
	req, out := c.ModifyDBEndpointReadWriteDelayThresholdRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyDBEndpointReadWriteDelayThresholdInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EndpointId is a required field
	EndpointId *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// ReadOnlyNodeMaxDelayTime is a required field
	ReadOnlyNodeMaxDelayTime *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyDBEndpointReadWriteDelayThresholdInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBEndpointReadWriteDelayThresholdInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDBEndpointReadWriteDelayThresholdInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDBEndpointReadWriteDelayThresholdInput"}
	if s.EndpointId == nil {
		invalidParams.Add(request.NewErrParamRequired("EndpointId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.ReadOnlyNodeMaxDelayTime == nil {
		invalidParams.Add(request.NewErrParamRequired("ReadOnlyNodeMaxDelayTime"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEndpointId sets the EndpointId field's value.
func (s *ModifyDBEndpointReadWriteDelayThresholdInput) SetEndpointId(v string) *ModifyDBEndpointReadWriteDelayThresholdInput {
	s.EndpointId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBEndpointReadWriteDelayThresholdInput) SetInstanceId(v string) *ModifyDBEndpointReadWriteDelayThresholdInput {
	s.InstanceId = &v
	return s
}

// SetReadOnlyNodeMaxDelayTime sets the ReadOnlyNodeMaxDelayTime field's value.
func (s *ModifyDBEndpointReadWriteDelayThresholdInput) SetReadOnlyNodeMaxDelayTime(v int32) *ModifyDBEndpointReadWriteDelayThresholdInput {
	s.ReadOnlyNodeMaxDelayTime = &v
	return s
}

type ModifyDBEndpointReadWriteDelayThresholdOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyDBEndpointReadWriteDelayThresholdOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBEndpointReadWriteDelayThresholdOutput) GoString() string {
	return s.String()
}
