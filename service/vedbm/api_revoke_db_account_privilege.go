// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vedbm

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opRevokeDBAccountPrivilegeCommon = "RevokeDBAccountPrivilege"

// RevokeDBAccountPrivilegeCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the RevokeDBAccountPrivilegeCommon operation. The "output" return
// value will be populated with the RevokeDBAccountPrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RevokeDBAccountPrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after RevokeDBAccountPrivilegeCommon Send returns without error.
//
// See RevokeDBAccountPrivilegeCommon for more information on using the RevokeDBAccountPrivilegeCommon
// API call, and error handling.
//
//    // Example sending a request using the RevokeDBAccountPrivilegeCommonRequest method.
//    req, resp := client.RevokeDBAccountPrivilegeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) RevokeDBAccountPrivilegeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRevokeDBAccountPrivilegeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RevokeDBAccountPrivilegeCommon API operation for VEDBM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEDBM's
// API operation RevokeDBAccountPrivilegeCommon for usage and error information.
func (c *VEDBM) RevokeDBAccountPrivilegeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RevokeDBAccountPrivilegeCommonRequest(input)
	return out, req.Send()
}

// RevokeDBAccountPrivilegeCommonWithContext is the same as RevokeDBAccountPrivilegeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RevokeDBAccountPrivilegeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) RevokeDBAccountPrivilegeCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RevokeDBAccountPrivilegeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRevokeDBAccountPrivilege = "RevokeDBAccountPrivilege"

// RevokeDBAccountPrivilegeRequest generates a "byteplus/request.Request" representing the
// client's request for the RevokeDBAccountPrivilege operation. The "output" return
// value will be populated with the RevokeDBAccountPrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RevokeDBAccountPrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after RevokeDBAccountPrivilegeCommon Send returns without error.
//
// See RevokeDBAccountPrivilege for more information on using the RevokeDBAccountPrivilege
// API call, and error handling.
//
//    // Example sending a request using the RevokeDBAccountPrivilegeRequest method.
//    req, resp := client.RevokeDBAccountPrivilegeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEDBM) RevokeDBAccountPrivilegeRequest(input *RevokeDBAccountPrivilegeInput) (req *request.Request, output *RevokeDBAccountPrivilegeOutput) {
	op := &request.Operation{
		Name:       opRevokeDBAccountPrivilege,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RevokeDBAccountPrivilegeInput{}
	}

	output = &RevokeDBAccountPrivilegeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RevokeDBAccountPrivilege API operation for VEDBM.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEDBM's
// API operation RevokeDBAccountPrivilege for usage and error information.
func (c *VEDBM) RevokeDBAccountPrivilege(input *RevokeDBAccountPrivilegeInput) (*RevokeDBAccountPrivilegeOutput, error) {
	req, out := c.RevokeDBAccountPrivilegeRequest(input)
	return out, req.Send()
}

// RevokeDBAccountPrivilegeWithContext is the same as RevokeDBAccountPrivilege with the addition of
// the ability to pass a context and additional request options.
//
// See RevokeDBAccountPrivilege for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEDBM) RevokeDBAccountPrivilegeWithContext(ctx byteplus.Context, input *RevokeDBAccountPrivilegeInput, opts ...request.Option) (*RevokeDBAccountPrivilegeOutput, error) {
	req, out := c.RevokeDBAccountPrivilegeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RevokeDBAccountPrivilegeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AccountName is a required field
	AccountName *string `type:"string" json:",omitempty" required:"true"`

	// DBNames is a required field
	DBNames *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s RevokeDBAccountPrivilegeInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokeDBAccountPrivilegeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RevokeDBAccountPrivilegeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RevokeDBAccountPrivilegeInput"}
	if s.AccountName == nil {
		invalidParams.Add(request.NewErrParamRequired("AccountName"))
	}
	if s.DBNames == nil {
		invalidParams.Add(request.NewErrParamRequired("DBNames"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccountName sets the AccountName field's value.
func (s *RevokeDBAccountPrivilegeInput) SetAccountName(v string) *RevokeDBAccountPrivilegeInput {
	s.AccountName = &v
	return s
}

// SetDBNames sets the DBNames field's value.
func (s *RevokeDBAccountPrivilegeInput) SetDBNames(v string) *RevokeDBAccountPrivilegeInput {
	s.DBNames = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *RevokeDBAccountPrivilegeInput) SetInstanceId(v string) *RevokeDBAccountPrivilegeInput {
	s.InstanceId = &v
	return s
}

type RevokeDBAccountPrivilegeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s RevokeDBAccountPrivilegeOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokeDBAccountPrivilegeOutput) GoString() string {
	return s.String()
}
