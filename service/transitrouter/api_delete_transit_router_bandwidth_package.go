// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteTransitRouterBandwidthPackageCommon = "DeleteTransitRouterBandwidthPackage"

// DeleteTransitRouterBandwidthPackageCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteTransitRouterBandwidthPackageCommon operation. The "output" return
// value will be populated with the DeleteTransitRouterBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteTransitRouterBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteTransitRouterBandwidthPackageCommon Send returns without error.
//
// See DeleteTransitRouterBandwidthPackageCommon for more information on using the DeleteTransitRouterBandwidthPackageCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteTransitRouterBandwidthPackageCommonRequest method.
//    req, resp := client.DeleteTransitRouterBandwidthPackageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) DeleteTransitRouterBandwidthPackageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteTransitRouterBandwidthPackageCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteTransitRouterBandwidthPackageCommon API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation DeleteTransitRouterBandwidthPackageCommon for usage and error information.
func (c *TRANSITROUTER) DeleteTransitRouterBandwidthPackageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteTransitRouterBandwidthPackageCommonRequest(input)
	return out, req.Send()
}

// DeleteTransitRouterBandwidthPackageCommonWithContext is the same as DeleteTransitRouterBandwidthPackageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteTransitRouterBandwidthPackageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) DeleteTransitRouterBandwidthPackageCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteTransitRouterBandwidthPackageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteTransitRouterBandwidthPackage = "DeleteTransitRouterBandwidthPackage"

// DeleteTransitRouterBandwidthPackageRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteTransitRouterBandwidthPackage operation. The "output" return
// value will be populated with the DeleteTransitRouterBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteTransitRouterBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteTransitRouterBandwidthPackageCommon Send returns without error.
//
// See DeleteTransitRouterBandwidthPackage for more information on using the DeleteTransitRouterBandwidthPackage
// API call, and error handling.
//
//    // Example sending a request using the DeleteTransitRouterBandwidthPackageRequest method.
//    req, resp := client.DeleteTransitRouterBandwidthPackageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) DeleteTransitRouterBandwidthPackageRequest(input *DeleteTransitRouterBandwidthPackageInput) (req *request.Request, output *DeleteTransitRouterBandwidthPackageOutput) {
	op := &request.Operation{
		Name:       opDeleteTransitRouterBandwidthPackage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteTransitRouterBandwidthPackageInput{}
	}

	output = &DeleteTransitRouterBandwidthPackageOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteTransitRouterBandwidthPackage API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation DeleteTransitRouterBandwidthPackage for usage and error information.
func (c *TRANSITROUTER) DeleteTransitRouterBandwidthPackage(input *DeleteTransitRouterBandwidthPackageInput) (*DeleteTransitRouterBandwidthPackageOutput, error) {
	req, out := c.DeleteTransitRouterBandwidthPackageRequest(input)
	return out, req.Send()
}

// DeleteTransitRouterBandwidthPackageWithContext is the same as DeleteTransitRouterBandwidthPackage with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteTransitRouterBandwidthPackage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) DeleteTransitRouterBandwidthPackageWithContext(ctx byteplus.Context, input *DeleteTransitRouterBandwidthPackageInput, opts ...request.Option) (*DeleteTransitRouterBandwidthPackageOutput, error) {
	req, out := c.DeleteTransitRouterBandwidthPackageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteTransitRouterBandwidthPackageInput struct {
	_ struct{} `type:"structure"`

	// TransitRouterBandwidthPackageId is a required field
	TransitRouterBandwidthPackageId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteTransitRouterBandwidthPackageInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTransitRouterBandwidthPackageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteTransitRouterBandwidthPackageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteTransitRouterBandwidthPackageInput"}
	if s.TransitRouterBandwidthPackageId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterBandwidthPackageId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTransitRouterBandwidthPackageId sets the TransitRouterBandwidthPackageId field's value.
func (s *DeleteTransitRouterBandwidthPackageInput) SetTransitRouterBandwidthPackageId(v string) *DeleteTransitRouterBandwidthPackageInput {
	s.TransitRouterBandwidthPackageId = &v
	return s
}

type DeleteTransitRouterBandwidthPackageOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteTransitRouterBandwidthPackageOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTransitRouterBandwidthPackageOutput) GoString() string {
	return s.String()
}
