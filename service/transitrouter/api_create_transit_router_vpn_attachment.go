// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateTransitRouterVpnAttachmentCommon = "CreateTransitRouterVpnAttachment"

// CreateTransitRouterVpnAttachmentCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateTransitRouterVpnAttachmentCommon operation. The "output" return
// value will be populated with the CreateTransitRouterVpnAttachmentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterVpnAttachmentCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterVpnAttachmentCommon Send returns without error.
//
// See CreateTransitRouterVpnAttachmentCommon for more information on using the CreateTransitRouterVpnAttachmentCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterVpnAttachmentCommonRequest method.
//    req, resp := client.CreateTransitRouterVpnAttachmentCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterVpnAttachmentCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateTransitRouterVpnAttachmentCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterVpnAttachmentCommon API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterVpnAttachmentCommon for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterVpnAttachmentCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterVpnAttachmentCommonRequest(input)
	return out, req.Send()
}

// CreateTransitRouterVpnAttachmentCommonWithContext is the same as CreateTransitRouterVpnAttachmentCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterVpnAttachmentCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterVpnAttachmentCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterVpnAttachmentCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateTransitRouterVpnAttachment = "CreateTransitRouterVpnAttachment"

// CreateTransitRouterVpnAttachmentRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateTransitRouterVpnAttachment operation. The "output" return
// value will be populated with the CreateTransitRouterVpnAttachmentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterVpnAttachmentCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterVpnAttachmentCommon Send returns without error.
//
// See CreateTransitRouterVpnAttachment for more information on using the CreateTransitRouterVpnAttachment
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterVpnAttachmentRequest method.
//    req, resp := client.CreateTransitRouterVpnAttachmentRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterVpnAttachmentRequest(input *CreateTransitRouterVpnAttachmentInput) (req *request.Request, output *CreateTransitRouterVpnAttachmentOutput) {
	op := &request.Operation{
		Name:       opCreateTransitRouterVpnAttachment,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateTransitRouterVpnAttachmentInput{}
	}

	output = &CreateTransitRouterVpnAttachmentOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterVpnAttachment API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterVpnAttachment for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterVpnAttachment(input *CreateTransitRouterVpnAttachmentInput) (*CreateTransitRouterVpnAttachmentOutput, error) {
	req, out := c.CreateTransitRouterVpnAttachmentRequest(input)
	return out, req.Send()
}

// CreateTransitRouterVpnAttachmentWithContext is the same as CreateTransitRouterVpnAttachment with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterVpnAttachment for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterVpnAttachmentWithContext(ctx byteplus.Context, input *CreateTransitRouterVpnAttachmentInput, opts ...request.Option) (*CreateTransitRouterVpnAttachmentOutput, error) {
	req, out := c.CreateTransitRouterVpnAttachmentRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateTransitRouterVpnAttachmentInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	Description *string `type:"string"`

	Tags []*TagForCreateTransitRouterVpnAttachmentInput `type:"list"`

	TransitRouterAttachmentName *string `type:"string"`

	// TransitRouterId is a required field
	TransitRouterId *string `type:"string" required:"true"`

	TransitRouterRouteTableId *string `type:"string"`

	// VpnConnectionId is a required field
	VpnConnectionId *string `type:"string" required:"true"`

	// ZoneId is a required field
	ZoneId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateTransitRouterVpnAttachmentInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterVpnAttachmentInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateTransitRouterVpnAttachmentInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateTransitRouterVpnAttachmentInput"}
	if s.TransitRouterId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterId"))
	}
	if s.VpnConnectionId == nil {
		invalidParams.Add(request.NewErrParamRequired("VpnConnectionId"))
	}
	if s.ZoneId == nil {
		invalidParams.Add(request.NewErrParamRequired("ZoneId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateTransitRouterVpnAttachmentInput) SetClientToken(v string) *CreateTransitRouterVpnAttachmentInput {
	s.ClientToken = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateTransitRouterVpnAttachmentInput) SetDescription(v string) *CreateTransitRouterVpnAttachmentInput {
	s.Description = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *CreateTransitRouterVpnAttachmentInput) SetTags(v []*TagForCreateTransitRouterVpnAttachmentInput) *CreateTransitRouterVpnAttachmentInput {
	s.Tags = v
	return s
}

// SetTransitRouterAttachmentName sets the TransitRouterAttachmentName field's value.
func (s *CreateTransitRouterVpnAttachmentInput) SetTransitRouterAttachmentName(v string) *CreateTransitRouterVpnAttachmentInput {
	s.TransitRouterAttachmentName = &v
	return s
}

// SetTransitRouterId sets the TransitRouterId field's value.
func (s *CreateTransitRouterVpnAttachmentInput) SetTransitRouterId(v string) *CreateTransitRouterVpnAttachmentInput {
	s.TransitRouterId = &v
	return s
}

// SetTransitRouterRouteTableId sets the TransitRouterRouteTableId field's value.
func (s *CreateTransitRouterVpnAttachmentInput) SetTransitRouterRouteTableId(v string) *CreateTransitRouterVpnAttachmentInput {
	s.TransitRouterRouteTableId = &v
	return s
}

// SetVpnConnectionId sets the VpnConnectionId field's value.
func (s *CreateTransitRouterVpnAttachmentInput) SetVpnConnectionId(v string) *CreateTransitRouterVpnAttachmentInput {
	s.VpnConnectionId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *CreateTransitRouterVpnAttachmentInput) SetZoneId(v string) *CreateTransitRouterVpnAttachmentInput {
	s.ZoneId = &v
	return s
}

type CreateTransitRouterVpnAttachmentOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	TransitRouterAttachmentId *string `type:"string"`
}

// String returns the string representation
func (s CreateTransitRouterVpnAttachmentOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterVpnAttachmentOutput) GoString() string {
	return s.String()
}

// SetTransitRouterAttachmentId sets the TransitRouterAttachmentId field's value.
func (s *CreateTransitRouterVpnAttachmentOutput) SetTransitRouterAttachmentId(v string) *CreateTransitRouterVpnAttachmentOutput {
	s.TransitRouterAttachmentId = &v
	return s
}

type TagForCreateTransitRouterVpnAttachmentInput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForCreateTransitRouterVpnAttachmentInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForCreateTransitRouterVpnAttachmentInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForCreateTransitRouterVpnAttachmentInput) SetKey(v string) *TagForCreateTransitRouterVpnAttachmentInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForCreateTransitRouterVpnAttachmentInput) SetValue(v string) *TagForCreateTransitRouterVpnAttachmentInput {
	s.Value = &v
	return s
}
