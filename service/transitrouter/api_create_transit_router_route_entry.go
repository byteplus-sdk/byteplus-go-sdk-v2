// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateTransitRouterRouteEntryCommon = "CreateTransitRouterRouteEntry"

// CreateTransitRouterRouteEntryCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateTransitRouterRouteEntryCommon operation. The "output" return
// value will be populated with the CreateTransitRouterRouteEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterRouteEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterRouteEntryCommon Send returns without error.
//
// See CreateTransitRouterRouteEntryCommon for more information on using the CreateTransitRouterRouteEntryCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterRouteEntryCommonRequest method.
//    req, resp := client.CreateTransitRouterRouteEntryCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterRouteEntryCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateTransitRouterRouteEntryCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterRouteEntryCommon API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterRouteEntryCommon for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterRouteEntryCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterRouteEntryCommonRequest(input)
	return out, req.Send()
}

// CreateTransitRouterRouteEntryCommonWithContext is the same as CreateTransitRouterRouteEntryCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterRouteEntryCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterRouteEntryCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterRouteEntryCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateTransitRouterRouteEntry = "CreateTransitRouterRouteEntry"

// CreateTransitRouterRouteEntryRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateTransitRouterRouteEntry operation. The "output" return
// value will be populated with the CreateTransitRouterRouteEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterRouteEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterRouteEntryCommon Send returns without error.
//
// See CreateTransitRouterRouteEntry for more information on using the CreateTransitRouterRouteEntry
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterRouteEntryRequest method.
//    req, resp := client.CreateTransitRouterRouteEntryRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterRouteEntryRequest(input *CreateTransitRouterRouteEntryInput) (req *request.Request, output *CreateTransitRouterRouteEntryOutput) {
	op := &request.Operation{
		Name:       opCreateTransitRouterRouteEntry,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateTransitRouterRouteEntryInput{}
	}

	output = &CreateTransitRouterRouteEntryOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterRouteEntry API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterRouteEntry for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterRouteEntry(input *CreateTransitRouterRouteEntryInput) (*CreateTransitRouterRouteEntryOutput, error) {
	req, out := c.CreateTransitRouterRouteEntryRequest(input)
	return out, req.Send()
}

// CreateTransitRouterRouteEntryWithContext is the same as CreateTransitRouterRouteEntry with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterRouteEntry for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterRouteEntryWithContext(ctx byteplus.Context, input *CreateTransitRouterRouteEntryInput, opts ...request.Option) (*CreateTransitRouterRouteEntryOutput, error) {
	req, out := c.CreateTransitRouterRouteEntryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateTransitRouterRouteEntryInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	// DestinationCidrBlock is a required field
	DestinationCidrBlock *string `type:"string" required:"true"`

	TransitRouterRouteEntryName *string `type:"string"`

	TransitRouterRouteEntryNextHopId *string `type:"string"`

	// TransitRouterRouteEntryNextHopType is a required field
	TransitRouterRouteEntryNextHopType *string `type:"string" required:"true"`

	// TransitRouterRouteTableId is a required field
	TransitRouterRouteTableId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateTransitRouterRouteEntryInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterRouteEntryInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateTransitRouterRouteEntryInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateTransitRouterRouteEntryInput"}
	if s.DestinationCidrBlock == nil {
		invalidParams.Add(request.NewErrParamRequired("DestinationCidrBlock"))
	}
	if s.TransitRouterRouteEntryNextHopType == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterRouteEntryNextHopType"))
	}
	if s.TransitRouterRouteTableId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterRouteTableId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateTransitRouterRouteEntryInput) SetDescription(v string) *CreateTransitRouterRouteEntryInput {
	s.Description = &v
	return s
}

// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
func (s *CreateTransitRouterRouteEntryInput) SetDestinationCidrBlock(v string) *CreateTransitRouterRouteEntryInput {
	s.DestinationCidrBlock = &v
	return s
}

// SetTransitRouterRouteEntryName sets the TransitRouterRouteEntryName field's value.
func (s *CreateTransitRouterRouteEntryInput) SetTransitRouterRouteEntryName(v string) *CreateTransitRouterRouteEntryInput {
	s.TransitRouterRouteEntryName = &v
	return s
}

// SetTransitRouterRouteEntryNextHopId sets the TransitRouterRouteEntryNextHopId field's value.
func (s *CreateTransitRouterRouteEntryInput) SetTransitRouterRouteEntryNextHopId(v string) *CreateTransitRouterRouteEntryInput {
	s.TransitRouterRouteEntryNextHopId = &v
	return s
}

// SetTransitRouterRouteEntryNextHopType sets the TransitRouterRouteEntryNextHopType field's value.
func (s *CreateTransitRouterRouteEntryInput) SetTransitRouterRouteEntryNextHopType(v string) *CreateTransitRouterRouteEntryInput {
	s.TransitRouterRouteEntryNextHopType = &v
	return s
}

// SetTransitRouterRouteTableId sets the TransitRouterRouteTableId field's value.
func (s *CreateTransitRouterRouteEntryInput) SetTransitRouterRouteTableId(v string) *CreateTransitRouterRouteEntryInput {
	s.TransitRouterRouteTableId = &v
	return s
}

type CreateTransitRouterRouteEntryOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	TransitRouterRouteEntryId *string `type:"string"`
}

// String returns the string representation
func (s CreateTransitRouterRouteEntryOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterRouteEntryOutput) GoString() string {
	return s.String()
}

// SetTransitRouterRouteEntryId sets the TransitRouterRouteEntryId field's value.
func (s *CreateTransitRouterRouteEntryOutput) SetTransitRouterRouteEntryId(v string) *CreateTransitRouterRouteEntryOutput {
	s.TransitRouterRouteEntryId = &v
	return s
}
