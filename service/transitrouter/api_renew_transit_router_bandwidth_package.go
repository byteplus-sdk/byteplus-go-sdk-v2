// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opRenewTransitRouterBandwidthPackageCommon = "RenewTransitRouterBandwidthPackage"

// RenewTransitRouterBandwidthPackageCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the RenewTransitRouterBandwidthPackageCommon operation. The "output" return
// value will be populated with the RenewTransitRouterBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewTransitRouterBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewTransitRouterBandwidthPackageCommon Send returns without error.
//
// See RenewTransitRouterBandwidthPackageCommon for more information on using the RenewTransitRouterBandwidthPackageCommon
// API call, and error handling.
//
//    // Example sending a request using the RenewTransitRouterBandwidthPackageCommonRequest method.
//    req, resp := client.RenewTransitRouterBandwidthPackageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) RenewTransitRouterBandwidthPackageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRenewTransitRouterBandwidthPackageCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RenewTransitRouterBandwidthPackageCommon API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation RenewTransitRouterBandwidthPackageCommon for usage and error information.
func (c *TRANSITROUTER) RenewTransitRouterBandwidthPackageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RenewTransitRouterBandwidthPackageCommonRequest(input)
	return out, req.Send()
}

// RenewTransitRouterBandwidthPackageCommonWithContext is the same as RenewTransitRouterBandwidthPackageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RenewTransitRouterBandwidthPackageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) RenewTransitRouterBandwidthPackageCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RenewTransitRouterBandwidthPackageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewTransitRouterBandwidthPackage = "RenewTransitRouterBandwidthPackage"

// RenewTransitRouterBandwidthPackageRequest generates a "byteplus/request.Request" representing the
// client's request for the RenewTransitRouterBandwidthPackage operation. The "output" return
// value will be populated with the RenewTransitRouterBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewTransitRouterBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewTransitRouterBandwidthPackageCommon Send returns without error.
//
// See RenewTransitRouterBandwidthPackage for more information on using the RenewTransitRouterBandwidthPackage
// API call, and error handling.
//
//    // Example sending a request using the RenewTransitRouterBandwidthPackageRequest method.
//    req, resp := client.RenewTransitRouterBandwidthPackageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) RenewTransitRouterBandwidthPackageRequest(input *RenewTransitRouterBandwidthPackageInput) (req *request.Request, output *RenewTransitRouterBandwidthPackageOutput) {
	op := &request.Operation{
		Name:       opRenewTransitRouterBandwidthPackage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RenewTransitRouterBandwidthPackageInput{}
	}

	output = &RenewTransitRouterBandwidthPackageOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RenewTransitRouterBandwidthPackage API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation RenewTransitRouterBandwidthPackage for usage and error information.
func (c *TRANSITROUTER) RenewTransitRouterBandwidthPackage(input *RenewTransitRouterBandwidthPackageInput) (*RenewTransitRouterBandwidthPackageOutput, error) {
	req, out := c.RenewTransitRouterBandwidthPackageRequest(input)
	return out, req.Send()
}

// RenewTransitRouterBandwidthPackageWithContext is the same as RenewTransitRouterBandwidthPackage with the addition of
// the ability to pass a context and additional request options.
//
// See RenewTransitRouterBandwidthPackage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) RenewTransitRouterBandwidthPackageWithContext(ctx byteplus.Context, input *RenewTransitRouterBandwidthPackageInput, opts ...request.Option) (*RenewTransitRouterBandwidthPackageOutput, error) {
	req, out := c.RenewTransitRouterBandwidthPackageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RenewTransitRouterBandwidthPackageInput struct {
	_ struct{} `type:"structure"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`

	// TransitRouterBandwidthPackageId is a required field
	TransitRouterBandwidthPackageId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RenewTransitRouterBandwidthPackageInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewTransitRouterBandwidthPackageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RenewTransitRouterBandwidthPackageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RenewTransitRouterBandwidthPackageInput"}
	if s.TransitRouterBandwidthPackageId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterBandwidthPackageId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPeriod sets the Period field's value.
func (s *RenewTransitRouterBandwidthPackageInput) SetPeriod(v int32) *RenewTransitRouterBandwidthPackageInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *RenewTransitRouterBandwidthPackageInput) SetPeriodUnit(v string) *RenewTransitRouterBandwidthPackageInput {
	s.PeriodUnit = &v
	return s
}

// SetTransitRouterBandwidthPackageId sets the TransitRouterBandwidthPackageId field's value.
func (s *RenewTransitRouterBandwidthPackageInput) SetTransitRouterBandwidthPackageId(v string) *RenewTransitRouterBandwidthPackageInput {
	s.TransitRouterBandwidthPackageId = &v
	return s
}

type RenewTransitRouterBandwidthPackageOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s RenewTransitRouterBandwidthPackageOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewTransitRouterBandwidthPackageOutput) GoString() string {
	return s.String()
}
