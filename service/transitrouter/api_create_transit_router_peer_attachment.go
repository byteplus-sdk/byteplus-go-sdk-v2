// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateTransitRouterPeerAttachmentCommon = "CreateTransitRouterPeerAttachment"

// CreateTransitRouterPeerAttachmentCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateTransitRouterPeerAttachmentCommon operation. The "output" return
// value will be populated with the CreateTransitRouterPeerAttachmentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterPeerAttachmentCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterPeerAttachmentCommon Send returns without error.
//
// See CreateTransitRouterPeerAttachmentCommon for more information on using the CreateTransitRouterPeerAttachmentCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterPeerAttachmentCommonRequest method.
//    req, resp := client.CreateTransitRouterPeerAttachmentCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterPeerAttachmentCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateTransitRouterPeerAttachmentCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterPeerAttachmentCommon API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterPeerAttachmentCommon for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterPeerAttachmentCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterPeerAttachmentCommonRequest(input)
	return out, req.Send()
}

// CreateTransitRouterPeerAttachmentCommonWithContext is the same as CreateTransitRouterPeerAttachmentCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterPeerAttachmentCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterPeerAttachmentCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateTransitRouterPeerAttachmentCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateTransitRouterPeerAttachment = "CreateTransitRouterPeerAttachment"

// CreateTransitRouterPeerAttachmentRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateTransitRouterPeerAttachment operation. The "output" return
// value will be populated with the CreateTransitRouterPeerAttachmentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTransitRouterPeerAttachmentCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTransitRouterPeerAttachmentCommon Send returns without error.
//
// See CreateTransitRouterPeerAttachment for more information on using the CreateTransitRouterPeerAttachment
// API call, and error handling.
//
//    // Example sending a request using the CreateTransitRouterPeerAttachmentRequest method.
//    req, resp := client.CreateTransitRouterPeerAttachmentRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) CreateTransitRouterPeerAttachmentRequest(input *CreateTransitRouterPeerAttachmentInput) (req *request.Request, output *CreateTransitRouterPeerAttachmentOutput) {
	op := &request.Operation{
		Name:       opCreateTransitRouterPeerAttachment,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateTransitRouterPeerAttachmentInput{}
	}

	output = &CreateTransitRouterPeerAttachmentOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateTransitRouterPeerAttachment API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation CreateTransitRouterPeerAttachment for usage and error information.
func (c *TRANSITROUTER) CreateTransitRouterPeerAttachment(input *CreateTransitRouterPeerAttachmentInput) (*CreateTransitRouterPeerAttachmentOutput, error) {
	req, out := c.CreateTransitRouterPeerAttachmentRequest(input)
	return out, req.Send()
}

// CreateTransitRouterPeerAttachmentWithContext is the same as CreateTransitRouterPeerAttachment with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTransitRouterPeerAttachment for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) CreateTransitRouterPeerAttachmentWithContext(ctx byteplus.Context, input *CreateTransitRouterPeerAttachmentInput, opts ...request.Option) (*CreateTransitRouterPeerAttachmentOutput, error) {
	req, out := c.CreateTransitRouterPeerAttachmentRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateTransitRouterPeerAttachmentInput struct {
	_ struct{} `type:"structure"`

	Bandwidth *int32 `type:"int32"`

	ClientToken *string `type:"string"`

	Description *string `type:"string"`

	// PeerTransitRouterId is a required field
	PeerTransitRouterId *string `type:"string" required:"true"`

	// PeerTransitRouterRegionId is a required field
	PeerTransitRouterRegionId *string `type:"string" required:"true"`

	Tags []*TagForCreateTransitRouterPeerAttachmentInput `type:"list"`

	TransitRouterAttachmentName *string `type:"string"`

	TransitRouterBandwidthPackageId *string `type:"string"`

	// TransitRouterId is a required field
	TransitRouterId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateTransitRouterPeerAttachmentInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterPeerAttachmentInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateTransitRouterPeerAttachmentInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateTransitRouterPeerAttachmentInput"}
	if s.PeerTransitRouterId == nil {
		invalidParams.Add(request.NewErrParamRequired("PeerTransitRouterId"))
	}
	if s.PeerTransitRouterRegionId == nil {
		invalidParams.Add(request.NewErrParamRequired("PeerTransitRouterRegionId"))
	}
	if s.TransitRouterId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidth sets the Bandwidth field's value.
func (s *CreateTransitRouterPeerAttachmentInput) SetBandwidth(v int32) *CreateTransitRouterPeerAttachmentInput {
	s.Bandwidth = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateTransitRouterPeerAttachmentInput) SetClientToken(v string) *CreateTransitRouterPeerAttachmentInput {
	s.ClientToken = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateTransitRouterPeerAttachmentInput) SetDescription(v string) *CreateTransitRouterPeerAttachmentInput {
	s.Description = &v
	return s
}

// SetPeerTransitRouterId sets the PeerTransitRouterId field's value.
func (s *CreateTransitRouterPeerAttachmentInput) SetPeerTransitRouterId(v string) *CreateTransitRouterPeerAttachmentInput {
	s.PeerTransitRouterId = &v
	return s
}

// SetPeerTransitRouterRegionId sets the PeerTransitRouterRegionId field's value.
func (s *CreateTransitRouterPeerAttachmentInput) SetPeerTransitRouterRegionId(v string) *CreateTransitRouterPeerAttachmentInput {
	s.PeerTransitRouterRegionId = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *CreateTransitRouterPeerAttachmentInput) SetTags(v []*TagForCreateTransitRouterPeerAttachmentInput) *CreateTransitRouterPeerAttachmentInput {
	s.Tags = v
	return s
}

// SetTransitRouterAttachmentName sets the TransitRouterAttachmentName field's value.
func (s *CreateTransitRouterPeerAttachmentInput) SetTransitRouterAttachmentName(v string) *CreateTransitRouterPeerAttachmentInput {
	s.TransitRouterAttachmentName = &v
	return s
}

// SetTransitRouterBandwidthPackageId sets the TransitRouterBandwidthPackageId field's value.
func (s *CreateTransitRouterPeerAttachmentInput) SetTransitRouterBandwidthPackageId(v string) *CreateTransitRouterPeerAttachmentInput {
	s.TransitRouterBandwidthPackageId = &v
	return s
}

// SetTransitRouterId sets the TransitRouterId field's value.
func (s *CreateTransitRouterPeerAttachmentInput) SetTransitRouterId(v string) *CreateTransitRouterPeerAttachmentInput {
	s.TransitRouterId = &v
	return s
}

type CreateTransitRouterPeerAttachmentOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	TransitRouterAttachmentId *string `type:"string"`
}

// String returns the string representation
func (s CreateTransitRouterPeerAttachmentOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTransitRouterPeerAttachmentOutput) GoString() string {
	return s.String()
}

// SetTransitRouterAttachmentId sets the TransitRouterAttachmentId field's value.
func (s *CreateTransitRouterPeerAttachmentOutput) SetTransitRouterAttachmentId(v string) *CreateTransitRouterPeerAttachmentOutput {
	s.TransitRouterAttachmentId = &v
	return s
}

type TagForCreateTransitRouterPeerAttachmentInput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForCreateTransitRouterPeerAttachmentInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForCreateTransitRouterPeerAttachmentInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForCreateTransitRouterPeerAttachmentInput) SetKey(v string) *TagForCreateTransitRouterPeerAttachmentInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForCreateTransitRouterPeerAttachmentInput) SetValue(v string) *TagForCreateTransitRouterPeerAttachmentInput {
	s.Value = &v
	return s
}
