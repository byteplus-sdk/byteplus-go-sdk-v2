// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opAssociateTransitRouterAttachmentToRouteTableCommon = "AssociateTransitRouterAttachmentToRouteTable"

// AssociateTransitRouterAttachmentToRouteTableCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the AssociateTransitRouterAttachmentToRouteTableCommon operation. The "output" return
// value will be populated with the AssociateTransitRouterAttachmentToRouteTableCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssociateTransitRouterAttachmentToRouteTableCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssociateTransitRouterAttachmentToRouteTableCommon Send returns without error.
//
// See AssociateTransitRouterAttachmentToRouteTableCommon for more information on using the AssociateTransitRouterAttachmentToRouteTableCommon
// API call, and error handling.
//
//    // Example sending a request using the AssociateTransitRouterAttachmentToRouteTableCommonRequest method.
//    req, resp := client.AssociateTransitRouterAttachmentToRouteTableCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) AssociateTransitRouterAttachmentToRouteTableCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAssociateTransitRouterAttachmentToRouteTableCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AssociateTransitRouterAttachmentToRouteTableCommon API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation AssociateTransitRouterAttachmentToRouteTableCommon for usage and error information.
func (c *TRANSITROUTER) AssociateTransitRouterAttachmentToRouteTableCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AssociateTransitRouterAttachmentToRouteTableCommonRequest(input)
	return out, req.Send()
}

// AssociateTransitRouterAttachmentToRouteTableCommonWithContext is the same as AssociateTransitRouterAttachmentToRouteTableCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateTransitRouterAttachmentToRouteTableCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) AssociateTransitRouterAttachmentToRouteTableCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AssociateTransitRouterAttachmentToRouteTableCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAssociateTransitRouterAttachmentToRouteTable = "AssociateTransitRouterAttachmentToRouteTable"

// AssociateTransitRouterAttachmentToRouteTableRequest generates a "byteplus/request.Request" representing the
// client's request for the AssociateTransitRouterAttachmentToRouteTable operation. The "output" return
// value will be populated with the AssociateTransitRouterAttachmentToRouteTableCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssociateTransitRouterAttachmentToRouteTableCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssociateTransitRouterAttachmentToRouteTableCommon Send returns without error.
//
// See AssociateTransitRouterAttachmentToRouteTable for more information on using the AssociateTransitRouterAttachmentToRouteTable
// API call, and error handling.
//
//    // Example sending a request using the AssociateTransitRouterAttachmentToRouteTableRequest method.
//    req, resp := client.AssociateTransitRouterAttachmentToRouteTableRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) AssociateTransitRouterAttachmentToRouteTableRequest(input *AssociateTransitRouterAttachmentToRouteTableInput) (req *request.Request, output *AssociateTransitRouterAttachmentToRouteTableOutput) {
	op := &request.Operation{
		Name:       opAssociateTransitRouterAttachmentToRouteTable,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AssociateTransitRouterAttachmentToRouteTableInput{}
	}

	output = &AssociateTransitRouterAttachmentToRouteTableOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AssociateTransitRouterAttachmentToRouteTable API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation AssociateTransitRouterAttachmentToRouteTable for usage and error information.
func (c *TRANSITROUTER) AssociateTransitRouterAttachmentToRouteTable(input *AssociateTransitRouterAttachmentToRouteTableInput) (*AssociateTransitRouterAttachmentToRouteTableOutput, error) {
	req, out := c.AssociateTransitRouterAttachmentToRouteTableRequest(input)
	return out, req.Send()
}

// AssociateTransitRouterAttachmentToRouteTableWithContext is the same as AssociateTransitRouterAttachmentToRouteTable with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateTransitRouterAttachmentToRouteTable for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) AssociateTransitRouterAttachmentToRouteTableWithContext(ctx byteplus.Context, input *AssociateTransitRouterAttachmentToRouteTableInput, opts ...request.Option) (*AssociateTransitRouterAttachmentToRouteTableOutput, error) {
	req, out := c.AssociateTransitRouterAttachmentToRouteTableRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AssociateTransitRouterAttachmentToRouteTableInput struct {
	_ struct{} `type:"structure"`

	// TransitRouterAttachmentId is a required field
	TransitRouterAttachmentId *string `type:"string" required:"true"`

	// TransitRouterRouteTableId is a required field
	TransitRouterRouteTableId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AssociateTransitRouterAttachmentToRouteTableInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateTransitRouterAttachmentToRouteTableInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AssociateTransitRouterAttachmentToRouteTableInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AssociateTransitRouterAttachmentToRouteTableInput"}
	if s.TransitRouterAttachmentId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterAttachmentId"))
	}
	if s.TransitRouterRouteTableId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterRouteTableId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTransitRouterAttachmentId sets the TransitRouterAttachmentId field's value.
func (s *AssociateTransitRouterAttachmentToRouteTableInput) SetTransitRouterAttachmentId(v string) *AssociateTransitRouterAttachmentToRouteTableInput {
	s.TransitRouterAttachmentId = &v
	return s
}

// SetTransitRouterRouteTableId sets the TransitRouterRouteTableId field's value.
func (s *AssociateTransitRouterAttachmentToRouteTableInput) SetTransitRouterRouteTableId(v string) *AssociateTransitRouterAttachmentToRouteTableInput {
	s.TransitRouterRouteTableId = &v
	return s
}

type AssociateTransitRouterAttachmentToRouteTableOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AssociateTransitRouterAttachmentToRouteTableOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateTransitRouterAttachmentToRouteTableOutput) GoString() string {
	return s.String()
}
