// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteTransitRouterPeerAttachmentCommon = "DeleteTransitRouterPeerAttachment"

// DeleteTransitRouterPeerAttachmentCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteTransitRouterPeerAttachmentCommon operation. The "output" return
// value will be populated with the DeleteTransitRouterPeerAttachmentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteTransitRouterPeerAttachmentCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteTransitRouterPeerAttachmentCommon Send returns without error.
//
// See DeleteTransitRouterPeerAttachmentCommon for more information on using the DeleteTransitRouterPeerAttachmentCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteTransitRouterPeerAttachmentCommonRequest method.
//    req, resp := client.DeleteTransitRouterPeerAttachmentCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) DeleteTransitRouterPeerAttachmentCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteTransitRouterPeerAttachmentCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteTransitRouterPeerAttachmentCommon API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation DeleteTransitRouterPeerAttachmentCommon for usage and error information.
func (c *TRANSITROUTER) DeleteTransitRouterPeerAttachmentCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteTransitRouterPeerAttachmentCommonRequest(input)
	return out, req.Send()
}

// DeleteTransitRouterPeerAttachmentCommonWithContext is the same as DeleteTransitRouterPeerAttachmentCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteTransitRouterPeerAttachmentCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) DeleteTransitRouterPeerAttachmentCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteTransitRouterPeerAttachmentCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteTransitRouterPeerAttachment = "DeleteTransitRouterPeerAttachment"

// DeleteTransitRouterPeerAttachmentRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteTransitRouterPeerAttachment operation. The "output" return
// value will be populated with the DeleteTransitRouterPeerAttachmentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteTransitRouterPeerAttachmentCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteTransitRouterPeerAttachmentCommon Send returns without error.
//
// See DeleteTransitRouterPeerAttachment for more information on using the DeleteTransitRouterPeerAttachment
// API call, and error handling.
//
//    // Example sending a request using the DeleteTransitRouterPeerAttachmentRequest method.
//    req, resp := client.DeleteTransitRouterPeerAttachmentRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) DeleteTransitRouterPeerAttachmentRequest(input *DeleteTransitRouterPeerAttachmentInput) (req *request.Request, output *DeleteTransitRouterPeerAttachmentOutput) {
	op := &request.Operation{
		Name:       opDeleteTransitRouterPeerAttachment,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteTransitRouterPeerAttachmentInput{}
	}

	output = &DeleteTransitRouterPeerAttachmentOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteTransitRouterPeerAttachment API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation DeleteTransitRouterPeerAttachment for usage and error information.
func (c *TRANSITROUTER) DeleteTransitRouterPeerAttachment(input *DeleteTransitRouterPeerAttachmentInput) (*DeleteTransitRouterPeerAttachmentOutput, error) {
	req, out := c.DeleteTransitRouterPeerAttachmentRequest(input)
	return out, req.Send()
}

// DeleteTransitRouterPeerAttachmentWithContext is the same as DeleteTransitRouterPeerAttachment with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteTransitRouterPeerAttachment for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) DeleteTransitRouterPeerAttachmentWithContext(ctx byteplus.Context, input *DeleteTransitRouterPeerAttachmentInput, opts ...request.Option) (*DeleteTransitRouterPeerAttachmentOutput, error) {
	req, out := c.DeleteTransitRouterPeerAttachmentRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteTransitRouterPeerAttachmentInput struct {
	_ struct{} `type:"structure"`

	Force *bool `type:"boolean"`

	// TransitRouterAttachmentId is a required field
	TransitRouterAttachmentId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteTransitRouterPeerAttachmentInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTransitRouterPeerAttachmentInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteTransitRouterPeerAttachmentInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteTransitRouterPeerAttachmentInput"}
	if s.TransitRouterAttachmentId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterAttachmentId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetForce sets the Force field's value.
func (s *DeleteTransitRouterPeerAttachmentInput) SetForce(v bool) *DeleteTransitRouterPeerAttachmentInput {
	s.Force = &v
	return s
}

// SetTransitRouterAttachmentId sets the TransitRouterAttachmentId field's value.
func (s *DeleteTransitRouterPeerAttachmentInput) SetTransitRouterAttachmentId(v string) *DeleteTransitRouterPeerAttachmentInput {
	s.TransitRouterAttachmentId = &v
	return s
}

type DeleteTransitRouterPeerAttachmentOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteTransitRouterPeerAttachmentOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteTransitRouterPeerAttachmentOutput) GoString() string {
	return s.String()
}
