// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDissociateTransitRouterRoutePolicyFromRouteTableCommon = "DissociateTransitRouterRoutePolicyFromRouteTable"

// DissociateTransitRouterRoutePolicyFromRouteTableCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DissociateTransitRouterRoutePolicyFromRouteTableCommon operation. The "output" return
// value will be populated with the DissociateTransitRouterRoutePolicyFromRouteTableCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DissociateTransitRouterRoutePolicyFromRouteTableCommon Request to send the API call to the service.
// the "output" return value is not valid until after DissociateTransitRouterRoutePolicyFromRouteTableCommon Send returns without error.
//
// See DissociateTransitRouterRoutePolicyFromRouteTableCommon for more information on using the DissociateTransitRouterRoutePolicyFromRouteTableCommon
// API call, and error handling.
//
//    // Example sending a request using the DissociateTransitRouterRoutePolicyFromRouteTableCommonRequest method.
//    req, resp := client.DissociateTransitRouterRoutePolicyFromRouteTableCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) DissociateTransitRouterRoutePolicyFromRouteTableCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDissociateTransitRouterRoutePolicyFromRouteTableCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DissociateTransitRouterRoutePolicyFromRouteTableCommon API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation DissociateTransitRouterRoutePolicyFromRouteTableCommon for usage and error information.
func (c *TRANSITROUTER) DissociateTransitRouterRoutePolicyFromRouteTableCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DissociateTransitRouterRoutePolicyFromRouteTableCommonRequest(input)
	return out, req.Send()
}

// DissociateTransitRouterRoutePolicyFromRouteTableCommonWithContext is the same as DissociateTransitRouterRoutePolicyFromRouteTableCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DissociateTransitRouterRoutePolicyFromRouteTableCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) DissociateTransitRouterRoutePolicyFromRouteTableCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DissociateTransitRouterRoutePolicyFromRouteTableCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDissociateTransitRouterRoutePolicyFromRouteTable = "DissociateTransitRouterRoutePolicyFromRouteTable"

// DissociateTransitRouterRoutePolicyFromRouteTableRequest generates a "byteplus/request.Request" representing the
// client's request for the DissociateTransitRouterRoutePolicyFromRouteTable operation. The "output" return
// value will be populated with the DissociateTransitRouterRoutePolicyFromRouteTableCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DissociateTransitRouterRoutePolicyFromRouteTableCommon Request to send the API call to the service.
// the "output" return value is not valid until after DissociateTransitRouterRoutePolicyFromRouteTableCommon Send returns without error.
//
// See DissociateTransitRouterRoutePolicyFromRouteTable for more information on using the DissociateTransitRouterRoutePolicyFromRouteTable
// API call, and error handling.
//
//    // Example sending a request using the DissociateTransitRouterRoutePolicyFromRouteTableRequest method.
//    req, resp := client.DissociateTransitRouterRoutePolicyFromRouteTableRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) DissociateTransitRouterRoutePolicyFromRouteTableRequest(input *DissociateTransitRouterRoutePolicyFromRouteTableInput) (req *request.Request, output *DissociateTransitRouterRoutePolicyFromRouteTableOutput) {
	op := &request.Operation{
		Name:       opDissociateTransitRouterRoutePolicyFromRouteTable,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DissociateTransitRouterRoutePolicyFromRouteTableInput{}
	}

	output = &DissociateTransitRouterRoutePolicyFromRouteTableOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DissociateTransitRouterRoutePolicyFromRouteTable API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation DissociateTransitRouterRoutePolicyFromRouteTable for usage and error information.
func (c *TRANSITROUTER) DissociateTransitRouterRoutePolicyFromRouteTable(input *DissociateTransitRouterRoutePolicyFromRouteTableInput) (*DissociateTransitRouterRoutePolicyFromRouteTableOutput, error) {
	req, out := c.DissociateTransitRouterRoutePolicyFromRouteTableRequest(input)
	return out, req.Send()
}

// DissociateTransitRouterRoutePolicyFromRouteTableWithContext is the same as DissociateTransitRouterRoutePolicyFromRouteTable with the addition of
// the ability to pass a context and additional request options.
//
// See DissociateTransitRouterRoutePolicyFromRouteTable for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) DissociateTransitRouterRoutePolicyFromRouteTableWithContext(ctx byteplus.Context, input *DissociateTransitRouterRoutePolicyFromRouteTableInput, opts ...request.Option) (*DissociateTransitRouterRoutePolicyFromRouteTableOutput, error) {
	req, out := c.DissociateTransitRouterRoutePolicyFromRouteTableRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DissociateTransitRouterRoutePolicyFromRouteTableInput struct {
	_ struct{} `type:"structure"`

	// TransitRouterRoutePolicyTableId is a required field
	TransitRouterRoutePolicyTableId *string `type:"string" required:"true"`

	// TransitRouterRouteTableId is a required field
	TransitRouterRouteTableId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DissociateTransitRouterRoutePolicyFromRouteTableInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DissociateTransitRouterRoutePolicyFromRouteTableInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DissociateTransitRouterRoutePolicyFromRouteTableInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DissociateTransitRouterRoutePolicyFromRouteTableInput"}
	if s.TransitRouterRoutePolicyTableId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterRoutePolicyTableId"))
	}
	if s.TransitRouterRouteTableId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterRouteTableId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetTransitRouterRoutePolicyTableId sets the TransitRouterRoutePolicyTableId field's value.
func (s *DissociateTransitRouterRoutePolicyFromRouteTableInput) SetTransitRouterRoutePolicyTableId(v string) *DissociateTransitRouterRoutePolicyFromRouteTableInput {
	s.TransitRouterRoutePolicyTableId = &v
	return s
}

// SetTransitRouterRouteTableId sets the TransitRouterRouteTableId field's value.
func (s *DissociateTransitRouterRoutePolicyFromRouteTableInput) SetTransitRouterRouteTableId(v string) *DissociateTransitRouterRoutePolicyFromRouteTableInput {
	s.TransitRouterRouteTableId = &v
	return s
}

type DissociateTransitRouterRoutePolicyFromRouteTableOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DissociateTransitRouterRoutePolicyFromRouteTableOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DissociateTransitRouterRoutePolicyFromRouteTableOutput) GoString() string {
	return s.String()
}
