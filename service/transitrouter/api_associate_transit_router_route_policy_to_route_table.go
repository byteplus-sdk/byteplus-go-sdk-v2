// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package transitrouter

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opAssociateTransitRouterRoutePolicyToRouteTableCommon = "AssociateTransitRouterRoutePolicyToRouteTable"

// AssociateTransitRouterRoutePolicyToRouteTableCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the AssociateTransitRouterRoutePolicyToRouteTableCommon operation. The "output" return
// value will be populated with the AssociateTransitRouterRoutePolicyToRouteTableCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssociateTransitRouterRoutePolicyToRouteTableCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssociateTransitRouterRoutePolicyToRouteTableCommon Send returns without error.
//
// See AssociateTransitRouterRoutePolicyToRouteTableCommon for more information on using the AssociateTransitRouterRoutePolicyToRouteTableCommon
// API call, and error handling.
//
//    // Example sending a request using the AssociateTransitRouterRoutePolicyToRouteTableCommonRequest method.
//    req, resp := client.AssociateTransitRouterRoutePolicyToRouteTableCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) AssociateTransitRouterRoutePolicyToRouteTableCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAssociateTransitRouterRoutePolicyToRouteTableCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AssociateTransitRouterRoutePolicyToRouteTableCommon API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation AssociateTransitRouterRoutePolicyToRouteTableCommon for usage and error information.
func (c *TRANSITROUTER) AssociateTransitRouterRoutePolicyToRouteTableCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AssociateTransitRouterRoutePolicyToRouteTableCommonRequest(input)
	return out, req.Send()
}

// AssociateTransitRouterRoutePolicyToRouteTableCommonWithContext is the same as AssociateTransitRouterRoutePolicyToRouteTableCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateTransitRouterRoutePolicyToRouteTableCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) AssociateTransitRouterRoutePolicyToRouteTableCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AssociateTransitRouterRoutePolicyToRouteTableCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAssociateTransitRouterRoutePolicyToRouteTable = "AssociateTransitRouterRoutePolicyToRouteTable"

// AssociateTransitRouterRoutePolicyToRouteTableRequest generates a "byteplus/request.Request" representing the
// client's request for the AssociateTransitRouterRoutePolicyToRouteTable operation. The "output" return
// value will be populated with the AssociateTransitRouterRoutePolicyToRouteTableCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssociateTransitRouterRoutePolicyToRouteTableCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssociateTransitRouterRoutePolicyToRouteTableCommon Send returns without error.
//
// See AssociateTransitRouterRoutePolicyToRouteTable for more information on using the AssociateTransitRouterRoutePolicyToRouteTable
// API call, and error handling.
//
//    // Example sending a request using the AssociateTransitRouterRoutePolicyToRouteTableRequest method.
//    req, resp := client.AssociateTransitRouterRoutePolicyToRouteTableRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *TRANSITROUTER) AssociateTransitRouterRoutePolicyToRouteTableRequest(input *AssociateTransitRouterRoutePolicyToRouteTableInput) (req *request.Request, output *AssociateTransitRouterRoutePolicyToRouteTableOutput) {
	op := &request.Operation{
		Name:       opAssociateTransitRouterRoutePolicyToRouteTable,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AssociateTransitRouterRoutePolicyToRouteTableInput{}
	}

	output = &AssociateTransitRouterRoutePolicyToRouteTableOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AssociateTransitRouterRoutePolicyToRouteTable API operation for TRANSITROUTER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for TRANSITROUTER's
// API operation AssociateTransitRouterRoutePolicyToRouteTable for usage and error information.
func (c *TRANSITROUTER) AssociateTransitRouterRoutePolicyToRouteTable(input *AssociateTransitRouterRoutePolicyToRouteTableInput) (*AssociateTransitRouterRoutePolicyToRouteTableOutput, error) {
	req, out := c.AssociateTransitRouterRoutePolicyToRouteTableRequest(input)
	return out, req.Send()
}

// AssociateTransitRouterRoutePolicyToRouteTableWithContext is the same as AssociateTransitRouterRoutePolicyToRouteTable with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateTransitRouterRoutePolicyToRouteTable for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *TRANSITROUTER) AssociateTransitRouterRoutePolicyToRouteTableWithContext(ctx byteplus.Context, input *AssociateTransitRouterRoutePolicyToRouteTableInput, opts ...request.Option) (*AssociateTransitRouterRoutePolicyToRouteTableOutput, error) {
	req, out := c.AssociateTransitRouterRoutePolicyToRouteTableRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AssociateTransitRouterRoutePolicyToRouteTableInput struct {
	_ struct{} `type:"structure"`

	// Direction is a required field
	Direction *string `type:"string" required:"true"`

	// TransitRouterRoutePolicyTableId is a required field
	TransitRouterRoutePolicyTableId *string `type:"string" required:"true"`

	// TransitRouterRouteTableId is a required field
	TransitRouterRouteTableId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AssociateTransitRouterRoutePolicyToRouteTableInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateTransitRouterRoutePolicyToRouteTableInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AssociateTransitRouterRoutePolicyToRouteTableInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AssociateTransitRouterRoutePolicyToRouteTableInput"}
	if s.Direction == nil {
		invalidParams.Add(request.NewErrParamRequired("Direction"))
	}
	if s.TransitRouterRoutePolicyTableId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterRoutePolicyTableId"))
	}
	if s.TransitRouterRouteTableId == nil {
		invalidParams.Add(request.NewErrParamRequired("TransitRouterRouteTableId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDirection sets the Direction field's value.
func (s *AssociateTransitRouterRoutePolicyToRouteTableInput) SetDirection(v string) *AssociateTransitRouterRoutePolicyToRouteTableInput {
	s.Direction = &v
	return s
}

// SetTransitRouterRoutePolicyTableId sets the TransitRouterRoutePolicyTableId field's value.
func (s *AssociateTransitRouterRoutePolicyToRouteTableInput) SetTransitRouterRoutePolicyTableId(v string) *AssociateTransitRouterRoutePolicyToRouteTableInput {
	s.TransitRouterRoutePolicyTableId = &v
	return s
}

// SetTransitRouterRouteTableId sets the TransitRouterRouteTableId field's value.
func (s *AssociateTransitRouterRoutePolicyToRouteTableInput) SetTransitRouterRouteTableId(v string) *AssociateTransitRouterRoutePolicyToRouteTableInput {
	s.TransitRouterRouteTableId = &v
	return s
}

type AssociateTransitRouterRoutePolicyToRouteTableOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AssociateTransitRouterRoutePolicyToRouteTableOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateTransitRouterRoutePolicyToRouteTableOutput) GoString() string {
	return s.String()
}
