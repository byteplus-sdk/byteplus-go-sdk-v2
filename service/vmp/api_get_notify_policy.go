// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGetNotifyPolicyCommon = "GetNotifyPolicy"

// GetNotifyPolicyCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GetNotifyPolicyCommon operation. The "output" return
// value will be populated with the GetNotifyPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetNotifyPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetNotifyPolicyCommon Send returns without error.
//
// See GetNotifyPolicyCommon for more information on using the GetNotifyPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the GetNotifyPolicyCommonRequest method.
//    req, resp := client.GetNotifyPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) GetNotifyPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetNotifyPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetNotifyPolicyCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation GetNotifyPolicyCommon for usage and error information.
func (c *VMP) GetNotifyPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetNotifyPolicyCommonRequest(input)
	return out, req.Send()
}

// GetNotifyPolicyCommonWithContext is the same as GetNotifyPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetNotifyPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) GetNotifyPolicyCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetNotifyPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetNotifyPolicy = "GetNotifyPolicy"

// GetNotifyPolicyRequest generates a "byteplus/request.Request" representing the
// client's request for the GetNotifyPolicy operation. The "output" return
// value will be populated with the GetNotifyPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetNotifyPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetNotifyPolicyCommon Send returns without error.
//
// See GetNotifyPolicy for more information on using the GetNotifyPolicy
// API call, and error handling.
//
//    // Example sending a request using the GetNotifyPolicyRequest method.
//    req, resp := client.GetNotifyPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) GetNotifyPolicyRequest(input *GetNotifyPolicyInput) (req *request.Request, output *GetNotifyPolicyOutput) {
	op := &request.Operation{
		Name:       opGetNotifyPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetNotifyPolicyInput{}
	}

	output = &GetNotifyPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetNotifyPolicy API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation GetNotifyPolicy for usage and error information.
func (c *VMP) GetNotifyPolicy(input *GetNotifyPolicyInput) (*GetNotifyPolicyOutput, error) {
	req, out := c.GetNotifyPolicyRequest(input)
	return out, req.Send()
}

// GetNotifyPolicyWithContext is the same as GetNotifyPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See GetNotifyPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) GetNotifyPolicyWithContext(ctx byteplus.Context, input *GetNotifyPolicyInput, opts ...request.Option) (*GetNotifyPolicyOutput, error) {
	req, out := c.GetNotifyPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetNotifyPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetNotifyPolicyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetNotifyPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetNotifyPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetNotifyPolicyInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetId sets the Id field's value.
func (s *GetNotifyPolicyInput) SetId(v string) *GetNotifyPolicyInput {
	s.Id = &v
	return s
}

type GetNotifyPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ChannelNotifyTemplateIds []*string `type:"list" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Levels []*LevelForGetNotifyPolicyOutput `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetNotifyPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetNotifyPolicyOutput) GoString() string {
	return s.String()
}

// SetChannelNotifyTemplateIds sets the ChannelNotifyTemplateIds field's value.
func (s *GetNotifyPolicyOutput) SetChannelNotifyTemplateIds(v []*string) *GetNotifyPolicyOutput {
	s.ChannelNotifyTemplateIds = v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *GetNotifyPolicyOutput) SetCreateTime(v string) *GetNotifyPolicyOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *GetNotifyPolicyOutput) SetDescription(v string) *GetNotifyPolicyOutput {
	s.Description = &v
	return s
}

// SetId sets the Id field's value.
func (s *GetNotifyPolicyOutput) SetId(v string) *GetNotifyPolicyOutput {
	s.Id = &v
	return s
}

// SetLevels sets the Levels field's value.
func (s *GetNotifyPolicyOutput) SetLevels(v []*LevelForGetNotifyPolicyOutput) *GetNotifyPolicyOutput {
	s.Levels = v
	return s
}

// SetName sets the Name field's value.
func (s *GetNotifyPolicyOutput) SetName(v string) *GetNotifyPolicyOutput {
	s.Name = &v
	return s
}

type LevelForGetNotifyPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Channels []*string `type:"list" json:",omitempty"`

	ContactGroupIds []*string `type:"list" json:",omitempty"`

	Level *string `type:"string" json:",omitempty"`

	ResolvedChannels []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s LevelForGetNotifyPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s LevelForGetNotifyPolicyOutput) GoString() string {
	return s.String()
}

// SetChannels sets the Channels field's value.
func (s *LevelForGetNotifyPolicyOutput) SetChannels(v []*string) *LevelForGetNotifyPolicyOutput {
	s.Channels = v
	return s
}

// SetContactGroupIds sets the ContactGroupIds field's value.
func (s *LevelForGetNotifyPolicyOutput) SetContactGroupIds(v []*string) *LevelForGetNotifyPolicyOutput {
	s.ContactGroupIds = v
	return s
}

// SetLevel sets the Level field's value.
func (s *LevelForGetNotifyPolicyOutput) SetLevel(v string) *LevelForGetNotifyPolicyOutput {
	s.Level = &v
	return s
}

// SetResolvedChannels sets the ResolvedChannels field's value.
func (s *LevelForGetNotifyPolicyOutput) SetResolvedChannels(v []*string) *LevelForGetNotifyPolicyOutput {
	s.ResolvedChannels = v
	return s
}
