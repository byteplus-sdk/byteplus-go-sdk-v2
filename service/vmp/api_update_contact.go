// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUpdateContactCommon = "UpdateContact"

// UpdateContactCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateContactCommon operation. The "output" return
// value will be populated with the UpdateContactCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateContactCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateContactCommon Send returns without error.
//
// See UpdateContactCommon for more information on using the UpdateContactCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateContactCommonRequest method.
//    req, resp := client.UpdateContactCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) UpdateContactCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateContactCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateContactCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation UpdateContactCommon for usage and error information.
func (c *VMP) UpdateContactCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateContactCommonRequest(input)
	return out, req.Send()
}

// UpdateContactCommonWithContext is the same as UpdateContactCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateContactCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) UpdateContactCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateContactCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateContact = "UpdateContact"

// UpdateContactRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateContact operation. The "output" return
// value will be populated with the UpdateContactCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateContactCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateContactCommon Send returns without error.
//
// See UpdateContact for more information on using the UpdateContact
// API call, and error handling.
//
//    // Example sending a request using the UpdateContactRequest method.
//    req, resp := client.UpdateContactRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) UpdateContactRequest(input *UpdateContactInput) (req *request.Request, output *UpdateContactOutput) {
	op := &request.Operation{
		Name:       opUpdateContact,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateContactInput{}
	}

	output = &UpdateContactOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateContact API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation UpdateContact for usage and error information.
func (c *VMP) UpdateContact(input *UpdateContactInput) (*UpdateContactOutput, error) {
	req, out := c.UpdateContactRequest(input)
	return out, req.Send()
}

// UpdateContactWithContext is the same as UpdateContact with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateContact for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) UpdateContactWithContext(ctx byteplus.Context, input *UpdateContactInput, opts ...request.Option) (*UpdateContactOutput, error) {
	req, out := c.UpdateContactRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DingTalkBotWebhookForUpdateContactInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Address *string `type:"string" json:",omitempty"`

	AtMobiles []*string `type:"list" json:",omitempty"`

	AtUserIds []*string `type:"list" json:",omitempty"`

	SecretKey *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DingTalkBotWebhookForUpdateContactInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DingTalkBotWebhookForUpdateContactInput) GoString() string {
	return s.String()
}

// SetAddress sets the Address field's value.
func (s *DingTalkBotWebhookForUpdateContactInput) SetAddress(v string) *DingTalkBotWebhookForUpdateContactInput {
	s.Address = &v
	return s
}

// SetAtMobiles sets the AtMobiles field's value.
func (s *DingTalkBotWebhookForUpdateContactInput) SetAtMobiles(v []*string) *DingTalkBotWebhookForUpdateContactInput {
	s.AtMobiles = v
	return s
}

// SetAtUserIds sets the AtUserIds field's value.
func (s *DingTalkBotWebhookForUpdateContactInput) SetAtUserIds(v []*string) *DingTalkBotWebhookForUpdateContactInput {
	s.AtUserIds = v
	return s
}

// SetSecretKey sets the SecretKey field's value.
func (s *DingTalkBotWebhookForUpdateContactInput) SetSecretKey(v string) *DingTalkBotWebhookForUpdateContactInput {
	s.SecretKey = &v
	return s
}

type LarkBotWebhookForUpdateContactInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Address *string `type:"string" json:",omitempty"`

	SecretKey *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s LarkBotWebhookForUpdateContactInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s LarkBotWebhookForUpdateContactInput) GoString() string {
	return s.String()
}

// SetAddress sets the Address field's value.
func (s *LarkBotWebhookForUpdateContactInput) SetAddress(v string) *LarkBotWebhookForUpdateContactInput {
	s.Address = &v
	return s
}

// SetSecretKey sets the SecretKey field's value.
func (s *LarkBotWebhookForUpdateContactInput) SetSecretKey(v string) *LarkBotWebhookForUpdateContactInput {
	s.SecretKey = &v
	return s
}

type UpdateContactInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ContactGroupIds []*string `type:"list" json:",omitempty"`

	DingTalkBotWebhook *DingTalkBotWebhookForUpdateContactInput `type:"structure" json:",omitempty"`

	Email *string `type:"string" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	LarkBotWebhook *LarkBotWebhookForUpdateContactInput `type:"structure" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	WeComBotWebhook *WeComBotWebhookForUpdateContactInput `type:"structure" json:",omitempty"`

	Webhook *WebhookForUpdateContactInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s UpdateContactInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateContactInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateContactInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateContactInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetContactGroupIds sets the ContactGroupIds field's value.
func (s *UpdateContactInput) SetContactGroupIds(v []*string) *UpdateContactInput {
	s.ContactGroupIds = v
	return s
}

// SetDingTalkBotWebhook sets the DingTalkBotWebhook field's value.
func (s *UpdateContactInput) SetDingTalkBotWebhook(v *DingTalkBotWebhookForUpdateContactInput) *UpdateContactInput {
	s.DingTalkBotWebhook = v
	return s
}

// SetEmail sets the Email field's value.
func (s *UpdateContactInput) SetEmail(v string) *UpdateContactInput {
	s.Email = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateContactInput) SetId(v string) *UpdateContactInput {
	s.Id = &v
	return s
}

// SetLarkBotWebhook sets the LarkBotWebhook field's value.
func (s *UpdateContactInput) SetLarkBotWebhook(v *LarkBotWebhookForUpdateContactInput) *UpdateContactInput {
	s.LarkBotWebhook = v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateContactInput) SetName(v string) *UpdateContactInput {
	s.Name = &v
	return s
}

// SetWeComBotWebhook sets the WeComBotWebhook field's value.
func (s *UpdateContactInput) SetWeComBotWebhook(v *WeComBotWebhookForUpdateContactInput) *UpdateContactInput {
	s.WeComBotWebhook = v
	return s
}

// SetWebhook sets the Webhook field's value.
func (s *UpdateContactInput) SetWebhook(v *WebhookForUpdateContactInput) *UpdateContactInput {
	s.Webhook = v
	return s
}

type UpdateContactOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`

	SendStatus *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateContactOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateContactOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *UpdateContactOutput) SetId(v string) *UpdateContactOutput {
	s.Id = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *UpdateContactOutput) SetMessage(v string) *UpdateContactOutput {
	s.Message = &v
	return s
}

// SetSendStatus sets the SendStatus field's value.
func (s *UpdateContactOutput) SetSendStatus(v string) *UpdateContactOutput {
	s.SendStatus = &v
	return s
}

type WeComBotWebhookForUpdateContactInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Address *string `type:"string" json:",omitempty"`

	AtUserIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s WeComBotWebhookForUpdateContactInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s WeComBotWebhookForUpdateContactInput) GoString() string {
	return s.String()
}

// SetAddress sets the Address field's value.
func (s *WeComBotWebhookForUpdateContactInput) SetAddress(v string) *WeComBotWebhookForUpdateContactInput {
	s.Address = &v
	return s
}

// SetAtUserIds sets the AtUserIds field's value.
func (s *WeComBotWebhookForUpdateContactInput) SetAtUserIds(v []*string) *WeComBotWebhookForUpdateContactInput {
	s.AtUserIds = v
	return s
}

type WebhookForUpdateContactInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Address *string `type:"string" json:",omitempty"`

	Token *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s WebhookForUpdateContactInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s WebhookForUpdateContactInput) GoString() string {
	return s.String()
}

// SetAddress sets the Address field's value.
func (s *WebhookForUpdateContactInput) SetAddress(v string) *WebhookForUpdateContactInput {
	s.Address = &v
	return s
}

// SetToken sets the Token field's value.
func (s *WebhookForUpdateContactInput) SetToken(v string) *WebhookForUpdateContactInput {
	s.Token = &v
	return s
}
