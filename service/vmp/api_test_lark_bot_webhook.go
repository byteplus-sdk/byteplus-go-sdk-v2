// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opTestLarkBotWebhookCommon = "TestLarkBotWebhook"

// TestLarkBotWebhookCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the TestLarkBotWebhookCommon operation. The "output" return
// value will be populated with the TestLarkBotWebhookCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TestLarkBotWebhookCommon Request to send the API call to the service.
// the "output" return value is not valid until after TestLarkBotWebhookCommon Send returns without error.
//
// See TestLarkBotWebhookCommon for more information on using the TestLarkBotWebhookCommon
// API call, and error handling.
//
//    // Example sending a request using the TestLarkBotWebhookCommonRequest method.
//    req, resp := client.TestLarkBotWebhookCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) TestLarkBotWebhookCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opTestLarkBotWebhookCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TestLarkBotWebhookCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation TestLarkBotWebhookCommon for usage and error information.
func (c *VMP) TestLarkBotWebhookCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.TestLarkBotWebhookCommonRequest(input)
	return out, req.Send()
}

// TestLarkBotWebhookCommonWithContext is the same as TestLarkBotWebhookCommon with the addition of
// the ability to pass a context and additional request options.
//
// See TestLarkBotWebhookCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) TestLarkBotWebhookCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.TestLarkBotWebhookCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opTestLarkBotWebhook = "TestLarkBotWebhook"

// TestLarkBotWebhookRequest generates a "byteplus/request.Request" representing the
// client's request for the TestLarkBotWebhook operation. The "output" return
// value will be populated with the TestLarkBotWebhookCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TestLarkBotWebhookCommon Request to send the API call to the service.
// the "output" return value is not valid until after TestLarkBotWebhookCommon Send returns without error.
//
// See TestLarkBotWebhook for more information on using the TestLarkBotWebhook
// API call, and error handling.
//
//    // Example sending a request using the TestLarkBotWebhookRequest method.
//    req, resp := client.TestLarkBotWebhookRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) TestLarkBotWebhookRequest(input *TestLarkBotWebhookInput) (req *request.Request, output *TestLarkBotWebhookOutput) {
	op := &request.Operation{
		Name:       opTestLarkBotWebhook,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TestLarkBotWebhookInput{}
	}

	output = &TestLarkBotWebhookOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TestLarkBotWebhook API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation TestLarkBotWebhook for usage and error information.
func (c *VMP) TestLarkBotWebhook(input *TestLarkBotWebhookInput) (*TestLarkBotWebhookOutput, error) {
	req, out := c.TestLarkBotWebhookRequest(input)
	return out, req.Send()
}

// TestLarkBotWebhookWithContext is the same as TestLarkBotWebhook with the addition of
// the ability to pass a context and additional request options.
//
// See TestLarkBotWebhook for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) TestLarkBotWebhookWithContext(ctx byteplus.Context, input *TestLarkBotWebhookInput, opts ...request.Option) (*TestLarkBotWebhookOutput, error) {
	req, out := c.TestLarkBotWebhookRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type TestLarkBotWebhookInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Address is a required field
	Address *string `type:"string" json:",omitempty" required:"true"`

	SecretKey *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TestLarkBotWebhookInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TestLarkBotWebhookInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TestLarkBotWebhookInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "TestLarkBotWebhookInput"}
	if s.Address == nil {
		invalidParams.Add(request.NewErrParamRequired("Address"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAddress sets the Address field's value.
func (s *TestLarkBotWebhookInput) SetAddress(v string) *TestLarkBotWebhookInput {
	s.Address = &v
	return s
}

// SetSecretKey sets the SecretKey field's value.
func (s *TestLarkBotWebhookInput) SetSecretKey(v string) *TestLarkBotWebhookInput {
	s.SecretKey = &v
	return s
}

type TestLarkBotWebhookOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ErrorMessage *string `type:"string" json:",omitempty"`

	LarkCode *int32 `type:"int32" json:",omitempty"`

	LarkMessage *string `type:"string" json:",omitempty"`

	StatusCode *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s TestLarkBotWebhookOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TestLarkBotWebhookOutput) GoString() string {
	return s.String()
}

// SetErrorMessage sets the ErrorMessage field's value.
func (s *TestLarkBotWebhookOutput) SetErrorMessage(v string) *TestLarkBotWebhookOutput {
	s.ErrorMessage = &v
	return s
}

// SetLarkCode sets the LarkCode field's value.
func (s *TestLarkBotWebhookOutput) SetLarkCode(v int32) *TestLarkBotWebhookOutput {
	s.LarkCode = &v
	return s
}

// SetLarkMessage sets the LarkMessage field's value.
func (s *TestLarkBotWebhookOutput) SetLarkMessage(v string) *TestLarkBotWebhookOutput {
	s.LarkMessage = &v
	return s
}

// SetStatusCode sets the StatusCode field's value.
func (s *TestLarkBotWebhookOutput) SetStatusCode(v int32) *TestLarkBotWebhookOutput {
	s.StatusCode = &v
	return s
}
