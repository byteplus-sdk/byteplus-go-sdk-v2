// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opTestDingTalkBotWebhookCommon = "TestDingTalkBotWebhook"

// TestDingTalkBotWebhookCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the TestDingTalkBotWebhookCommon operation. The "output" return
// value will be populated with the TestDingTalkBotWebhookCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TestDingTalkBotWebhookCommon Request to send the API call to the service.
// the "output" return value is not valid until after TestDingTalkBotWebhookCommon Send returns without error.
//
// See TestDingTalkBotWebhookCommon for more information on using the TestDingTalkBotWebhookCommon
// API call, and error handling.
//
//    // Example sending a request using the TestDingTalkBotWebhookCommonRequest method.
//    req, resp := client.TestDingTalkBotWebhookCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) TestDingTalkBotWebhookCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opTestDingTalkBotWebhookCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TestDingTalkBotWebhookCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation TestDingTalkBotWebhookCommon for usage and error information.
func (c *VMP) TestDingTalkBotWebhookCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.TestDingTalkBotWebhookCommonRequest(input)
	return out, req.Send()
}

// TestDingTalkBotWebhookCommonWithContext is the same as TestDingTalkBotWebhookCommon with the addition of
// the ability to pass a context and additional request options.
//
// See TestDingTalkBotWebhookCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) TestDingTalkBotWebhookCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.TestDingTalkBotWebhookCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opTestDingTalkBotWebhook = "TestDingTalkBotWebhook"

// TestDingTalkBotWebhookRequest generates a "byteplus/request.Request" representing the
// client's request for the TestDingTalkBotWebhook operation. The "output" return
// value will be populated with the TestDingTalkBotWebhookCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TestDingTalkBotWebhookCommon Request to send the API call to the service.
// the "output" return value is not valid until after TestDingTalkBotWebhookCommon Send returns without error.
//
// See TestDingTalkBotWebhook for more information on using the TestDingTalkBotWebhook
// API call, and error handling.
//
//    // Example sending a request using the TestDingTalkBotWebhookRequest method.
//    req, resp := client.TestDingTalkBotWebhookRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) TestDingTalkBotWebhookRequest(input *TestDingTalkBotWebhookInput) (req *request.Request, output *TestDingTalkBotWebhookOutput) {
	op := &request.Operation{
		Name:       opTestDingTalkBotWebhook,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TestDingTalkBotWebhookInput{}
	}

	output = &TestDingTalkBotWebhookOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TestDingTalkBotWebhook API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation TestDingTalkBotWebhook for usage and error information.
func (c *VMP) TestDingTalkBotWebhook(input *TestDingTalkBotWebhookInput) (*TestDingTalkBotWebhookOutput, error) {
	req, out := c.TestDingTalkBotWebhookRequest(input)
	return out, req.Send()
}

// TestDingTalkBotWebhookWithContext is the same as TestDingTalkBotWebhook with the addition of
// the ability to pass a context and additional request options.
//
// See TestDingTalkBotWebhook for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) TestDingTalkBotWebhookWithContext(ctx byteplus.Context, input *TestDingTalkBotWebhookInput, opts ...request.Option) (*TestDingTalkBotWebhookOutput, error) {
	req, out := c.TestDingTalkBotWebhookRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type TestDingTalkBotWebhookInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Address is a required field
	Address *string `type:"string" json:",omitempty" required:"true"`

	AtMobiles []*string `type:"list" json:",omitempty"`

	AtUserIds []*string `type:"list" json:",omitempty"`

	SecretKey *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TestDingTalkBotWebhookInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TestDingTalkBotWebhookInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TestDingTalkBotWebhookInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "TestDingTalkBotWebhookInput"}
	if s.Address == nil {
		invalidParams.Add(request.NewErrParamRequired("Address"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAddress sets the Address field's value.
func (s *TestDingTalkBotWebhookInput) SetAddress(v string) *TestDingTalkBotWebhookInput {
	s.Address = &v
	return s
}

// SetAtMobiles sets the AtMobiles field's value.
func (s *TestDingTalkBotWebhookInput) SetAtMobiles(v []*string) *TestDingTalkBotWebhookInput {
	s.AtMobiles = v
	return s
}

// SetAtUserIds sets the AtUserIds field's value.
func (s *TestDingTalkBotWebhookInput) SetAtUserIds(v []*string) *TestDingTalkBotWebhookInput {
	s.AtUserIds = v
	return s
}

// SetSecretKey sets the SecretKey field's value.
func (s *TestDingTalkBotWebhookInput) SetSecretKey(v string) *TestDingTalkBotWebhookInput {
	s.SecretKey = &v
	return s
}

type TestDingTalkBotWebhookOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	DingTalkCode *int32 `type:"int32" json:",omitempty"`

	DingTalkMessage *string `type:"string" json:",omitempty"`

	ErrorMessage *string `type:"string" json:",omitempty"`

	StatusCode *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s TestDingTalkBotWebhookOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TestDingTalkBotWebhookOutput) GoString() string {
	return s.String()
}

// SetDingTalkCode sets the DingTalkCode field's value.
func (s *TestDingTalkBotWebhookOutput) SetDingTalkCode(v int32) *TestDingTalkBotWebhookOutput {
	s.DingTalkCode = &v
	return s
}

// SetDingTalkMessage sets the DingTalkMessage field's value.
func (s *TestDingTalkBotWebhookOutput) SetDingTalkMessage(v string) *TestDingTalkBotWebhookOutput {
	s.DingTalkMessage = &v
	return s
}

// SetErrorMessage sets the ErrorMessage field's value.
func (s *TestDingTalkBotWebhookOutput) SetErrorMessage(v string) *TestDingTalkBotWebhookOutput {
	s.ErrorMessage = &v
	return s
}

// SetStatusCode sets the StatusCode field's value.
func (s *TestDingTalkBotWebhookOutput) SetStatusCode(v int32) *TestDingTalkBotWebhookOutput {
	s.StatusCode = &v
	return s
}
