// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGetContactGroupCommon = "GetContactGroup"

// GetContactGroupCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GetContactGroupCommon operation. The "output" return
// value will be populated with the GetContactGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetContactGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetContactGroupCommon Send returns without error.
//
// See GetContactGroupCommon for more information on using the GetContactGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the GetContactGroupCommonRequest method.
//    req, resp := client.GetContactGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) GetContactGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetContactGroupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetContactGroupCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation GetContactGroupCommon for usage and error information.
func (c *VMP) GetContactGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetContactGroupCommonRequest(input)
	return out, req.Send()
}

// GetContactGroupCommonWithContext is the same as GetContactGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetContactGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) GetContactGroupCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetContactGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetContactGroup = "GetContactGroup"

// GetContactGroupRequest generates a "byteplus/request.Request" representing the
// client's request for the GetContactGroup operation. The "output" return
// value will be populated with the GetContactGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetContactGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetContactGroupCommon Send returns without error.
//
// See GetContactGroup for more information on using the GetContactGroup
// API call, and error handling.
//
//    // Example sending a request using the GetContactGroupRequest method.
//    req, resp := client.GetContactGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) GetContactGroupRequest(input *GetContactGroupInput) (req *request.Request, output *GetContactGroupOutput) {
	op := &request.Operation{
		Name:       opGetContactGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetContactGroupInput{}
	}

	output = &GetContactGroupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetContactGroup API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation GetContactGroup for usage and error information.
func (c *VMP) GetContactGroup(input *GetContactGroupInput) (*GetContactGroupOutput, error) {
	req, out := c.GetContactGroupRequest(input)
	return out, req.Send()
}

// GetContactGroupWithContext is the same as GetContactGroup with the addition of
// the ability to pass a context and additional request options.
//
// See GetContactGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) GetContactGroupWithContext(ctx byteplus.Context, input *GetContactGroupInput, opts ...request.Option) (*GetContactGroupOutput, error) {
	req, out := c.GetContactGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetContactGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetContactGroupInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetContactGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetContactGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetContactGroupInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetId sets the Id field's value.
func (s *GetContactGroupInput) SetId(v string) *GetContactGroupInput {
	s.Id = &v
	return s
}

type GetContactGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ContactIds []*string `type:"list" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetContactGroupOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetContactGroupOutput) GoString() string {
	return s.String()
}

// SetContactIds sets the ContactIds field's value.
func (s *GetContactGroupOutput) SetContactIds(v []*string) *GetContactGroupOutput {
	s.ContactIds = v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *GetContactGroupOutput) SetCreateTime(v string) *GetContactGroupOutput {
	s.CreateTime = &v
	return s
}

// SetId sets the Id field's value.
func (s *GetContactGroupOutput) SetId(v string) *GetContactGroupOutput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *GetContactGroupOutput) SetName(v string) *GetContactGroupOutput {
	s.Name = &v
	return s
}
