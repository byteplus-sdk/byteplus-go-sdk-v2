// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateContactGroupCommon = "CreateContactGroup"

// CreateContactGroupCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateContactGroupCommon operation. The "output" return
// value will be populated with the CreateContactGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateContactGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateContactGroupCommon Send returns without error.
//
// See CreateContactGroupCommon for more information on using the CreateContactGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateContactGroupCommonRequest method.
//    req, resp := client.CreateContactGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateContactGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateContactGroupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateContactGroupCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation CreateContactGroupCommon for usage and error information.
func (c *VMP) CreateContactGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateContactGroupCommonRequest(input)
	return out, req.Send()
}

// CreateContactGroupCommonWithContext is the same as CreateContactGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateContactGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateContactGroupCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateContactGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateContactGroup = "CreateContactGroup"

// CreateContactGroupRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateContactGroup operation. The "output" return
// value will be populated with the CreateContactGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateContactGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateContactGroupCommon Send returns without error.
//
// See CreateContactGroup for more information on using the CreateContactGroup
// API call, and error handling.
//
//    // Example sending a request using the CreateContactGroupRequest method.
//    req, resp := client.CreateContactGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateContactGroupRequest(input *CreateContactGroupInput) (req *request.Request, output *CreateContactGroupOutput) {
	op := &request.Operation{
		Name:       opCreateContactGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateContactGroupInput{}
	}

	output = &CreateContactGroupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateContactGroup API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation CreateContactGroup for usage and error information.
func (c *VMP) CreateContactGroup(input *CreateContactGroupInput) (*CreateContactGroupOutput, error) {
	req, out := c.CreateContactGroupRequest(input)
	return out, req.Send()
}

// CreateContactGroupWithContext is the same as CreateContactGroup with the addition of
// the ability to pass a context and additional request options.
//
// See CreateContactGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateContactGroupWithContext(ctx byteplus.Context, input *CreateContactGroupInput, opts ...request.Option) (*CreateContactGroupOutput, error) {
	req, out := c.CreateContactGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateContactGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ContactIds []*string `type:"list" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateContactGroupInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateContactGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateContactGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateContactGroupInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetContactIds sets the ContactIds field's value.
func (s *CreateContactGroupInput) SetContactIds(v []*string) *CreateContactGroupInput {
	s.ContactIds = v
	return s
}

// SetName sets the Name field's value.
func (s *CreateContactGroupInput) SetName(v string) *CreateContactGroupInput {
	s.Name = &v
	return s
}

type CreateContactGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateContactGroupOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateContactGroupOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CreateContactGroupOutput) SetId(v string) *CreateContactGroupOutput {
	s.Id = &v
	return s
}
