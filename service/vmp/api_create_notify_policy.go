// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateNotifyPolicyCommon = "CreateNotifyPolicy"

// CreateNotifyPolicyCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateNotifyPolicyCommon operation. The "output" return
// value will be populated with the CreateNotifyPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNotifyPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNotifyPolicyCommon Send returns without error.
//
// See CreateNotifyPolicyCommon for more information on using the CreateNotifyPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateNotifyPolicyCommonRequest method.
//    req, resp := client.CreateNotifyPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateNotifyPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateNotifyPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateNotifyPolicyCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation CreateNotifyPolicyCommon for usage and error information.
func (c *VMP) CreateNotifyPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateNotifyPolicyCommonRequest(input)
	return out, req.Send()
}

// CreateNotifyPolicyCommonWithContext is the same as CreateNotifyPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNotifyPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateNotifyPolicyCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateNotifyPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateNotifyPolicy = "CreateNotifyPolicy"

// CreateNotifyPolicyRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateNotifyPolicy operation. The "output" return
// value will be populated with the CreateNotifyPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNotifyPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNotifyPolicyCommon Send returns without error.
//
// See CreateNotifyPolicy for more information on using the CreateNotifyPolicy
// API call, and error handling.
//
//    // Example sending a request using the CreateNotifyPolicyRequest method.
//    req, resp := client.CreateNotifyPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateNotifyPolicyRequest(input *CreateNotifyPolicyInput) (req *request.Request, output *CreateNotifyPolicyOutput) {
	op := &request.Operation{
		Name:       opCreateNotifyPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateNotifyPolicyInput{}
	}

	output = &CreateNotifyPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateNotifyPolicy API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation CreateNotifyPolicy for usage and error information.
func (c *VMP) CreateNotifyPolicy(input *CreateNotifyPolicyInput) (*CreateNotifyPolicyOutput, error) {
	req, out := c.CreateNotifyPolicyRequest(input)
	return out, req.Send()
}

// CreateNotifyPolicyWithContext is the same as CreateNotifyPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNotifyPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateNotifyPolicyWithContext(ctx byteplus.Context, input *CreateNotifyPolicyInput, opts ...request.Option) (*CreateNotifyPolicyOutput, error) {
	req, out := c.CreateNotifyPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateNotifyPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ChannelNotifyTemplateIds []*string `type:"list" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Levels []*LevelForCreateNotifyPolicyInput `type:"list" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateNotifyPolicyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNotifyPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateNotifyPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateNotifyPolicyInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetChannelNotifyTemplateIds sets the ChannelNotifyTemplateIds field's value.
func (s *CreateNotifyPolicyInput) SetChannelNotifyTemplateIds(v []*string) *CreateNotifyPolicyInput {
	s.ChannelNotifyTemplateIds = v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateNotifyPolicyInput) SetDescription(v string) *CreateNotifyPolicyInput {
	s.Description = &v
	return s
}

// SetLevels sets the Levels field's value.
func (s *CreateNotifyPolicyInput) SetLevels(v []*LevelForCreateNotifyPolicyInput) *CreateNotifyPolicyInput {
	s.Levels = v
	return s
}

// SetName sets the Name field's value.
func (s *CreateNotifyPolicyInput) SetName(v string) *CreateNotifyPolicyInput {
	s.Name = &v
	return s
}

type CreateNotifyPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateNotifyPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNotifyPolicyOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CreateNotifyPolicyOutput) SetId(v string) *CreateNotifyPolicyOutput {
	s.Id = &v
	return s
}

type LevelForCreateNotifyPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Channels []*string `type:"list" json:",omitempty"`

	ContactGroupIds []*string `type:"list" json:",omitempty"`

	Level *string `type:"string" json:",omitempty"`

	ResolvedChannels []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s LevelForCreateNotifyPolicyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s LevelForCreateNotifyPolicyInput) GoString() string {
	return s.String()
}

// SetChannels sets the Channels field's value.
func (s *LevelForCreateNotifyPolicyInput) SetChannels(v []*string) *LevelForCreateNotifyPolicyInput {
	s.Channels = v
	return s
}

// SetContactGroupIds sets the ContactGroupIds field's value.
func (s *LevelForCreateNotifyPolicyInput) SetContactGroupIds(v []*string) *LevelForCreateNotifyPolicyInput {
	s.ContactGroupIds = v
	return s
}

// SetLevel sets the Level field's value.
func (s *LevelForCreateNotifyPolicyInput) SetLevel(v string) *LevelForCreateNotifyPolicyInput {
	s.Level = &v
	return s
}

// SetResolvedChannels sets the ResolvedChannels field's value.
func (s *LevelForCreateNotifyPolicyInput) SetResolvedChannels(v []*string) *LevelForCreateNotifyPolicyInput {
	s.ResolvedChannels = v
	return s
}
