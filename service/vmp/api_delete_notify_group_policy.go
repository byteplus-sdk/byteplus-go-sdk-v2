// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteNotifyGroupPolicyCommon = "DeleteNotifyGroupPolicy"

// DeleteNotifyGroupPolicyCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteNotifyGroupPolicyCommon operation. The "output" return
// value will be populated with the DeleteNotifyGroupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNotifyGroupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNotifyGroupPolicyCommon Send returns without error.
//
// See DeleteNotifyGroupPolicyCommon for more information on using the DeleteNotifyGroupPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteNotifyGroupPolicyCommonRequest method.
//    req, resp := client.DeleteNotifyGroupPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) DeleteNotifyGroupPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteNotifyGroupPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteNotifyGroupPolicyCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation DeleteNotifyGroupPolicyCommon for usage and error information.
func (c *VMP) DeleteNotifyGroupPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteNotifyGroupPolicyCommonRequest(input)
	return out, req.Send()
}

// DeleteNotifyGroupPolicyCommonWithContext is the same as DeleteNotifyGroupPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNotifyGroupPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) DeleteNotifyGroupPolicyCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteNotifyGroupPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteNotifyGroupPolicy = "DeleteNotifyGroupPolicy"

// DeleteNotifyGroupPolicyRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteNotifyGroupPolicy operation. The "output" return
// value will be populated with the DeleteNotifyGroupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNotifyGroupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNotifyGroupPolicyCommon Send returns without error.
//
// See DeleteNotifyGroupPolicy for more information on using the DeleteNotifyGroupPolicy
// API call, and error handling.
//
//    // Example sending a request using the DeleteNotifyGroupPolicyRequest method.
//    req, resp := client.DeleteNotifyGroupPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) DeleteNotifyGroupPolicyRequest(input *DeleteNotifyGroupPolicyInput) (req *request.Request, output *DeleteNotifyGroupPolicyOutput) {
	op := &request.Operation{
		Name:       opDeleteNotifyGroupPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteNotifyGroupPolicyInput{}
	}

	output = &DeleteNotifyGroupPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteNotifyGroupPolicy API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation DeleteNotifyGroupPolicy for usage and error information.
func (c *VMP) DeleteNotifyGroupPolicy(input *DeleteNotifyGroupPolicyInput) (*DeleteNotifyGroupPolicyOutput, error) {
	req, out := c.DeleteNotifyGroupPolicyRequest(input)
	return out, req.Send()
}

// DeleteNotifyGroupPolicyWithContext is the same as DeleteNotifyGroupPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNotifyGroupPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) DeleteNotifyGroupPolicyWithContext(ctx byteplus.Context, input *DeleteNotifyGroupPolicyInput, opts ...request.Option) (*DeleteNotifyGroupPolicyOutput, error) {
	req, out := c.DeleteNotifyGroupPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteNotifyGroupPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteNotifyGroupPolicyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNotifyGroupPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteNotifyGroupPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteNotifyGroupPolicyInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetId sets the Id field's value.
func (s *DeleteNotifyGroupPolicyInput) SetId(v string) *DeleteNotifyGroupPolicyInput {
	s.Id = &v
	return s
}

type DeleteNotifyGroupPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeleteNotifyGroupPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNotifyGroupPolicyOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *DeleteNotifyGroupPolicyOutput) SetId(v string) *DeleteNotifyGroupPolicyOutput {
	s.Id = &v
	return s
}
