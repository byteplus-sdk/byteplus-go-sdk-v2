// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opSendValidationMessageCommon = "SendValidationMessage"

// SendValidationMessageCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the SendValidationMessageCommon operation. The "output" return
// value will be populated with the SendValidationMessageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SendValidationMessageCommon Request to send the API call to the service.
// the "output" return value is not valid until after SendValidationMessageCommon Send returns without error.
//
// See SendValidationMessageCommon for more information on using the SendValidationMessageCommon
// API call, and error handling.
//
//    // Example sending a request using the SendValidationMessageCommonRequest method.
//    req, resp := client.SendValidationMessageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) SendValidationMessageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSendValidationMessageCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SendValidationMessageCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation SendValidationMessageCommon for usage and error information.
func (c *VMP) SendValidationMessageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SendValidationMessageCommonRequest(input)
	return out, req.Send()
}

// SendValidationMessageCommonWithContext is the same as SendValidationMessageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SendValidationMessageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) SendValidationMessageCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SendValidationMessageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSendValidationMessage = "SendValidationMessage"

// SendValidationMessageRequest generates a "byteplus/request.Request" representing the
// client's request for the SendValidationMessage operation. The "output" return
// value will be populated with the SendValidationMessageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SendValidationMessageCommon Request to send the API call to the service.
// the "output" return value is not valid until after SendValidationMessageCommon Send returns without error.
//
// See SendValidationMessage for more information on using the SendValidationMessage
// API call, and error handling.
//
//    // Example sending a request using the SendValidationMessageRequest method.
//    req, resp := client.SendValidationMessageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) SendValidationMessageRequest(input *SendValidationMessageInput) (req *request.Request, output *SendValidationMessageOutput) {
	op := &request.Operation{
		Name:       opSendValidationMessage,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SendValidationMessageInput{}
	}

	output = &SendValidationMessageOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// SendValidationMessage API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation SendValidationMessage for usage and error information.
func (c *VMP) SendValidationMessage(input *SendValidationMessageInput) (*SendValidationMessageOutput, error) {
	req, out := c.SendValidationMessageRequest(input)
	return out, req.Send()
}

// SendValidationMessageWithContext is the same as SendValidationMessage with the addition of
// the ability to pass a context and additional request options.
//
// See SendValidationMessage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) SendValidationMessageWithContext(ctx byteplus.Context, input *SendValidationMessageInput, opts ...request.Option) (*SendValidationMessageOutput, error) {
	req, out := c.SendValidationMessageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SendValidationMessageInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Destination is a required field
	Destination *string `type:"string" json:",omitempty" required:"true"`

	// Type is a required field
	Type *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s SendValidationMessageInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SendValidationMessageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SendValidationMessageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SendValidationMessageInput"}
	if s.Destination == nil {
		invalidParams.Add(request.NewErrParamRequired("Destination"))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDestination sets the Destination field's value.
func (s *SendValidationMessageInput) SetDestination(v string) *SendValidationMessageInput {
	s.Destination = &v
	return s
}

// SetType sets the Type field's value.
func (s *SendValidationMessageInput) SetType(v string) *SendValidationMessageInput {
	s.Type = &v
	return s
}

type SendValidationMessageOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`

	SendStatus *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s SendValidationMessageOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SendValidationMessageOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *SendValidationMessageOutput) SetMessage(v string) *SendValidationMessageOutput {
	s.Message = &v
	return s
}

// SetSendStatus sets the SendStatus field's value.
func (s *SendValidationMessageOutput) SetSendStatus(v string) *SendValidationMessageOutput {
	s.SendStatus = &v
	return s
}
