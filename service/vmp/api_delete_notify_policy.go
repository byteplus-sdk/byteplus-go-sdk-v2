// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteNotifyPolicyCommon = "DeleteNotifyPolicy"

// DeleteNotifyPolicyCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteNotifyPolicyCommon operation. The "output" return
// value will be populated with the DeleteNotifyPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNotifyPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNotifyPolicyCommon Send returns without error.
//
// See DeleteNotifyPolicyCommon for more information on using the DeleteNotifyPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteNotifyPolicyCommonRequest method.
//    req, resp := client.DeleteNotifyPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) DeleteNotifyPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteNotifyPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteNotifyPolicyCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation DeleteNotifyPolicyCommon for usage and error information.
func (c *VMP) DeleteNotifyPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteNotifyPolicyCommonRequest(input)
	return out, req.Send()
}

// DeleteNotifyPolicyCommonWithContext is the same as DeleteNotifyPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNotifyPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) DeleteNotifyPolicyCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteNotifyPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteNotifyPolicy = "DeleteNotifyPolicy"

// DeleteNotifyPolicyRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteNotifyPolicy operation. The "output" return
// value will be populated with the DeleteNotifyPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNotifyPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNotifyPolicyCommon Send returns without error.
//
// See DeleteNotifyPolicy for more information on using the DeleteNotifyPolicy
// API call, and error handling.
//
//    // Example sending a request using the DeleteNotifyPolicyRequest method.
//    req, resp := client.DeleteNotifyPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) DeleteNotifyPolicyRequest(input *DeleteNotifyPolicyInput) (req *request.Request, output *DeleteNotifyPolicyOutput) {
	op := &request.Operation{
		Name:       opDeleteNotifyPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteNotifyPolicyInput{}
	}

	output = &DeleteNotifyPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteNotifyPolicy API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation DeleteNotifyPolicy for usage and error information.
func (c *VMP) DeleteNotifyPolicy(input *DeleteNotifyPolicyInput) (*DeleteNotifyPolicyOutput, error) {
	req, out := c.DeleteNotifyPolicyRequest(input)
	return out, req.Send()
}

// DeleteNotifyPolicyWithContext is the same as DeleteNotifyPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNotifyPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) DeleteNotifyPolicyWithContext(ctx byteplus.Context, input *DeleteNotifyPolicyInput, opts ...request.Option) (*DeleteNotifyPolicyOutput, error) {
	req, out := c.DeleteNotifyPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteNotifyPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeleteNotifyPolicyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNotifyPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteNotifyPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteNotifyPolicyInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetId sets the Id field's value.
func (s *DeleteNotifyPolicyInput) SetId(v string) *DeleteNotifyPolicyInput {
	s.Id = &v
	return s
}

type DeleteNotifyPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeleteNotifyPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNotifyPolicyOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *DeleteNotifyPolicyOutput) SetId(v string) *DeleteNotifyPolicyOutput {
	s.Id = &v
	return s
}
