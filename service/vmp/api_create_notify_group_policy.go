// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateNotifyGroupPolicyCommon = "CreateNotifyGroupPolicy"

// CreateNotifyGroupPolicyCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateNotifyGroupPolicyCommon operation. The "output" return
// value will be populated with the CreateNotifyGroupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNotifyGroupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNotifyGroupPolicyCommon Send returns without error.
//
// See CreateNotifyGroupPolicyCommon for more information on using the CreateNotifyGroupPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateNotifyGroupPolicyCommonRequest method.
//    req, resp := client.CreateNotifyGroupPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateNotifyGroupPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateNotifyGroupPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateNotifyGroupPolicyCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation CreateNotifyGroupPolicyCommon for usage and error information.
func (c *VMP) CreateNotifyGroupPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateNotifyGroupPolicyCommonRequest(input)
	return out, req.Send()
}

// CreateNotifyGroupPolicyCommonWithContext is the same as CreateNotifyGroupPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNotifyGroupPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateNotifyGroupPolicyCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateNotifyGroupPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateNotifyGroupPolicy = "CreateNotifyGroupPolicy"

// CreateNotifyGroupPolicyRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateNotifyGroupPolicy operation. The "output" return
// value will be populated with the CreateNotifyGroupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNotifyGroupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNotifyGroupPolicyCommon Send returns without error.
//
// See CreateNotifyGroupPolicy for more information on using the CreateNotifyGroupPolicy
// API call, and error handling.
//
//    // Example sending a request using the CreateNotifyGroupPolicyRequest method.
//    req, resp := client.CreateNotifyGroupPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateNotifyGroupPolicyRequest(input *CreateNotifyGroupPolicyInput) (req *request.Request, output *CreateNotifyGroupPolicyOutput) {
	op := &request.Operation{
		Name:       opCreateNotifyGroupPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateNotifyGroupPolicyInput{}
	}

	output = &CreateNotifyGroupPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateNotifyGroupPolicy API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation CreateNotifyGroupPolicy for usage and error information.
func (c *VMP) CreateNotifyGroupPolicy(input *CreateNotifyGroupPolicyInput) (*CreateNotifyGroupPolicyOutput, error) {
	req, out := c.CreateNotifyGroupPolicyRequest(input)
	return out, req.Send()
}

// CreateNotifyGroupPolicyWithContext is the same as CreateNotifyGroupPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNotifyGroupPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateNotifyGroupPolicyWithContext(ctx byteplus.Context, input *CreateNotifyGroupPolicyInput, opts ...request.Option) (*CreateNotifyGroupPolicyOutput, error) {
	req, out := c.CreateNotifyGroupPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateNotifyGroupPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Levels []*LevelForCreateNotifyGroupPolicyInput `type:"list" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateNotifyGroupPolicyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNotifyGroupPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateNotifyGroupPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateNotifyGroupPolicyInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateNotifyGroupPolicyInput) SetDescription(v string) *CreateNotifyGroupPolicyInput {
	s.Description = &v
	return s
}

// SetLevels sets the Levels field's value.
func (s *CreateNotifyGroupPolicyInput) SetLevels(v []*LevelForCreateNotifyGroupPolicyInput) *CreateNotifyGroupPolicyInput {
	s.Levels = v
	return s
}

// SetName sets the Name field's value.
func (s *CreateNotifyGroupPolicyInput) SetName(v string) *CreateNotifyGroupPolicyInput {
	s.Name = &v
	return s
}

type CreateNotifyGroupPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateNotifyGroupPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNotifyGroupPolicyOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CreateNotifyGroupPolicyOutput) SetId(v string) *CreateNotifyGroupPolicyOutput {
	s.Id = &v
	return s
}

type LevelForCreateNotifyGroupPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	GroupBy []*string `type:"list" json:",omitempty"`

	GroupInterval *string `type:"string" json:",omitempty"`

	GroupWait *string `type:"string" json:",omitempty"`

	Level *string `type:"string" json:",omitempty"`

	RepeatInterval *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s LevelForCreateNotifyGroupPolicyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s LevelForCreateNotifyGroupPolicyInput) GoString() string {
	return s.String()
}

// SetGroupBy sets the GroupBy field's value.
func (s *LevelForCreateNotifyGroupPolicyInput) SetGroupBy(v []*string) *LevelForCreateNotifyGroupPolicyInput {
	s.GroupBy = v
	return s
}

// SetGroupInterval sets the GroupInterval field's value.
func (s *LevelForCreateNotifyGroupPolicyInput) SetGroupInterval(v string) *LevelForCreateNotifyGroupPolicyInput {
	s.GroupInterval = &v
	return s
}

// SetGroupWait sets the GroupWait field's value.
func (s *LevelForCreateNotifyGroupPolicyInput) SetGroupWait(v string) *LevelForCreateNotifyGroupPolicyInput {
	s.GroupWait = &v
	return s
}

// SetLevel sets the Level field's value.
func (s *LevelForCreateNotifyGroupPolicyInput) SetLevel(v string) *LevelForCreateNotifyGroupPolicyInput {
	s.Level = &v
	return s
}

// SetRepeatInterval sets the RepeatInterval field's value.
func (s *LevelForCreateNotifyGroupPolicyInput) SetRepeatInterval(v string) *LevelForCreateNotifyGroupPolicyInput {
	s.RepeatInterval = &v
	return s
}
