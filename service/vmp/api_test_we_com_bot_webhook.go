// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opTestWeComBotWebhookCommon = "TestWeComBotWebhook"

// TestWeComBotWebhookCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the TestWeComBotWebhookCommon operation. The "output" return
// value will be populated with the TestWeComBotWebhookCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TestWeComBotWebhookCommon Request to send the API call to the service.
// the "output" return value is not valid until after TestWeComBotWebhookCommon Send returns without error.
//
// See TestWeComBotWebhookCommon for more information on using the TestWeComBotWebhookCommon
// API call, and error handling.
//
//    // Example sending a request using the TestWeComBotWebhookCommonRequest method.
//    req, resp := client.TestWeComBotWebhookCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) TestWeComBotWebhookCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opTestWeComBotWebhookCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TestWeComBotWebhookCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation TestWeComBotWebhookCommon for usage and error information.
func (c *VMP) TestWeComBotWebhookCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.TestWeComBotWebhookCommonRequest(input)
	return out, req.Send()
}

// TestWeComBotWebhookCommonWithContext is the same as TestWeComBotWebhookCommon with the addition of
// the ability to pass a context and additional request options.
//
// See TestWeComBotWebhookCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) TestWeComBotWebhookCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.TestWeComBotWebhookCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opTestWeComBotWebhook = "TestWeComBotWebhook"

// TestWeComBotWebhookRequest generates a "byteplus/request.Request" representing the
// client's request for the TestWeComBotWebhook operation. The "output" return
// value will be populated with the TestWeComBotWebhookCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TestWeComBotWebhookCommon Request to send the API call to the service.
// the "output" return value is not valid until after TestWeComBotWebhookCommon Send returns without error.
//
// See TestWeComBotWebhook for more information on using the TestWeComBotWebhook
// API call, and error handling.
//
//    // Example sending a request using the TestWeComBotWebhookRequest method.
//    req, resp := client.TestWeComBotWebhookRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) TestWeComBotWebhookRequest(input *TestWeComBotWebhookInput) (req *request.Request, output *TestWeComBotWebhookOutput) {
	op := &request.Operation{
		Name:       opTestWeComBotWebhook,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TestWeComBotWebhookInput{}
	}

	output = &TestWeComBotWebhookOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TestWeComBotWebhook API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation TestWeComBotWebhook for usage and error information.
func (c *VMP) TestWeComBotWebhook(input *TestWeComBotWebhookInput) (*TestWeComBotWebhookOutput, error) {
	req, out := c.TestWeComBotWebhookRequest(input)
	return out, req.Send()
}

// TestWeComBotWebhookWithContext is the same as TestWeComBotWebhook with the addition of
// the ability to pass a context and additional request options.
//
// See TestWeComBotWebhook for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) TestWeComBotWebhookWithContext(ctx byteplus.Context, input *TestWeComBotWebhookInput, opts ...request.Option) (*TestWeComBotWebhookOutput, error) {
	req, out := c.TestWeComBotWebhookRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type TestWeComBotWebhookInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Address is a required field
	Address *string `type:"string" json:",omitempty" required:"true"`

	AtUserIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s TestWeComBotWebhookInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TestWeComBotWebhookInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TestWeComBotWebhookInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "TestWeComBotWebhookInput"}
	if s.Address == nil {
		invalidParams.Add(request.NewErrParamRequired("Address"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAddress sets the Address field's value.
func (s *TestWeComBotWebhookInput) SetAddress(v string) *TestWeComBotWebhookInput {
	s.Address = &v
	return s
}

// SetAtUserIds sets the AtUserIds field's value.
func (s *TestWeComBotWebhookInput) SetAtUserIds(v []*string) *TestWeComBotWebhookInput {
	s.AtUserIds = v
	return s
}

type TestWeComBotWebhookOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ErrorMessage *string `type:"string" json:",omitempty"`

	StatusCode *int32 `type:"int32" json:",omitempty"`

	WeComCode *int32 `type:"int32" json:",omitempty"`

	WeComMessage *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TestWeComBotWebhookOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TestWeComBotWebhookOutput) GoString() string {
	return s.String()
}

// SetErrorMessage sets the ErrorMessage field's value.
func (s *TestWeComBotWebhookOutput) SetErrorMessage(v string) *TestWeComBotWebhookOutput {
	s.ErrorMessage = &v
	return s
}

// SetStatusCode sets the StatusCode field's value.
func (s *TestWeComBotWebhookOutput) SetStatusCode(v int32) *TestWeComBotWebhookOutput {
	s.StatusCode = &v
	return s
}

// SetWeComCode sets the WeComCode field's value.
func (s *TestWeComBotWebhookOutput) SetWeComCode(v int32) *TestWeComBotWebhookOutput {
	s.WeComCode = &v
	return s
}

// SetWeComMessage sets the WeComMessage field's value.
func (s *TestWeComBotWebhookOutput) SetWeComMessage(v string) *TestWeComBotWebhookOutput {
	s.WeComMessage = &v
	return s
}
