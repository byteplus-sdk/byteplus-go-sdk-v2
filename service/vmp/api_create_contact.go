// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateContactCommon = "CreateContact"

// CreateContactCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateContactCommon operation. The "output" return
// value will be populated with the CreateContactCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateContactCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateContactCommon Send returns without error.
//
// See CreateContactCommon for more information on using the CreateContactCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateContactCommonRequest method.
//    req, resp := client.CreateContactCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateContactCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateContactCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateContactCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation CreateContactCommon for usage and error information.
func (c *VMP) CreateContactCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateContactCommonRequest(input)
	return out, req.Send()
}

// CreateContactCommonWithContext is the same as CreateContactCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateContactCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateContactCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateContactCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateContact = "CreateContact"

// CreateContactRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateContact operation. The "output" return
// value will be populated with the CreateContactCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateContactCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateContactCommon Send returns without error.
//
// See CreateContact for more information on using the CreateContact
// API call, and error handling.
//
//    // Example sending a request using the CreateContactRequest method.
//    req, resp := client.CreateContactRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateContactRequest(input *CreateContactInput) (req *request.Request, output *CreateContactOutput) {
	op := &request.Operation{
		Name:       opCreateContact,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateContactInput{}
	}

	output = &CreateContactOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateContact API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation CreateContact for usage and error information.
func (c *VMP) CreateContact(input *CreateContactInput) (*CreateContactOutput, error) {
	req, out := c.CreateContactRequest(input)
	return out, req.Send()
}

// CreateContactWithContext is the same as CreateContact with the addition of
// the ability to pass a context and additional request options.
//
// See CreateContact for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateContactWithContext(ctx byteplus.Context, input *CreateContactInput, opts ...request.Option) (*CreateContactOutput, error) {
	req, out := c.CreateContactRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateContactInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ContactGroupIds []*string `type:"list" json:",omitempty"`

	DingTalkBotWebhook *DingTalkBotWebhookForCreateContactInput `type:"structure" json:",omitempty"`

	Email *string `type:"string" json:",omitempty"`

	LarkBotWebhook *LarkBotWebhookForCreateContactInput `type:"structure" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	WeComBotWebhook *WeComBotWebhookForCreateContactInput `type:"structure" json:",omitempty"`

	Webhook *WebhookForCreateContactInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s CreateContactInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateContactInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateContactInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateContactInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetContactGroupIds sets the ContactGroupIds field's value.
func (s *CreateContactInput) SetContactGroupIds(v []*string) *CreateContactInput {
	s.ContactGroupIds = v
	return s
}

// SetDingTalkBotWebhook sets the DingTalkBotWebhook field's value.
func (s *CreateContactInput) SetDingTalkBotWebhook(v *DingTalkBotWebhookForCreateContactInput) *CreateContactInput {
	s.DingTalkBotWebhook = v
	return s
}

// SetEmail sets the Email field's value.
func (s *CreateContactInput) SetEmail(v string) *CreateContactInput {
	s.Email = &v
	return s
}

// SetLarkBotWebhook sets the LarkBotWebhook field's value.
func (s *CreateContactInput) SetLarkBotWebhook(v *LarkBotWebhookForCreateContactInput) *CreateContactInput {
	s.LarkBotWebhook = v
	return s
}

// SetName sets the Name field's value.
func (s *CreateContactInput) SetName(v string) *CreateContactInput {
	s.Name = &v
	return s
}

// SetWeComBotWebhook sets the WeComBotWebhook field's value.
func (s *CreateContactInput) SetWeComBotWebhook(v *WeComBotWebhookForCreateContactInput) *CreateContactInput {
	s.WeComBotWebhook = v
	return s
}

// SetWebhook sets the Webhook field's value.
func (s *CreateContactInput) SetWebhook(v *WebhookForCreateContactInput) *CreateContactInput {
	s.Webhook = v
	return s
}

type CreateContactOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`

	SendStatus *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateContactOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateContactOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CreateContactOutput) SetId(v string) *CreateContactOutput {
	s.Id = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *CreateContactOutput) SetMessage(v string) *CreateContactOutput {
	s.Message = &v
	return s
}

// SetSendStatus sets the SendStatus field's value.
func (s *CreateContactOutput) SetSendStatus(v string) *CreateContactOutput {
	s.SendStatus = &v
	return s
}

type DingTalkBotWebhookForCreateContactInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Address *string `type:"string" json:",omitempty"`

	AtMobiles []*string `type:"list" json:",omitempty"`

	AtUserIds []*string `type:"list" json:",omitempty"`

	SecretKey *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DingTalkBotWebhookForCreateContactInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DingTalkBotWebhookForCreateContactInput) GoString() string {
	return s.String()
}

// SetAddress sets the Address field's value.
func (s *DingTalkBotWebhookForCreateContactInput) SetAddress(v string) *DingTalkBotWebhookForCreateContactInput {
	s.Address = &v
	return s
}

// SetAtMobiles sets the AtMobiles field's value.
func (s *DingTalkBotWebhookForCreateContactInput) SetAtMobiles(v []*string) *DingTalkBotWebhookForCreateContactInput {
	s.AtMobiles = v
	return s
}

// SetAtUserIds sets the AtUserIds field's value.
func (s *DingTalkBotWebhookForCreateContactInput) SetAtUserIds(v []*string) *DingTalkBotWebhookForCreateContactInput {
	s.AtUserIds = v
	return s
}

// SetSecretKey sets the SecretKey field's value.
func (s *DingTalkBotWebhookForCreateContactInput) SetSecretKey(v string) *DingTalkBotWebhookForCreateContactInput {
	s.SecretKey = &v
	return s
}

type LarkBotWebhookForCreateContactInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Address *string `type:"string" json:",omitempty"`

	SecretKey *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s LarkBotWebhookForCreateContactInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s LarkBotWebhookForCreateContactInput) GoString() string {
	return s.String()
}

// SetAddress sets the Address field's value.
func (s *LarkBotWebhookForCreateContactInput) SetAddress(v string) *LarkBotWebhookForCreateContactInput {
	s.Address = &v
	return s
}

// SetSecretKey sets the SecretKey field's value.
func (s *LarkBotWebhookForCreateContactInput) SetSecretKey(v string) *LarkBotWebhookForCreateContactInput {
	s.SecretKey = &v
	return s
}

type WeComBotWebhookForCreateContactInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Address *string `type:"string" json:",omitempty"`

	AtUserIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s WeComBotWebhookForCreateContactInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s WeComBotWebhookForCreateContactInput) GoString() string {
	return s.String()
}

// SetAddress sets the Address field's value.
func (s *WeComBotWebhookForCreateContactInput) SetAddress(v string) *WeComBotWebhookForCreateContactInput {
	s.Address = &v
	return s
}

// SetAtUserIds sets the AtUserIds field's value.
func (s *WeComBotWebhookForCreateContactInput) SetAtUserIds(v []*string) *WeComBotWebhookForCreateContactInput {
	s.AtUserIds = v
	return s
}

type WebhookForCreateContactInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Address *string `type:"string" json:",omitempty"`

	Token *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s WebhookForCreateContactInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s WebhookForCreateContactInput) GoString() string {
	return s.String()
}

// SetAddress sets the Address field's value.
func (s *WebhookForCreateContactInput) SetAddress(v string) *WebhookForCreateContactInput {
	s.Address = &v
	return s
}

// SetToken sets the Token field's value.
func (s *WebhookForCreateContactInput) SetToken(v string) *WebhookForCreateContactInput {
	s.Token = &v
	return s
}
