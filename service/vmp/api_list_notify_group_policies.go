// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opListNotifyGroupPoliciesCommon = "ListNotifyGroupPolicies"

// ListNotifyGroupPoliciesCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ListNotifyGroupPoliciesCommon operation. The "output" return
// value will be populated with the ListNotifyGroupPoliciesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListNotifyGroupPoliciesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListNotifyGroupPoliciesCommon Send returns without error.
//
// See ListNotifyGroupPoliciesCommon for more information on using the ListNotifyGroupPoliciesCommon
// API call, and error handling.
//
//    // Example sending a request using the ListNotifyGroupPoliciesCommonRequest method.
//    req, resp := client.ListNotifyGroupPoliciesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) ListNotifyGroupPoliciesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListNotifyGroupPoliciesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListNotifyGroupPoliciesCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation ListNotifyGroupPoliciesCommon for usage and error information.
func (c *VMP) ListNotifyGroupPoliciesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListNotifyGroupPoliciesCommonRequest(input)
	return out, req.Send()
}

// ListNotifyGroupPoliciesCommonWithContext is the same as ListNotifyGroupPoliciesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListNotifyGroupPoliciesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) ListNotifyGroupPoliciesCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListNotifyGroupPoliciesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListNotifyGroupPolicies = "ListNotifyGroupPolicies"

// ListNotifyGroupPoliciesRequest generates a "byteplus/request.Request" representing the
// client's request for the ListNotifyGroupPolicies operation. The "output" return
// value will be populated with the ListNotifyGroupPoliciesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListNotifyGroupPoliciesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListNotifyGroupPoliciesCommon Send returns without error.
//
// See ListNotifyGroupPolicies for more information on using the ListNotifyGroupPolicies
// API call, and error handling.
//
//    // Example sending a request using the ListNotifyGroupPoliciesRequest method.
//    req, resp := client.ListNotifyGroupPoliciesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) ListNotifyGroupPoliciesRequest(input *ListNotifyGroupPoliciesInput) (req *request.Request, output *ListNotifyGroupPoliciesOutput) {
	op := &request.Operation{
		Name:       opListNotifyGroupPolicies,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListNotifyGroupPoliciesInput{}
	}

	output = &ListNotifyGroupPoliciesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListNotifyGroupPolicies API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation ListNotifyGroupPolicies for usage and error information.
func (c *VMP) ListNotifyGroupPolicies(input *ListNotifyGroupPoliciesInput) (*ListNotifyGroupPoliciesOutput, error) {
	req, out := c.ListNotifyGroupPoliciesRequest(input)
	return out, req.Send()
}

// ListNotifyGroupPoliciesWithContext is the same as ListNotifyGroupPolicies with the addition of
// the ability to pass a context and additional request options.
//
// See ListNotifyGroupPolicies for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) ListNotifyGroupPoliciesWithContext(ctx byteplus.Context, input *ListNotifyGroupPoliciesInput, opts ...request.Option) (*ListNotifyGroupPoliciesOutput, error) {
	req, out := c.ListNotifyGroupPoliciesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type FilterForListNotifyGroupPoliciesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Ids []*string `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FilterForListNotifyGroupPoliciesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForListNotifyGroupPoliciesInput) GoString() string {
	return s.String()
}

// SetIds sets the Ids field's value.
func (s *FilterForListNotifyGroupPoliciesInput) SetIds(v []*string) *FilterForListNotifyGroupPoliciesInput {
	s.Ids = v
	return s
}

// SetName sets the Name field's value.
func (s *FilterForListNotifyGroupPoliciesInput) SetName(v string) *FilterForListNotifyGroupPoliciesInput {
	s.Name = &v
	return s
}

type ItemForListNotifyGroupPoliciesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Levels []*LevelForListNotifyGroupPoliciesOutput `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListNotifyGroupPoliciesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListNotifyGroupPoliciesOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *ItemForListNotifyGroupPoliciesOutput) SetCreateTime(v string) *ItemForListNotifyGroupPoliciesOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ItemForListNotifyGroupPoliciesOutput) SetDescription(v string) *ItemForListNotifyGroupPoliciesOutput {
	s.Description = &v
	return s
}

// SetId sets the Id field's value.
func (s *ItemForListNotifyGroupPoliciesOutput) SetId(v string) *ItemForListNotifyGroupPoliciesOutput {
	s.Id = &v
	return s
}

// SetLevels sets the Levels field's value.
func (s *ItemForListNotifyGroupPoliciesOutput) SetLevels(v []*LevelForListNotifyGroupPoliciesOutput) *ItemForListNotifyGroupPoliciesOutput {
	s.Levels = v
	return s
}

// SetName sets the Name field's value.
func (s *ItemForListNotifyGroupPoliciesOutput) SetName(v string) *ItemForListNotifyGroupPoliciesOutput {
	s.Name = &v
	return s
}

type LevelForListNotifyGroupPoliciesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	GroupBy []*string `type:"list" json:",omitempty"`

	GroupInterval *string `type:"string" json:",omitempty"`

	GroupWait *string `type:"string" json:",omitempty"`

	Level *string `type:"string" json:",omitempty"`

	RepeatInterval *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s LevelForListNotifyGroupPoliciesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s LevelForListNotifyGroupPoliciesOutput) GoString() string {
	return s.String()
}

// SetGroupBy sets the GroupBy field's value.
func (s *LevelForListNotifyGroupPoliciesOutput) SetGroupBy(v []*string) *LevelForListNotifyGroupPoliciesOutput {
	s.GroupBy = v
	return s
}

// SetGroupInterval sets the GroupInterval field's value.
func (s *LevelForListNotifyGroupPoliciesOutput) SetGroupInterval(v string) *LevelForListNotifyGroupPoliciesOutput {
	s.GroupInterval = &v
	return s
}

// SetGroupWait sets the GroupWait field's value.
func (s *LevelForListNotifyGroupPoliciesOutput) SetGroupWait(v string) *LevelForListNotifyGroupPoliciesOutput {
	s.GroupWait = &v
	return s
}

// SetLevel sets the Level field's value.
func (s *LevelForListNotifyGroupPoliciesOutput) SetLevel(v string) *LevelForListNotifyGroupPoliciesOutput {
	s.Level = &v
	return s
}

// SetRepeatInterval sets the RepeatInterval field's value.
func (s *LevelForListNotifyGroupPoliciesOutput) SetRepeatInterval(v string) *LevelForListNotifyGroupPoliciesOutput {
	s.RepeatInterval = &v
	return s
}

type ListNotifyGroupPoliciesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Filter *FilterForListNotifyGroupPoliciesInput `type:"structure" json:",omitempty"`

	PageNumber *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`

	SortBy *string `type:"string" json:",omitempty"`

	SortOrder *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListNotifyGroupPoliciesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListNotifyGroupPoliciesInput) GoString() string {
	return s.String()
}

// SetFilter sets the Filter field's value.
func (s *ListNotifyGroupPoliciesInput) SetFilter(v *FilterForListNotifyGroupPoliciesInput) *ListNotifyGroupPoliciesInput {
	s.Filter = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListNotifyGroupPoliciesInput) SetPageNumber(v int64) *ListNotifyGroupPoliciesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListNotifyGroupPoliciesInput) SetPageSize(v int64) *ListNotifyGroupPoliciesInput {
	s.PageSize = &v
	return s
}

// SetSortBy sets the SortBy field's value.
func (s *ListNotifyGroupPoliciesInput) SetSortBy(v string) *ListNotifyGroupPoliciesInput {
	s.SortBy = &v
	return s
}

// SetSortOrder sets the SortOrder field's value.
func (s *ListNotifyGroupPoliciesInput) SetSortOrder(v string) *ListNotifyGroupPoliciesInput {
	s.SortOrder = &v
	return s
}

type ListNotifyGroupPoliciesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListNotifyGroupPoliciesOutput `type:"list" json:",omitempty"`

	Total *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ListNotifyGroupPoliciesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListNotifyGroupPoliciesOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListNotifyGroupPoliciesOutput) SetItems(v []*ItemForListNotifyGroupPoliciesOutput) *ListNotifyGroupPoliciesOutput {
	s.Items = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListNotifyGroupPoliciesOutput) SetTotal(v int64) *ListNotifyGroupPoliciesOutput {
	s.Total = &v
	return s
}
