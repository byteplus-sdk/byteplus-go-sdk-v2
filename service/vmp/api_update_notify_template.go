// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUpdateNotifyTemplateCommon = "UpdateNotifyTemplate"

// UpdateNotifyTemplateCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateNotifyTemplateCommon operation. The "output" return
// value will be populated with the UpdateNotifyTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateNotifyTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateNotifyTemplateCommon Send returns without error.
//
// See UpdateNotifyTemplateCommon for more information on using the UpdateNotifyTemplateCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateNotifyTemplateCommonRequest method.
//    req, resp := client.UpdateNotifyTemplateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) UpdateNotifyTemplateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateNotifyTemplateCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateNotifyTemplateCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation UpdateNotifyTemplateCommon for usage and error information.
func (c *VMP) UpdateNotifyTemplateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateNotifyTemplateCommonRequest(input)
	return out, req.Send()
}

// UpdateNotifyTemplateCommonWithContext is the same as UpdateNotifyTemplateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateNotifyTemplateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) UpdateNotifyTemplateCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateNotifyTemplateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateNotifyTemplate = "UpdateNotifyTemplate"

// UpdateNotifyTemplateRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateNotifyTemplate operation. The "output" return
// value will be populated with the UpdateNotifyTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateNotifyTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateNotifyTemplateCommon Send returns without error.
//
// See UpdateNotifyTemplate for more information on using the UpdateNotifyTemplate
// API call, and error handling.
//
//    // Example sending a request using the UpdateNotifyTemplateRequest method.
//    req, resp := client.UpdateNotifyTemplateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) UpdateNotifyTemplateRequest(input *UpdateNotifyTemplateInput) (req *request.Request, output *UpdateNotifyTemplateOutput) {
	op := &request.Operation{
		Name:       opUpdateNotifyTemplate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateNotifyTemplateInput{}
	}

	output = &UpdateNotifyTemplateOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateNotifyTemplate API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation UpdateNotifyTemplate for usage and error information.
func (c *VMP) UpdateNotifyTemplate(input *UpdateNotifyTemplateInput) (*UpdateNotifyTemplateOutput, error) {
	req, out := c.UpdateNotifyTemplateRequest(input)
	return out, req.Send()
}

// UpdateNotifyTemplateWithContext is the same as UpdateNotifyTemplate with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateNotifyTemplate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) UpdateNotifyTemplateWithContext(ctx byteplus.Context, input *UpdateNotifyTemplateInput, opts ...request.Option) (*UpdateNotifyTemplateOutput, error) {
	req, out := c.UpdateNotifyTemplateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ActiveForUpdateNotifyTemplateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Content *string `type:"string" json:",omitempty"`

	Title *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ActiveForUpdateNotifyTemplateInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ActiveForUpdateNotifyTemplateInput) GoString() string {
	return s.String()
}

// SetContent sets the Content field's value.
func (s *ActiveForUpdateNotifyTemplateInput) SetContent(v string) *ActiveForUpdateNotifyTemplateInput {
	s.Content = &v
	return s
}

// SetTitle sets the Title field's value.
func (s *ActiveForUpdateNotifyTemplateInput) SetTitle(v string) *ActiveForUpdateNotifyTemplateInput {
	s.Title = &v
	return s
}

type ResolvedForUpdateNotifyTemplateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Content *string `type:"string" json:",omitempty"`

	Title *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ResolvedForUpdateNotifyTemplateInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ResolvedForUpdateNotifyTemplateInput) GoString() string {
	return s.String()
}

// SetContent sets the Content field's value.
func (s *ResolvedForUpdateNotifyTemplateInput) SetContent(v string) *ResolvedForUpdateNotifyTemplateInput {
	s.Content = &v
	return s
}

// SetTitle sets the Title field's value.
func (s *ResolvedForUpdateNotifyTemplateInput) SetTitle(v string) *ResolvedForUpdateNotifyTemplateInput {
	s.Title = &v
	return s
}

type UpdateNotifyTemplateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Active *ActiveForUpdateNotifyTemplateInput `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	Name *string `type:"string" json:",omitempty"`

	Resolved *ResolvedForUpdateNotifyTemplateInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s UpdateNotifyTemplateInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateNotifyTemplateInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateNotifyTemplateInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateNotifyTemplateInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetActive sets the Active field's value.
func (s *UpdateNotifyTemplateInput) SetActive(v *ActiveForUpdateNotifyTemplateInput) *UpdateNotifyTemplateInput {
	s.Active = v
	return s
}

// SetDescription sets the Description field's value.
func (s *UpdateNotifyTemplateInput) SetDescription(v string) *UpdateNotifyTemplateInput {
	s.Description = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateNotifyTemplateInput) SetId(v string) *UpdateNotifyTemplateInput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateNotifyTemplateInput) SetName(v string) *UpdateNotifyTemplateInput {
	s.Name = &v
	return s
}

// SetResolved sets the Resolved field's value.
func (s *UpdateNotifyTemplateInput) SetResolved(v *ResolvedForUpdateNotifyTemplateInput) *UpdateNotifyTemplateInput {
	s.Resolved = v
	return s
}

type UpdateNotifyTemplateOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateNotifyTemplateOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateNotifyTemplateOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *UpdateNotifyTemplateOutput) SetId(v string) *UpdateNotifyTemplateOutput {
	s.Id = &v
	return s
}
