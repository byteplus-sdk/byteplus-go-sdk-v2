// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteContactsCommon = "DeleteContacts"

// DeleteContactsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteContactsCommon operation. The "output" return
// value will be populated with the DeleteContactsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteContactsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteContactsCommon Send returns without error.
//
// See DeleteContactsCommon for more information on using the DeleteContactsCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteContactsCommonRequest method.
//    req, resp := client.DeleteContactsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) DeleteContactsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteContactsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteContactsCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation DeleteContactsCommon for usage and error information.
func (c *VMP) DeleteContactsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteContactsCommonRequest(input)
	return out, req.Send()
}

// DeleteContactsCommonWithContext is the same as DeleteContactsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteContactsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) DeleteContactsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteContactsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteContacts = "DeleteContacts"

// DeleteContactsRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteContacts operation. The "output" return
// value will be populated with the DeleteContactsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteContactsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteContactsCommon Send returns without error.
//
// See DeleteContacts for more information on using the DeleteContacts
// API call, and error handling.
//
//    // Example sending a request using the DeleteContactsRequest method.
//    req, resp := client.DeleteContactsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) DeleteContactsRequest(input *DeleteContactsInput) (req *request.Request, output *DeleteContactsOutput) {
	op := &request.Operation{
		Name:       opDeleteContacts,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteContactsInput{}
	}

	output = &DeleteContactsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteContacts API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation DeleteContacts for usage and error information.
func (c *VMP) DeleteContacts(input *DeleteContactsInput) (*DeleteContactsOutput, error) {
	req, out := c.DeleteContactsRequest(input)
	return out, req.Send()
}

// DeleteContactsWithContext is the same as DeleteContacts with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteContacts for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) DeleteContactsWithContext(ctx byteplus.Context, input *DeleteContactsInput, opts ...request.Option) (*DeleteContactsOutput, error) {
	req, out := c.DeleteContactsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataForDeleteContactsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s DataForDeleteContactsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForDeleteContactsOutput) GoString() string {
	return s.String()
}

type DeleteContactsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Ids []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DeleteContactsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteContactsInput) GoString() string {
	return s.String()
}

// SetIds sets the Ids field's value.
func (s *DeleteContactsInput) SetIds(v []*string) *DeleteContactsInput {
	s.Ids = v
	return s
}

type DeleteContactsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	SuccessfulItems []*string `type:"list" json:",omitempty"`

	UnsuccessfulItems []*UnsuccessfulItemForDeleteContactsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DeleteContactsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteContactsOutput) GoString() string {
	return s.String()
}

// SetSuccessfulItems sets the SuccessfulItems field's value.
func (s *DeleteContactsOutput) SetSuccessfulItems(v []*string) *DeleteContactsOutput {
	s.SuccessfulItems = v
	return s
}

// SetUnsuccessfulItems sets the UnsuccessfulItems field's value.
func (s *DeleteContactsOutput) SetUnsuccessfulItems(v []*UnsuccessfulItemForDeleteContactsOutput) *DeleteContactsOutput {
	s.UnsuccessfulItems = v
	return s
}

type ErrorForDeleteContactsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Code *string `type:"string" json:",omitempty"`

	Data *DataForDeleteContactsOutput `type:"structure" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ErrorForDeleteContactsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ErrorForDeleteContactsOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *ErrorForDeleteContactsOutput) SetCode(v string) *ErrorForDeleteContactsOutput {
	s.Code = &v
	return s
}

// SetData sets the Data field's value.
func (s *ErrorForDeleteContactsOutput) SetData(v *DataForDeleteContactsOutput) *ErrorForDeleteContactsOutput {
	s.Data = v
	return s
}

// SetMessage sets the Message field's value.
func (s *ErrorForDeleteContactsOutput) SetMessage(v string) *ErrorForDeleteContactsOutput {
	s.Message = &v
	return s
}

type UnsuccessfulItemForDeleteContactsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Error *ErrorForDeleteContactsOutput `type:"structure" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UnsuccessfulItemForDeleteContactsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UnsuccessfulItemForDeleteContactsOutput) GoString() string {
	return s.String()
}

// SetError sets the Error field's value.
func (s *UnsuccessfulItemForDeleteContactsOutput) SetError(v *ErrorForDeleteContactsOutput) *UnsuccessfulItemForDeleteContactsOutput {
	s.Error = v
	return s
}

// SetId sets the Id field's value.
func (s *UnsuccessfulItemForDeleteContactsOutput) SetId(v string) *UnsuccessfulItemForDeleteContactsOutput {
	s.Id = &v
	return s
}
