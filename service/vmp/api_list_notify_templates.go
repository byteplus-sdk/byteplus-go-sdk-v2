// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opListNotifyTemplatesCommon = "ListNotifyTemplates"

// ListNotifyTemplatesCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ListNotifyTemplatesCommon operation. The "output" return
// value will be populated with the ListNotifyTemplatesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListNotifyTemplatesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListNotifyTemplatesCommon Send returns without error.
//
// See ListNotifyTemplatesCommon for more information on using the ListNotifyTemplatesCommon
// API call, and error handling.
//
//    // Example sending a request using the ListNotifyTemplatesCommonRequest method.
//    req, resp := client.ListNotifyTemplatesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) ListNotifyTemplatesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListNotifyTemplatesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListNotifyTemplatesCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation ListNotifyTemplatesCommon for usage and error information.
func (c *VMP) ListNotifyTemplatesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListNotifyTemplatesCommonRequest(input)
	return out, req.Send()
}

// ListNotifyTemplatesCommonWithContext is the same as ListNotifyTemplatesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListNotifyTemplatesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) ListNotifyTemplatesCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListNotifyTemplatesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListNotifyTemplates = "ListNotifyTemplates"

// ListNotifyTemplatesRequest generates a "byteplus/request.Request" representing the
// client's request for the ListNotifyTemplates operation. The "output" return
// value will be populated with the ListNotifyTemplatesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListNotifyTemplatesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListNotifyTemplatesCommon Send returns without error.
//
// See ListNotifyTemplates for more information on using the ListNotifyTemplates
// API call, and error handling.
//
//    // Example sending a request using the ListNotifyTemplatesRequest method.
//    req, resp := client.ListNotifyTemplatesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) ListNotifyTemplatesRequest(input *ListNotifyTemplatesInput) (req *request.Request, output *ListNotifyTemplatesOutput) {
	op := &request.Operation{
		Name:       opListNotifyTemplates,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListNotifyTemplatesInput{}
	}

	output = &ListNotifyTemplatesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListNotifyTemplates API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation ListNotifyTemplates for usage and error information.
func (c *VMP) ListNotifyTemplates(input *ListNotifyTemplatesInput) (*ListNotifyTemplatesOutput, error) {
	req, out := c.ListNotifyTemplatesRequest(input)
	return out, req.Send()
}

// ListNotifyTemplatesWithContext is the same as ListNotifyTemplates with the addition of
// the ability to pass a context and additional request options.
//
// See ListNotifyTemplates for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) ListNotifyTemplatesWithContext(ctx byteplus.Context, input *ListNotifyTemplatesInput, opts ...request.Option) (*ListNotifyTemplatesOutput, error) {
	req, out := c.ListNotifyTemplatesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ActiveForListNotifyTemplatesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Content *string `type:"string" json:",omitempty"`

	Title *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ActiveForListNotifyTemplatesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ActiveForListNotifyTemplatesOutput) GoString() string {
	return s.String()
}

// SetContent sets the Content field's value.
func (s *ActiveForListNotifyTemplatesOutput) SetContent(v string) *ActiveForListNotifyTemplatesOutput {
	s.Content = &v
	return s
}

// SetTitle sets the Title field's value.
func (s *ActiveForListNotifyTemplatesOutput) SetTitle(v string) *ActiveForListNotifyTemplatesOutput {
	s.Title = &v
	return s
}

type FilterForListNotifyTemplatesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Channel *string `type:"string" json:",omitempty"`

	Ids []*string `type:"list" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FilterForListNotifyTemplatesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForListNotifyTemplatesInput) GoString() string {
	return s.String()
}

// SetChannel sets the Channel field's value.
func (s *FilterForListNotifyTemplatesInput) SetChannel(v string) *FilterForListNotifyTemplatesInput {
	s.Channel = &v
	return s
}

// SetIds sets the Ids field's value.
func (s *FilterForListNotifyTemplatesInput) SetIds(v []*string) *FilterForListNotifyTemplatesInput {
	s.Ids = v
	return s
}

// SetName sets the Name field's value.
func (s *FilterForListNotifyTemplatesInput) SetName(v string) *FilterForListNotifyTemplatesInput {
	s.Name = &v
	return s
}

type ItemForListNotifyTemplatesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Active *ActiveForListNotifyTemplatesOutput `type:"structure" json:",omitempty"`

	Channel *string `type:"string" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Resolved *ResolvedForListNotifyTemplatesOutput `type:"structure" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListNotifyTemplatesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListNotifyTemplatesOutput) GoString() string {
	return s.String()
}

// SetActive sets the Active field's value.
func (s *ItemForListNotifyTemplatesOutput) SetActive(v *ActiveForListNotifyTemplatesOutput) *ItemForListNotifyTemplatesOutput {
	s.Active = v
	return s
}

// SetChannel sets the Channel field's value.
func (s *ItemForListNotifyTemplatesOutput) SetChannel(v string) *ItemForListNotifyTemplatesOutput {
	s.Channel = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *ItemForListNotifyTemplatesOutput) SetCreateTime(v string) *ItemForListNotifyTemplatesOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ItemForListNotifyTemplatesOutput) SetDescription(v string) *ItemForListNotifyTemplatesOutput {
	s.Description = &v
	return s
}

// SetId sets the Id field's value.
func (s *ItemForListNotifyTemplatesOutput) SetId(v string) *ItemForListNotifyTemplatesOutput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *ItemForListNotifyTemplatesOutput) SetName(v string) *ItemForListNotifyTemplatesOutput {
	s.Name = &v
	return s
}

// SetResolved sets the Resolved field's value.
func (s *ItemForListNotifyTemplatesOutput) SetResolved(v *ResolvedForListNotifyTemplatesOutput) *ItemForListNotifyTemplatesOutput {
	s.Resolved = v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *ItemForListNotifyTemplatesOutput) SetUpdateTime(v string) *ItemForListNotifyTemplatesOutput {
	s.UpdateTime = &v
	return s
}

type ListNotifyTemplatesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Filter *FilterForListNotifyTemplatesInput `type:"structure" json:",omitempty"`

	PageNumber *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`

	SortBy *string `type:"string" json:",omitempty"`

	SortOrder *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListNotifyTemplatesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListNotifyTemplatesInput) GoString() string {
	return s.String()
}

// SetFilter sets the Filter field's value.
func (s *ListNotifyTemplatesInput) SetFilter(v *FilterForListNotifyTemplatesInput) *ListNotifyTemplatesInput {
	s.Filter = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListNotifyTemplatesInput) SetPageNumber(v int64) *ListNotifyTemplatesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListNotifyTemplatesInput) SetPageSize(v int64) *ListNotifyTemplatesInput {
	s.PageSize = &v
	return s
}

// SetSortBy sets the SortBy field's value.
func (s *ListNotifyTemplatesInput) SetSortBy(v string) *ListNotifyTemplatesInput {
	s.SortBy = &v
	return s
}

// SetSortOrder sets the SortOrder field's value.
func (s *ListNotifyTemplatesInput) SetSortOrder(v string) *ListNotifyTemplatesInput {
	s.SortOrder = &v
	return s
}

type ListNotifyTemplatesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListNotifyTemplatesOutput `type:"list" json:",omitempty"`

	Total *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ListNotifyTemplatesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListNotifyTemplatesOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListNotifyTemplatesOutput) SetItems(v []*ItemForListNotifyTemplatesOutput) *ListNotifyTemplatesOutput {
	s.Items = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListNotifyTemplatesOutput) SetTotal(v int64) *ListNotifyTemplatesOutput {
	s.Total = &v
	return s
}

type ResolvedForListNotifyTemplatesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Content *string `type:"string" json:",omitempty"`

	Title *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ResolvedForListNotifyTemplatesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ResolvedForListNotifyTemplatesOutput) GoString() string {
	return s.String()
}

// SetContent sets the Content field's value.
func (s *ResolvedForListNotifyTemplatesOutput) SetContent(v string) *ResolvedForListNotifyTemplatesOutput {
	s.Content = &v
	return s
}

// SetTitle sets the Title field's value.
func (s *ResolvedForListNotifyTemplatesOutput) SetTitle(v string) *ResolvedForListNotifyTemplatesOutput {
	s.Title = &v
	return s
}
