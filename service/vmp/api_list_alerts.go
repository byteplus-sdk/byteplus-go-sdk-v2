// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opListAlertsCommon = "ListAlerts"

// ListAlertsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ListAlertsCommon operation. The "output" return
// value will be populated with the ListAlertsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAlertsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAlertsCommon Send returns without error.
//
// See ListAlertsCommon for more information on using the ListAlertsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListAlertsCommonRequest method.
//    req, resp := client.ListAlertsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) ListAlertsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListAlertsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListAlertsCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation ListAlertsCommon for usage and error information.
func (c *VMP) ListAlertsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListAlertsCommonRequest(input)
	return out, req.Send()
}

// ListAlertsCommonWithContext is the same as ListAlertsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListAlertsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) ListAlertsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListAlertsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListAlerts = "ListAlerts"

// ListAlertsRequest generates a "byteplus/request.Request" representing the
// client's request for the ListAlerts operation. The "output" return
// value will be populated with the ListAlertsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAlertsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAlertsCommon Send returns without error.
//
// See ListAlerts for more information on using the ListAlerts
// API call, and error handling.
//
//    // Example sending a request using the ListAlertsRequest method.
//    req, resp := client.ListAlertsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) ListAlertsRequest(input *ListAlertsInput) (req *request.Request, output *ListAlertsOutput) {
	op := &request.Operation{
		Name:       opListAlerts,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListAlertsInput{}
	}

	output = &ListAlertsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListAlerts API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation ListAlerts for usage and error information.
func (c *VMP) ListAlerts(input *ListAlertsInput) (*ListAlertsOutput, error) {
	req, out := c.ListAlertsRequest(input)
	return out, req.Send()
}

// ListAlertsWithContext is the same as ListAlerts with the addition of
// the ability to pass a context and additional request options.
//
// See ListAlerts for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) ListAlertsWithContext(ctx byteplus.Context, input *ListAlertsInput, opts ...request.Option) (*ListAlertsOutput, error) {
	req, out := c.ListAlertsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AlertingRuleQueryForListAlertsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	PromQL *string `type:"string" json:",omitempty"`

	WorkspaceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AlertingRuleQueryForListAlertsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s AlertingRuleQueryForListAlertsOutput) GoString() string {
	return s.String()
}

// SetPromQL sets the PromQL field's value.
func (s *AlertingRuleQueryForListAlertsOutput) SetPromQL(v string) *AlertingRuleQueryForListAlertsOutput {
	s.PromQL = &v
	return s
}

// SetWorkspaceId sets the WorkspaceId field's value.
func (s *AlertingRuleQueryForListAlertsOutput) SetWorkspaceId(v string) *AlertingRuleQueryForListAlertsOutput {
	s.WorkspaceId = &v
	return s
}

type FilterForListAlertsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlertingRuleIds []*string `type:"list" json:",omitempty"`

	CurrentPhase *string `type:"string" json:",omitempty"`

	Ids []*string `type:"list" json:",omitempty"`

	InitialAlertTimestampEnd *string `type:"string" json:",omitempty"`

	InitialAlertTimestampStart *string `type:"string" json:",omitempty"`

	LastAlertTimestampEnd *string `type:"string" json:",omitempty"`

	LastAlertTimestampStart *string `type:"string" json:",omitempty"`

	Level *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FilterForListAlertsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForListAlertsInput) GoString() string {
	return s.String()
}

// SetAlertingRuleIds sets the AlertingRuleIds field's value.
func (s *FilterForListAlertsInput) SetAlertingRuleIds(v []*string) *FilterForListAlertsInput {
	s.AlertingRuleIds = v
	return s
}

// SetCurrentPhase sets the CurrentPhase field's value.
func (s *FilterForListAlertsInput) SetCurrentPhase(v string) *FilterForListAlertsInput {
	s.CurrentPhase = &v
	return s
}

// SetIds sets the Ids field's value.
func (s *FilterForListAlertsInput) SetIds(v []*string) *FilterForListAlertsInput {
	s.Ids = v
	return s
}

// SetInitialAlertTimestampEnd sets the InitialAlertTimestampEnd field's value.
func (s *FilterForListAlertsInput) SetInitialAlertTimestampEnd(v string) *FilterForListAlertsInput {
	s.InitialAlertTimestampEnd = &v
	return s
}

// SetInitialAlertTimestampStart sets the InitialAlertTimestampStart field's value.
func (s *FilterForListAlertsInput) SetInitialAlertTimestampStart(v string) *FilterForListAlertsInput {
	s.InitialAlertTimestampStart = &v
	return s
}

// SetLastAlertTimestampEnd sets the LastAlertTimestampEnd field's value.
func (s *FilterForListAlertsInput) SetLastAlertTimestampEnd(v string) *FilterForListAlertsInput {
	s.LastAlertTimestampEnd = &v
	return s
}

// SetLastAlertTimestampStart sets the LastAlertTimestampStart field's value.
func (s *FilterForListAlertsInput) SetLastAlertTimestampStart(v string) *FilterForListAlertsInput {
	s.LastAlertTimestampStart = &v
	return s
}

// SetLevel sets the Level field's value.
func (s *FilterForListAlertsInput) SetLevel(v string) *FilterForListAlertsInput {
	s.Level = &v
	return s
}

type ItemForListAlertsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AlertingRuleId *string `type:"string" json:",omitempty"`

	AlertingRuleQuery *AlertingRuleQueryForListAlertsOutput `type:"structure" json:",omitempty"`

	AlertingRuleType *string `type:"string" json:",omitempty"`

	CurrentLevel *string `type:"string" json:",omitempty"`

	CurrentPhase *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	InitialAlertTimestamp *string `type:"string" json:",omitempty"`

	LastAlertTimestamp *string `type:"string" json:",omitempty"`

	Levels []*LevelForListAlertsOutput `type:"list" json:",omitempty"`

	ResolveTimestamp *string `type:"string" json:",omitempty"`

	Resource *ResourceForListAlertsOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListAlertsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListAlertsOutput) GoString() string {
	return s.String()
}

// SetAlertingRuleId sets the AlertingRuleId field's value.
func (s *ItemForListAlertsOutput) SetAlertingRuleId(v string) *ItemForListAlertsOutput {
	s.AlertingRuleId = &v
	return s
}

// SetAlertingRuleQuery sets the AlertingRuleQuery field's value.
func (s *ItemForListAlertsOutput) SetAlertingRuleQuery(v *AlertingRuleQueryForListAlertsOutput) *ItemForListAlertsOutput {
	s.AlertingRuleQuery = v
	return s
}

// SetAlertingRuleType sets the AlertingRuleType field's value.
func (s *ItemForListAlertsOutput) SetAlertingRuleType(v string) *ItemForListAlertsOutput {
	s.AlertingRuleType = &v
	return s
}

// SetCurrentLevel sets the CurrentLevel field's value.
func (s *ItemForListAlertsOutput) SetCurrentLevel(v string) *ItemForListAlertsOutput {
	s.CurrentLevel = &v
	return s
}

// SetCurrentPhase sets the CurrentPhase field's value.
func (s *ItemForListAlertsOutput) SetCurrentPhase(v string) *ItemForListAlertsOutput {
	s.CurrentPhase = &v
	return s
}

// SetId sets the Id field's value.
func (s *ItemForListAlertsOutput) SetId(v string) *ItemForListAlertsOutput {
	s.Id = &v
	return s
}

// SetInitialAlertTimestamp sets the InitialAlertTimestamp field's value.
func (s *ItemForListAlertsOutput) SetInitialAlertTimestamp(v string) *ItemForListAlertsOutput {
	s.InitialAlertTimestamp = &v
	return s
}

// SetLastAlertTimestamp sets the LastAlertTimestamp field's value.
func (s *ItemForListAlertsOutput) SetLastAlertTimestamp(v string) *ItemForListAlertsOutput {
	s.LastAlertTimestamp = &v
	return s
}

// SetLevels sets the Levels field's value.
func (s *ItemForListAlertsOutput) SetLevels(v []*LevelForListAlertsOutput) *ItemForListAlertsOutput {
	s.Levels = v
	return s
}

// SetResolveTimestamp sets the ResolveTimestamp field's value.
func (s *ItemForListAlertsOutput) SetResolveTimestamp(v string) *ItemForListAlertsOutput {
	s.ResolveTimestamp = &v
	return s
}

// SetResource sets the Resource field's value.
func (s *ItemForListAlertsOutput) SetResource(v *ResourceForListAlertsOutput) *ItemForListAlertsOutput {
	s.Resource = v
	return s
}

type LabelForListAlertsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s LabelForListAlertsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s LabelForListAlertsOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *LabelForListAlertsOutput) SetKey(v string) *LabelForListAlertsOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *LabelForListAlertsOutput) SetValue(v string) *LabelForListAlertsOutput {
	s.Value = &v
	return s
}

type LevelForListAlertsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Comparator *string `type:"string" json:",omitempty"`

	For *string `type:"string" json:",omitempty"`

	Level *string `type:"string" json:",omitempty"`

	Threshold *float64 `type:"double" json:",omitempty"`
}

// String returns the string representation
func (s LevelForListAlertsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s LevelForListAlertsOutput) GoString() string {
	return s.String()
}

// SetComparator sets the Comparator field's value.
func (s *LevelForListAlertsOutput) SetComparator(v string) *LevelForListAlertsOutput {
	s.Comparator = &v
	return s
}

// SetFor sets the For field's value.
func (s *LevelForListAlertsOutput) SetFor(v string) *LevelForListAlertsOutput {
	s.For = &v
	return s
}

// SetLevel sets the Level field's value.
func (s *LevelForListAlertsOutput) SetLevel(v string) *LevelForListAlertsOutput {
	s.Level = &v
	return s
}

// SetThreshold sets the Threshold field's value.
func (s *LevelForListAlertsOutput) SetThreshold(v float64) *LevelForListAlertsOutput {
	s.Threshold = &v
	return s
}

type ListAlertsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Desc *bool `type:"boolean" json:",omitempty"`

	Filter *FilterForListAlertsInput `type:"structure" json:",omitempty"`

	Limit *int64 `type:"int64" json:",omitempty"`

	OrderBy *string `type:"string" json:",omitempty"`

	SearchAfter *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ListAlertsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAlertsInput) GoString() string {
	return s.String()
}

// SetDesc sets the Desc field's value.
func (s *ListAlertsInput) SetDesc(v bool) *ListAlertsInput {
	s.Desc = &v
	return s
}

// SetFilter sets the Filter field's value.
func (s *ListAlertsInput) SetFilter(v *FilterForListAlertsInput) *ListAlertsInput {
	s.Filter = v
	return s
}

// SetLimit sets the Limit field's value.
func (s *ListAlertsInput) SetLimit(v int64) *ListAlertsInput {
	s.Limit = &v
	return s
}

// SetOrderBy sets the OrderBy field's value.
func (s *ListAlertsInput) SetOrderBy(v string) *ListAlertsInput {
	s.OrderBy = &v
	return s
}

// SetSearchAfter sets the SearchAfter field's value.
func (s *ListAlertsInput) SetSearchAfter(v string) *ListAlertsInput {
	s.SearchAfter = &v
	return s
}

type ListAlertsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ContinueToken *string `type:"string" json:",omitempty"`

	Items []*ItemForListAlertsOutput `type:"list" json:",omitempty"`

	Total *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ListAlertsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAlertsOutput) GoString() string {
	return s.String()
}

// SetContinueToken sets the ContinueToken field's value.
func (s *ListAlertsOutput) SetContinueToken(v string) *ListAlertsOutput {
	s.ContinueToken = &v
	return s
}

// SetItems sets the Items field's value.
func (s *ListAlertsOutput) SetItems(v []*ItemForListAlertsOutput) *ListAlertsOutput {
	s.Items = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListAlertsOutput) SetTotal(v int64) *ListAlertsOutput {
	s.Total = &v
	return s
}

type ResourceForListAlertsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Labels []*LabelForListAlertsOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ResourceForListAlertsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceForListAlertsOutput) GoString() string {
	return s.String()
}

// SetLabels sets the Labels field's value.
func (s *ResourceForListAlertsOutput) SetLabels(v []*LabelForListAlertsOutput) *ResourceForListAlertsOutput {
	s.Labels = v
	return s
}
