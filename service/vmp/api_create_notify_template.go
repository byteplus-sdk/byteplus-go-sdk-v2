// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vmp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateNotifyTemplateCommon = "CreateNotifyTemplate"

// CreateNotifyTemplateCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateNotifyTemplateCommon operation. The "output" return
// value will be populated with the CreateNotifyTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNotifyTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNotifyTemplateCommon Send returns without error.
//
// See CreateNotifyTemplateCommon for more information on using the CreateNotifyTemplateCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateNotifyTemplateCommonRequest method.
//    req, resp := client.CreateNotifyTemplateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateNotifyTemplateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateNotifyTemplateCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateNotifyTemplateCommon API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation CreateNotifyTemplateCommon for usage and error information.
func (c *VMP) CreateNotifyTemplateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateNotifyTemplateCommonRequest(input)
	return out, req.Send()
}

// CreateNotifyTemplateCommonWithContext is the same as CreateNotifyTemplateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNotifyTemplateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateNotifyTemplateCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateNotifyTemplateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateNotifyTemplate = "CreateNotifyTemplate"

// CreateNotifyTemplateRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateNotifyTemplate operation. The "output" return
// value will be populated with the CreateNotifyTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNotifyTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNotifyTemplateCommon Send returns without error.
//
// See CreateNotifyTemplate for more information on using the CreateNotifyTemplate
// API call, and error handling.
//
//    // Example sending a request using the CreateNotifyTemplateRequest method.
//    req, resp := client.CreateNotifyTemplateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VMP) CreateNotifyTemplateRequest(input *CreateNotifyTemplateInput) (req *request.Request, output *CreateNotifyTemplateOutput) {
	op := &request.Operation{
		Name:       opCreateNotifyTemplate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateNotifyTemplateInput{}
	}

	output = &CreateNotifyTemplateOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateNotifyTemplate API operation for VMP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VMP's
// API operation CreateNotifyTemplate for usage and error information.
func (c *VMP) CreateNotifyTemplate(input *CreateNotifyTemplateInput) (*CreateNotifyTemplateOutput, error) {
	req, out := c.CreateNotifyTemplateRequest(input)
	return out, req.Send()
}

// CreateNotifyTemplateWithContext is the same as CreateNotifyTemplate with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNotifyTemplate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VMP) CreateNotifyTemplateWithContext(ctx byteplus.Context, input *CreateNotifyTemplateInput, opts ...request.Option) (*CreateNotifyTemplateOutput, error) {
	req, out := c.CreateNotifyTemplateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ActiveForCreateNotifyTemplateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Content *string `type:"string" json:",omitempty"`

	Title *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ActiveForCreateNotifyTemplateInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ActiveForCreateNotifyTemplateInput) GoString() string {
	return s.String()
}

// SetContent sets the Content field's value.
func (s *ActiveForCreateNotifyTemplateInput) SetContent(v string) *ActiveForCreateNotifyTemplateInput {
	s.Content = &v
	return s
}

// SetTitle sets the Title field's value.
func (s *ActiveForCreateNotifyTemplateInput) SetTitle(v string) *ActiveForCreateNotifyTemplateInput {
	s.Title = &v
	return s
}

type CreateNotifyTemplateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Active *ActiveForCreateNotifyTemplateInput `type:"structure" json:",omitempty"`

	// Channel is a required field
	Channel *string `type:"string" json:",omitempty" required:"true"`

	Description *string `type:"string" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	Resolved *ResolvedForCreateNotifyTemplateInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s CreateNotifyTemplateInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNotifyTemplateInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateNotifyTemplateInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateNotifyTemplateInput"}
	if s.Channel == nil {
		invalidParams.Add(request.NewErrParamRequired("Channel"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetActive sets the Active field's value.
func (s *CreateNotifyTemplateInput) SetActive(v *ActiveForCreateNotifyTemplateInput) *CreateNotifyTemplateInput {
	s.Active = v
	return s
}

// SetChannel sets the Channel field's value.
func (s *CreateNotifyTemplateInput) SetChannel(v string) *CreateNotifyTemplateInput {
	s.Channel = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateNotifyTemplateInput) SetDescription(v string) *CreateNotifyTemplateInput {
	s.Description = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateNotifyTemplateInput) SetName(v string) *CreateNotifyTemplateInput {
	s.Name = &v
	return s
}

// SetResolved sets the Resolved field's value.
func (s *CreateNotifyTemplateInput) SetResolved(v *ResolvedForCreateNotifyTemplateInput) *CreateNotifyTemplateInput {
	s.Resolved = v
	return s
}

type CreateNotifyTemplateOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateNotifyTemplateOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNotifyTemplateOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CreateNotifyTemplateOutput) SetId(v string) *CreateNotifyTemplateOutput {
	s.Id = &v
	return s
}

type ResolvedForCreateNotifyTemplateInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Content *string `type:"string" json:",omitempty"`

	Title *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ResolvedForCreateNotifyTemplateInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ResolvedForCreateNotifyTemplateInput) GoString() string {
	return s.String()
}

// SetContent sets the Content field's value.
func (s *ResolvedForCreateNotifyTemplateInput) SetContent(v string) *ResolvedForCreateNotifyTemplateInput {
	s.Content = &v
	return s
}

// SetTitle sets the Title field's value.
func (s *ResolvedForCreateNotifyTemplateInput) SetTitle(v string) *ResolvedForCreateNotifyTemplateInput {
	s.Title = &v
	return s
}
