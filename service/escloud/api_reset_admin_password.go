// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package escloud

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opResetAdminPasswordCommon = "ResetAdminPassword"

// ResetAdminPasswordCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ResetAdminPasswordCommon operation. The "output" return
// value will be populated with the ResetAdminPasswordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetAdminPasswordCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetAdminPasswordCommon Send returns without error.
//
// See ResetAdminPasswordCommon for more information on using the ResetAdminPasswordCommon
// API call, and error handling.
//
//    // Example sending a request using the ResetAdminPasswordCommonRequest method.
//    req, resp := client.ResetAdminPasswordCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ESCLOUD) ResetAdminPasswordCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResetAdminPasswordCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ResetAdminPasswordCommon API operation for ESCLOUD.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ESCLOUD's
// API operation ResetAdminPasswordCommon for usage and error information.
func (c *ESCLOUD) ResetAdminPasswordCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResetAdminPasswordCommonRequest(input)
	return out, req.Send()
}

// ResetAdminPasswordCommonWithContext is the same as ResetAdminPasswordCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResetAdminPasswordCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ESCLOUD) ResetAdminPasswordCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResetAdminPasswordCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetAdminPassword = "ResetAdminPassword"

// ResetAdminPasswordRequest generates a "byteplus/request.Request" representing the
// client's request for the ResetAdminPassword operation. The "output" return
// value will be populated with the ResetAdminPasswordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetAdminPasswordCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetAdminPasswordCommon Send returns without error.
//
// See ResetAdminPassword for more information on using the ResetAdminPassword
// API call, and error handling.
//
//    // Example sending a request using the ResetAdminPasswordRequest method.
//    req, resp := client.ResetAdminPasswordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ESCLOUD) ResetAdminPasswordRequest(input *ResetAdminPasswordInput) (req *request.Request, output *ResetAdminPasswordOutput) {
	op := &request.Operation{
		Name:       opResetAdminPassword,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResetAdminPasswordInput{}
	}

	output = &ResetAdminPasswordOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ResetAdminPassword API operation for ESCLOUD.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ESCLOUD's
// API operation ResetAdminPassword for usage and error information.
func (c *ESCLOUD) ResetAdminPassword(input *ResetAdminPasswordInput) (*ResetAdminPasswordOutput, error) {
	req, out := c.ResetAdminPasswordRequest(input)
	return out, req.Send()
}

// ResetAdminPasswordWithContext is the same as ResetAdminPassword with the addition of
// the ability to pass a context and additional request options.
//
// See ResetAdminPassword for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ESCLOUD) ResetAdminPasswordWithContext(ctx byteplus.Context, input *ResetAdminPasswordInput, opts ...request.Option) (*ResetAdminPasswordOutput, error) {
	req, out := c.ResetAdminPasswordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ResetAdminPasswordInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// NewPassword is a required field
	NewPassword *string `type:"string" json:",omitempty" required:"true"`

	UserName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ResetAdminPasswordInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetAdminPasswordInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ResetAdminPasswordInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ResetAdminPasswordInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.NewPassword == nil {
		invalidParams.Add(request.NewErrParamRequired("NewPassword"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResetAdminPasswordInput) SetInstanceId(v string) *ResetAdminPasswordInput {
	s.InstanceId = &v
	return s
}

// SetNewPassword sets the NewPassword field's value.
func (s *ResetAdminPasswordInput) SetNewPassword(v string) *ResetAdminPasswordInput {
	s.NewPassword = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *ResetAdminPasswordInput) SetUserName(v string) *ResetAdminPasswordInput {
	s.UserName = &v
	return s
}

type ResetAdminPasswordOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ResetAdminPasswordOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetAdminPasswordOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *ResetAdminPasswordOutput) SetMessage(v string) *ResetAdminPasswordOutput {
	s.Message = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ResetAdminPasswordOutput) SetStatus(v string) *ResetAdminPasswordOutput {
	s.Status = &v
	return s
}
