// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package escloud

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeInstanceNodesCommon = "DescribeInstanceNodes"

// DescribeInstanceNodesCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeInstanceNodesCommon operation. The "output" return
// value will be populated with the DescribeInstanceNodesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceNodesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceNodesCommon Send returns without error.
//
// See DescribeInstanceNodesCommon for more information on using the DescribeInstanceNodesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceNodesCommonRequest method.
//    req, resp := client.DescribeInstanceNodesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ESCLOUD) DescribeInstanceNodesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceNodesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeInstanceNodesCommon API operation for ESCLOUD.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ESCLOUD's
// API operation DescribeInstanceNodesCommon for usage and error information.
func (c *ESCLOUD) DescribeInstanceNodesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceNodesCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceNodesCommonWithContext is the same as DescribeInstanceNodesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceNodesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ESCLOUD) DescribeInstanceNodesCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceNodesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceNodes = "DescribeInstanceNodes"

// DescribeInstanceNodesRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeInstanceNodes operation. The "output" return
// value will be populated with the DescribeInstanceNodesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceNodesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceNodesCommon Send returns without error.
//
// See DescribeInstanceNodes for more information on using the DescribeInstanceNodes
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceNodesRequest method.
//    req, resp := client.DescribeInstanceNodesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ESCLOUD) DescribeInstanceNodesRequest(input *DescribeInstanceNodesInput) (req *request.Request, output *DescribeInstanceNodesOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceNodes,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceNodesInput{}
	}

	output = &DescribeInstanceNodesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeInstanceNodes API operation for ESCLOUD.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ESCLOUD's
// API operation DescribeInstanceNodes for usage and error information.
func (c *ESCLOUD) DescribeInstanceNodes(input *DescribeInstanceNodesInput) (*DescribeInstanceNodesOutput, error) {
	req, out := c.DescribeInstanceNodesRequest(input)
	return out, req.Send()
}

// DescribeInstanceNodesWithContext is the same as DescribeInstanceNodes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceNodes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ESCLOUD) DescribeInstanceNodesWithContext(ctx byteplus.Context, input *DescribeInstanceNodesInput, opts ...request.Option) (*DescribeInstanceNodesOutput, error) {
	req, out := c.DescribeInstanceNodesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeInstanceNodesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeInstanceNodesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceNodesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeInstanceNodesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeInstanceNodesInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeInstanceNodesInput) SetInstanceId(v string) *DescribeInstanceNodesInput {
	s.InstanceId = &v
	return s
}

type DescribeInstanceNodesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Nodes []*NodeForDescribeInstanceNodesOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeInstanceNodesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceNodesOutput) GoString() string {
	return s.String()
}

// SetNodes sets the Nodes field's value.
func (s *DescribeInstanceNodesOutput) SetNodes(v []*NodeForDescribeInstanceNodesOutput) *DescribeInstanceNodesOutput {
	s.Nodes = v
	return s
}

type NodeForDescribeInstanceNodesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	IsCold *bool `type:"boolean" json:",omitempty"`

	IsCoordinator *bool `type:"boolean" json:",omitempty"`

	IsHot *bool `type:"boolean" json:",omitempty"`

	IsKibana *bool `type:"boolean" json:",omitempty"`

	IsMaster *bool `type:"boolean" json:",omitempty"`

	IsWarm *bool `type:"boolean" json:",omitempty"`

	NodeDisplayName *string `type:"string" json:",omitempty"`

	NodeName *string `type:"string" json:",omitempty"`

	ResourceSpec *ResourceSpecForDescribeInstanceNodesOutput `type:"structure" json:",omitempty"`

	RestartNumber *int32 `type:"int32" json:",omitempty"`

	StartTime *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`

	StorageSpec *StorageSpecForDescribeInstanceNodesOutput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s NodeForDescribeInstanceNodesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeForDescribeInstanceNodesOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetInstanceId(v string) *NodeForDescribeInstanceNodesOutput {
	s.InstanceId = &v
	return s
}

// SetIsCold sets the IsCold field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetIsCold(v bool) *NodeForDescribeInstanceNodesOutput {
	s.IsCold = &v
	return s
}

// SetIsCoordinator sets the IsCoordinator field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetIsCoordinator(v bool) *NodeForDescribeInstanceNodesOutput {
	s.IsCoordinator = &v
	return s
}

// SetIsHot sets the IsHot field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetIsHot(v bool) *NodeForDescribeInstanceNodesOutput {
	s.IsHot = &v
	return s
}

// SetIsKibana sets the IsKibana field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetIsKibana(v bool) *NodeForDescribeInstanceNodesOutput {
	s.IsKibana = &v
	return s
}

// SetIsMaster sets the IsMaster field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetIsMaster(v bool) *NodeForDescribeInstanceNodesOutput {
	s.IsMaster = &v
	return s
}

// SetIsWarm sets the IsWarm field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetIsWarm(v bool) *NodeForDescribeInstanceNodesOutput {
	s.IsWarm = &v
	return s
}

// SetNodeDisplayName sets the NodeDisplayName field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetNodeDisplayName(v string) *NodeForDescribeInstanceNodesOutput {
	s.NodeDisplayName = &v
	return s
}

// SetNodeName sets the NodeName field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetNodeName(v string) *NodeForDescribeInstanceNodesOutput {
	s.NodeName = &v
	return s
}

// SetResourceSpec sets the ResourceSpec field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetResourceSpec(v *ResourceSpecForDescribeInstanceNodesOutput) *NodeForDescribeInstanceNodesOutput {
	s.ResourceSpec = v
	return s
}

// SetRestartNumber sets the RestartNumber field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetRestartNumber(v int32) *NodeForDescribeInstanceNodesOutput {
	s.RestartNumber = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetStartTime(v string) *NodeForDescribeInstanceNodesOutput {
	s.StartTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetStatus(v string) *NodeForDescribeInstanceNodesOutput {
	s.Status = &v
	return s
}

// SetStorageSpec sets the StorageSpec field's value.
func (s *NodeForDescribeInstanceNodesOutput) SetStorageSpec(v *StorageSpecForDescribeInstanceNodesOutput) *NodeForDescribeInstanceNodesOutput {
	s.StorageSpec = v
	return s
}

type ResourceSpecForDescribeInstanceNodesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CPU *int32 `type:"int32" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	DisplayName *string `type:"string" json:",omitempty"`

	Memory *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ResourceSpecForDescribeInstanceNodesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceSpecForDescribeInstanceNodesOutput) GoString() string {
	return s.String()
}

// SetCPU sets the CPU field's value.
func (s *ResourceSpecForDescribeInstanceNodesOutput) SetCPU(v int32) *ResourceSpecForDescribeInstanceNodesOutput {
	s.CPU = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ResourceSpecForDescribeInstanceNodesOutput) SetDescription(v string) *ResourceSpecForDescribeInstanceNodesOutput {
	s.Description = &v
	return s
}

// SetDisplayName sets the DisplayName field's value.
func (s *ResourceSpecForDescribeInstanceNodesOutput) SetDisplayName(v string) *ResourceSpecForDescribeInstanceNodesOutput {
	s.DisplayName = &v
	return s
}

// SetMemory sets the Memory field's value.
func (s *ResourceSpecForDescribeInstanceNodesOutput) SetMemory(v int32) *ResourceSpecForDescribeInstanceNodesOutput {
	s.Memory = &v
	return s
}

type StorageSpecForDescribeInstanceNodesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	DisplayName *string `type:"string" json:",omitempty"`

	MaxSize *int64 `type:"int64" json:",omitempty"`

	MinSize *int64 `type:"int64" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s StorageSpecForDescribeInstanceNodesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s StorageSpecForDescribeInstanceNodesOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *StorageSpecForDescribeInstanceNodesOutput) SetDescription(v string) *StorageSpecForDescribeInstanceNodesOutput {
	s.Description = &v
	return s
}

// SetDisplayName sets the DisplayName field's value.
func (s *StorageSpecForDescribeInstanceNodesOutput) SetDisplayName(v string) *StorageSpecForDescribeInstanceNodesOutput {
	s.DisplayName = &v
	return s
}

// SetMaxSize sets the MaxSize field's value.
func (s *StorageSpecForDescribeInstanceNodesOutput) SetMaxSize(v int64) *StorageSpecForDescribeInstanceNodesOutput {
	s.MaxSize = &v
	return s
}

// SetMinSize sets the MinSize field's value.
func (s *StorageSpecForDescribeInstanceNodesOutput) SetMinSize(v int64) *StorageSpecForDescribeInstanceNodesOutput {
	s.MinSize = &v
	return s
}

// SetType sets the Type field's value.
func (s *StorageSpecForDescribeInstanceNodesOutput) SetType(v string) *StorageSpecForDescribeInstanceNodesOutput {
	s.Type = &v
	return s
}
