// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package escloud

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyNodeSpecInOneStepCommon = "ModifyNodeSpecInOneStep"

// ModifyNodeSpecInOneStepCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyNodeSpecInOneStepCommon operation. The "output" return
// value will be populated with the ModifyNodeSpecInOneStepCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyNodeSpecInOneStepCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyNodeSpecInOneStepCommon Send returns without error.
//
// See ModifyNodeSpecInOneStepCommon for more information on using the ModifyNodeSpecInOneStepCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyNodeSpecInOneStepCommonRequest method.
//    req, resp := client.ModifyNodeSpecInOneStepCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ESCLOUD) ModifyNodeSpecInOneStepCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyNodeSpecInOneStepCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyNodeSpecInOneStepCommon API operation for ESCLOUD.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ESCLOUD's
// API operation ModifyNodeSpecInOneStepCommon for usage and error information.
func (c *ESCLOUD) ModifyNodeSpecInOneStepCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyNodeSpecInOneStepCommonRequest(input)
	return out, req.Send()
}

// ModifyNodeSpecInOneStepCommonWithContext is the same as ModifyNodeSpecInOneStepCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyNodeSpecInOneStepCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ESCLOUD) ModifyNodeSpecInOneStepCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyNodeSpecInOneStepCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyNodeSpecInOneStep = "ModifyNodeSpecInOneStep"

// ModifyNodeSpecInOneStepRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyNodeSpecInOneStep operation. The "output" return
// value will be populated with the ModifyNodeSpecInOneStepCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyNodeSpecInOneStepCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyNodeSpecInOneStepCommon Send returns without error.
//
// See ModifyNodeSpecInOneStep for more information on using the ModifyNodeSpecInOneStep
// API call, and error handling.
//
//    // Example sending a request using the ModifyNodeSpecInOneStepRequest method.
//    req, resp := client.ModifyNodeSpecInOneStepRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ESCLOUD) ModifyNodeSpecInOneStepRequest(input *ModifyNodeSpecInOneStepInput) (req *request.Request, output *ModifyNodeSpecInOneStepOutput) {
	op := &request.Operation{
		Name:       opModifyNodeSpecInOneStep,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyNodeSpecInOneStepInput{}
	}

	output = &ModifyNodeSpecInOneStepOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyNodeSpecInOneStep API operation for ESCLOUD.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ESCLOUD's
// API operation ModifyNodeSpecInOneStep for usage and error information.
func (c *ESCLOUD) ModifyNodeSpecInOneStep(input *ModifyNodeSpecInOneStepInput) (*ModifyNodeSpecInOneStepOutput, error) {
	req, out := c.ModifyNodeSpecInOneStepRequest(input)
	return out, req.Send()
}

// ModifyNodeSpecInOneStepWithContext is the same as ModifyNodeSpecInOneStep with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyNodeSpecInOneStep for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ESCLOUD) ModifyNodeSpecInOneStepWithContext(ctx byteplus.Context, input *ModifyNodeSpecInOneStepInput, opts ...request.Option) (*ModifyNodeSpecInOneStepOutput, error) {
	req, out := c.ModifyNodeSpecInOneStepRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ExtraPerformanceForModifyNodeSpecInOneStepInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Throughput *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ExtraPerformanceForModifyNodeSpecInOneStepInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ExtraPerformanceForModifyNodeSpecInOneStepInput) GoString() string {
	return s.String()
}

// SetThroughput sets the Throughput field's value.
func (s *ExtraPerformanceForModifyNodeSpecInOneStepInput) SetThroughput(v int32) *ExtraPerformanceForModifyNodeSpecInOneStepInput {
	s.Throughput = &v
	return s
}

type ModifyNodeSpecInOneStepInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	NodeSpecsAssigns []*NodeSpecsAssignForModifyNodeSpecInOneStepInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ModifyNodeSpecInOneStepInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyNodeSpecInOneStepInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyNodeSpecInOneStepInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyNodeSpecInOneStepInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyNodeSpecInOneStepInput) SetInstanceId(v string) *ModifyNodeSpecInOneStepInput {
	s.InstanceId = &v
	return s
}

// SetNodeSpecsAssigns sets the NodeSpecsAssigns field's value.
func (s *ModifyNodeSpecInOneStepInput) SetNodeSpecsAssigns(v []*NodeSpecsAssignForModifyNodeSpecInOneStepInput) *ModifyNodeSpecInOneStepInput {
	s.NodeSpecsAssigns = v
	return s
}

type ModifyNodeSpecInOneStepOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	InstanceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ModifyNodeSpecInOneStepOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyNodeSpecInOneStepOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyNodeSpecInOneStepOutput) SetInstanceId(v string) *ModifyNodeSpecInOneStepOutput {
	s.InstanceId = &v
	return s
}

type NodeSpecsAssignForModifyNodeSpecInOneStepInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ExtraPerformance *ExtraPerformanceForModifyNodeSpecInOneStepInput `type:"structure" json:",omitempty"`

	Number *int32 `type:"int32" json:",omitempty"`

	ResourceSpecName *string `type:"string" json:",omitempty"`

	StorageSize *int32 `type:"int32" json:",omitempty"`

	StorageSpecName *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s NodeSpecsAssignForModifyNodeSpecInOneStepInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeSpecsAssignForModifyNodeSpecInOneStepInput) GoString() string {
	return s.String()
}

// SetExtraPerformance sets the ExtraPerformance field's value.
func (s *NodeSpecsAssignForModifyNodeSpecInOneStepInput) SetExtraPerformance(v *ExtraPerformanceForModifyNodeSpecInOneStepInput) *NodeSpecsAssignForModifyNodeSpecInOneStepInput {
	s.ExtraPerformance = v
	return s
}

// SetNumber sets the Number field's value.
func (s *NodeSpecsAssignForModifyNodeSpecInOneStepInput) SetNumber(v int32) *NodeSpecsAssignForModifyNodeSpecInOneStepInput {
	s.Number = &v
	return s
}

// SetResourceSpecName sets the ResourceSpecName field's value.
func (s *NodeSpecsAssignForModifyNodeSpecInOneStepInput) SetResourceSpecName(v string) *NodeSpecsAssignForModifyNodeSpecInOneStepInput {
	s.ResourceSpecName = &v
	return s
}

// SetStorageSize sets the StorageSize field's value.
func (s *NodeSpecsAssignForModifyNodeSpecInOneStepInput) SetStorageSize(v int32) *NodeSpecsAssignForModifyNodeSpecInOneStepInput {
	s.StorageSize = &v
	return s
}

// SetStorageSpecName sets the StorageSpecName field's value.
func (s *NodeSpecsAssignForModifyNodeSpecInOneStepInput) SetStorageSpecName(v string) *NodeSpecsAssignForModifyNodeSpecInOneStepInput {
	s.StorageSpecName = &v
	return s
}

// SetType sets the Type field's value.
func (s *NodeSpecsAssignForModifyNodeSpecInOneStepInput) SetType(v string) *NodeSpecsAssignForModifyNodeSpecInOneStepInput {
	s.Type = &v
	return s
}
