// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package escloud

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyChargeCodeCommon = "ModifyChargeCode"

// ModifyChargeCodeCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyChargeCodeCommon operation. The "output" return
// value will be populated with the ModifyChargeCodeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyChargeCodeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyChargeCodeCommon Send returns without error.
//
// See ModifyChargeCodeCommon for more information on using the ModifyChargeCodeCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyChargeCodeCommonRequest method.
//    req, resp := client.ModifyChargeCodeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ESCLOUD) ModifyChargeCodeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyChargeCodeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyChargeCodeCommon API operation for ESCLOUD.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ESCLOUD's
// API operation ModifyChargeCodeCommon for usage and error information.
func (c *ESCLOUD) ModifyChargeCodeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyChargeCodeCommonRequest(input)
	return out, req.Send()
}

// ModifyChargeCodeCommonWithContext is the same as ModifyChargeCodeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyChargeCodeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ESCLOUD) ModifyChargeCodeCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyChargeCodeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyChargeCode = "ModifyChargeCode"

// ModifyChargeCodeRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyChargeCode operation. The "output" return
// value will be populated with the ModifyChargeCodeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyChargeCodeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyChargeCodeCommon Send returns without error.
//
// See ModifyChargeCode for more information on using the ModifyChargeCode
// API call, and error handling.
//
//    // Example sending a request using the ModifyChargeCodeRequest method.
//    req, resp := client.ModifyChargeCodeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ESCLOUD) ModifyChargeCodeRequest(input *ModifyChargeCodeInput) (req *request.Request, output *ModifyChargeCodeOutput) {
	op := &request.Operation{
		Name:       opModifyChargeCode,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyChargeCodeInput{}
	}

	output = &ModifyChargeCodeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyChargeCode API operation for ESCLOUD.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ESCLOUD's
// API operation ModifyChargeCode for usage and error information.
func (c *ESCLOUD) ModifyChargeCode(input *ModifyChargeCodeInput) (*ModifyChargeCodeOutput, error) {
	req, out := c.ModifyChargeCodeRequest(input)
	return out, req.Send()
}

// ModifyChargeCodeWithContext is the same as ModifyChargeCode with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyChargeCode for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ESCLOUD) ModifyChargeCodeWithContext(ctx byteplus.Context, input *ModifyChargeCodeInput, opts ...request.Option) (*ModifyChargeCodeOutput, error) {
	req, out := c.ModifyChargeCodeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyChargeCodeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AutoRenew is a required field
	AutoRenew *bool `type:"boolean" json:",omitempty" required:"true"`

	// IncludeMonths is a required field
	IncludeMonths *int32 `min:"1" type:"int32" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// ToChargeType is a required field
	ToChargeType *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyChargeCodeInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyChargeCodeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyChargeCodeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyChargeCodeInput"}
	if s.AutoRenew == nil {
		invalidParams.Add(request.NewErrParamRequired("AutoRenew"))
	}
	if s.IncludeMonths == nil {
		invalidParams.Add(request.NewErrParamRequired("IncludeMonths"))
	}
	if s.IncludeMonths != nil && *s.IncludeMonths < 1 {
		invalidParams.Add(request.NewErrParamMinValue("IncludeMonths", 1))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.ToChargeType == nil {
		invalidParams.Add(request.NewErrParamRequired("ToChargeType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *ModifyChargeCodeInput) SetAutoRenew(v bool) *ModifyChargeCodeInput {
	s.AutoRenew = &v
	return s
}

// SetIncludeMonths sets the IncludeMonths field's value.
func (s *ModifyChargeCodeInput) SetIncludeMonths(v int32) *ModifyChargeCodeInput {
	s.IncludeMonths = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyChargeCodeInput) SetInstanceId(v string) *ModifyChargeCodeInput {
	s.InstanceId = &v
	return s
}

// SetToChargeType sets the ToChargeType field's value.
func (s *ModifyChargeCodeInput) SetToChargeType(v string) *ModifyChargeCodeInput {
	s.ToChargeType = &v
	return s
}

type ModifyChargeCodeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	InstanceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ModifyChargeCodeOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyChargeCodeOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyChargeCodeOutput) SetInstanceId(v string) *ModifyChargeCodeOutput {
	s.InstanceId = &v
	return s
}
