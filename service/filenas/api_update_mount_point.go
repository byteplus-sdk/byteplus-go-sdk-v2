// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package filenas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUpdateMountPointCommon = "UpdateMountPoint"

// UpdateMountPointCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateMountPointCommon operation. The "output" return
// value will be populated with the UpdateMountPointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateMountPointCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateMountPointCommon Send returns without error.
//
// See UpdateMountPointCommon for more information on using the UpdateMountPointCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateMountPointCommonRequest method.
//    req, resp := client.UpdateMountPointCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FILENAS) UpdateMountPointCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateMountPointCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateMountPointCommon API operation for FILENAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for FILENAS's
// API operation UpdateMountPointCommon for usage and error information.
func (c *FILENAS) UpdateMountPointCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateMountPointCommonRequest(input)
	return out, req.Send()
}

// UpdateMountPointCommonWithContext is the same as UpdateMountPointCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateMountPointCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FILENAS) UpdateMountPointCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateMountPointCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateMountPoint = "UpdateMountPoint"

// UpdateMountPointRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateMountPoint operation. The "output" return
// value will be populated with the UpdateMountPointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateMountPointCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateMountPointCommon Send returns without error.
//
// See UpdateMountPoint for more information on using the UpdateMountPoint
// API call, and error handling.
//
//    // Example sending a request using the UpdateMountPointRequest method.
//    req, resp := client.UpdateMountPointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FILENAS) UpdateMountPointRequest(input *UpdateMountPointInput) (req *request.Request, output *UpdateMountPointOutput) {
	op := &request.Operation{
		Name:       opUpdateMountPoint,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateMountPointInput{}
	}

	output = &UpdateMountPointOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateMountPoint API operation for FILENAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for FILENAS's
// API operation UpdateMountPoint for usage and error information.
func (c *FILENAS) UpdateMountPoint(input *UpdateMountPointInput) (*UpdateMountPointOutput, error) {
	req, out := c.UpdateMountPointRequest(input)
	return out, req.Send()
}

// UpdateMountPointWithContext is the same as UpdateMountPoint with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateMountPoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FILENAS) UpdateMountPointWithContext(ctx byteplus.Context, input *UpdateMountPointInput, opts ...request.Option) (*UpdateMountPointOutput, error) {
	req, out := c.UpdateMountPointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateMountPointInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FileSystemId is a required field
	FileSystemId *string `type:"string" json:",omitempty" required:"true"`

	// MountPointId is a required field
	MountPointId *string `type:"string" json:",omitempty" required:"true"`

	MountPointName *string `type:"string" json:",omitempty"`

	PermissionGroupId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s UpdateMountPointInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateMountPointInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateMountPointInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateMountPointInput"}
	if s.FileSystemId == nil {
		invalidParams.Add(request.NewErrParamRequired("FileSystemId"))
	}
	if s.MountPointId == nil {
		invalidParams.Add(request.NewErrParamRequired("MountPointId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFileSystemId sets the FileSystemId field's value.
func (s *UpdateMountPointInput) SetFileSystemId(v string) *UpdateMountPointInput {
	s.FileSystemId = &v
	return s
}

// SetMountPointId sets the MountPointId field's value.
func (s *UpdateMountPointInput) SetMountPointId(v string) *UpdateMountPointInput {
	s.MountPointId = &v
	return s
}

// SetMountPointName sets the MountPointName field's value.
func (s *UpdateMountPointInput) SetMountPointName(v string) *UpdateMountPointInput {
	s.MountPointName = &v
	return s
}

// SetPermissionGroupId sets the PermissionGroupId field's value.
func (s *UpdateMountPointInput) SetPermissionGroupId(v string) *UpdateMountPointInput {
	s.PermissionGroupId = &v
	return s
}

type UpdateMountPointOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateMountPointOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateMountPointOutput) GoString() string {
	return s.String()
}
