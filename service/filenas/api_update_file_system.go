// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package filenas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUpdateFileSystemCommon = "UpdateFileSystem"

// UpdateFileSystemCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateFileSystemCommon operation. The "output" return
// value will be populated with the UpdateFileSystemCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateFileSystemCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateFileSystemCommon Send returns without error.
//
// See UpdateFileSystemCommon for more information on using the UpdateFileSystemCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateFileSystemCommonRequest method.
//    req, resp := client.UpdateFileSystemCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FILENAS) UpdateFileSystemCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateFileSystemCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateFileSystemCommon API operation for FILENAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for FILENAS's
// API operation UpdateFileSystemCommon for usage and error information.
func (c *FILENAS) UpdateFileSystemCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateFileSystemCommonRequest(input)
	return out, req.Send()
}

// UpdateFileSystemCommonWithContext is the same as UpdateFileSystemCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateFileSystemCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FILENAS) UpdateFileSystemCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateFileSystemCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateFileSystem = "UpdateFileSystem"

// UpdateFileSystemRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateFileSystem operation. The "output" return
// value will be populated with the UpdateFileSystemCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateFileSystemCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateFileSystemCommon Send returns without error.
//
// See UpdateFileSystem for more information on using the UpdateFileSystem
// API call, and error handling.
//
//    // Example sending a request using the UpdateFileSystemRequest method.
//    req, resp := client.UpdateFileSystemRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FILENAS) UpdateFileSystemRequest(input *UpdateFileSystemInput) (req *request.Request, output *UpdateFileSystemOutput) {
	op := &request.Operation{
		Name:       opUpdateFileSystem,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateFileSystemInput{}
	}

	output = &UpdateFileSystemOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateFileSystem API operation for FILENAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for FILENAS's
// API operation UpdateFileSystem for usage and error information.
func (c *FILENAS) UpdateFileSystem(input *UpdateFileSystemInput) (*UpdateFileSystemOutput, error) {
	req, out := c.UpdateFileSystemRequest(input)
	return out, req.Send()
}

// UpdateFileSystemWithContext is the same as UpdateFileSystem with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateFileSystem for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FILENAS) UpdateFileSystemWithContext(ctx byteplus.Context, input *UpdateFileSystemInput, opts ...request.Option) (*UpdateFileSystemOutput, error) {
	req, out := c.UpdateFileSystemRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type TagForUpdateFileSystemInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty" enum:"EnumOfTypeForUpdateFileSystemInput"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s TagForUpdateFileSystemInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForUpdateFileSystemInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForUpdateFileSystemInput) SetKey(v string) *TagForUpdateFileSystemInput {
	s.Key = &v
	return s
}

// SetType sets the Type field's value.
func (s *TagForUpdateFileSystemInput) SetType(v string) *TagForUpdateFileSystemInput {
	s.Type = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForUpdateFileSystemInput) SetValue(v string) *TagForUpdateFileSystemInput {
	s.Value = &v
	return s
}

type UpdateFileSystemInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AutoExpand *bool `type:"boolean" json:",omitempty"`

	AutoExpandLimit *int32 `type:"int32" json:",omitempty"`

	AutoExpandStep *int32 `type:"int32" json:",omitempty"`

	AutoExpandThreshold *int32 `type:"int32" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// FileSystemId is a required field
	FileSystemId *string `type:"string" json:",omitempty" required:"true"`

	FileSystemName *string `type:"string" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	Tags []*TagForUpdateFileSystemInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateFileSystemInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateFileSystemInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateFileSystemInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateFileSystemInput"}
	if s.FileSystemId == nil {
		invalidParams.Add(request.NewErrParamRequired("FileSystemId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAutoExpand sets the AutoExpand field's value.
func (s *UpdateFileSystemInput) SetAutoExpand(v bool) *UpdateFileSystemInput {
	s.AutoExpand = &v
	return s
}

// SetAutoExpandLimit sets the AutoExpandLimit field's value.
func (s *UpdateFileSystemInput) SetAutoExpandLimit(v int32) *UpdateFileSystemInput {
	s.AutoExpandLimit = &v
	return s
}

// SetAutoExpandStep sets the AutoExpandStep field's value.
func (s *UpdateFileSystemInput) SetAutoExpandStep(v int32) *UpdateFileSystemInput {
	s.AutoExpandStep = &v
	return s
}

// SetAutoExpandThreshold sets the AutoExpandThreshold field's value.
func (s *UpdateFileSystemInput) SetAutoExpandThreshold(v int32) *UpdateFileSystemInput {
	s.AutoExpandThreshold = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *UpdateFileSystemInput) SetDescription(v string) *UpdateFileSystemInput {
	s.Description = &v
	return s
}

// SetFileSystemId sets the FileSystemId field's value.
func (s *UpdateFileSystemInput) SetFileSystemId(v string) *UpdateFileSystemInput {
	s.FileSystemId = &v
	return s
}

// SetFileSystemName sets the FileSystemName field's value.
func (s *UpdateFileSystemInput) SetFileSystemName(v string) *UpdateFileSystemInput {
	s.FileSystemName = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *UpdateFileSystemInput) SetProjectName(v string) *UpdateFileSystemInput {
	s.ProjectName = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *UpdateFileSystemInput) SetTags(v []*TagForUpdateFileSystemInput) *UpdateFileSystemInput {
	s.Tags = v
	return s
}

type UpdateFileSystemOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateFileSystemOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateFileSystemOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfTypeForUpdateFileSystemInputCustom is a EnumOfTypeForUpdateFileSystemInput enum value
	EnumOfTypeForUpdateFileSystemInputCustom = "Custom"

	// EnumOfTypeForUpdateFileSystemInputSystem is a EnumOfTypeForUpdateFileSystemInput enum value
	EnumOfTypeForUpdateFileSystemInputSystem = "System"
)
