// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package filenas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeletePermissionGroupCommon = "DeletePermissionGroup"

// DeletePermissionGroupCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeletePermissionGroupCommon operation. The "output" return
// value will be populated with the DeletePermissionGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeletePermissionGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeletePermissionGroupCommon Send returns without error.
//
// See DeletePermissionGroupCommon for more information on using the DeletePermissionGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the DeletePermissionGroupCommonRequest method.
//    req, resp := client.DeletePermissionGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FILENAS) DeletePermissionGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeletePermissionGroupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeletePermissionGroupCommon API operation for FILENAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for FILENAS's
// API operation DeletePermissionGroupCommon for usage and error information.
func (c *FILENAS) DeletePermissionGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeletePermissionGroupCommonRequest(input)
	return out, req.Send()
}

// DeletePermissionGroupCommonWithContext is the same as DeletePermissionGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeletePermissionGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FILENAS) DeletePermissionGroupCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeletePermissionGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeletePermissionGroup = "DeletePermissionGroup"

// DeletePermissionGroupRequest generates a "byteplus/request.Request" representing the
// client's request for the DeletePermissionGroup operation. The "output" return
// value will be populated with the DeletePermissionGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeletePermissionGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeletePermissionGroupCommon Send returns without error.
//
// See DeletePermissionGroup for more information on using the DeletePermissionGroup
// API call, and error handling.
//
//    // Example sending a request using the DeletePermissionGroupRequest method.
//    req, resp := client.DeletePermissionGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FILENAS) DeletePermissionGroupRequest(input *DeletePermissionGroupInput) (req *request.Request, output *DeletePermissionGroupOutput) {
	op := &request.Operation{
		Name:       opDeletePermissionGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeletePermissionGroupInput{}
	}

	output = &DeletePermissionGroupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeletePermissionGroup API operation for FILENAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for FILENAS's
// API operation DeletePermissionGroup for usage and error information.
func (c *FILENAS) DeletePermissionGroup(input *DeletePermissionGroupInput) (*DeletePermissionGroupOutput, error) {
	req, out := c.DeletePermissionGroupRequest(input)
	return out, req.Send()
}

// DeletePermissionGroupWithContext is the same as DeletePermissionGroup with the addition of
// the ability to pass a context and additional request options.
//
// See DeletePermissionGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FILENAS) DeletePermissionGroupWithContext(ctx byteplus.Context, input *DeletePermissionGroupInput, opts ...request.Option) (*DeletePermissionGroupOutput, error) {
	req, out := c.DeletePermissionGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeletePermissionGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FileSystemType is a required field
	FileSystemType *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfFileSystemTypeForDeletePermissionGroupInput"`

	// PermissionGroupId is a required field
	PermissionGroupId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DeletePermissionGroupInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeletePermissionGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeletePermissionGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeletePermissionGroupInput"}
	if s.FileSystemType == nil {
		invalidParams.Add(request.NewErrParamRequired("FileSystemType"))
	}
	if s.PermissionGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("PermissionGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFileSystemType sets the FileSystemType field's value.
func (s *DeletePermissionGroupInput) SetFileSystemType(v string) *DeletePermissionGroupInput {
	s.FileSystemType = &v
	return s
}

// SetPermissionGroupId sets the PermissionGroupId field's value.
func (s *DeletePermissionGroupInput) SetPermissionGroupId(v string) *DeletePermissionGroupInput {
	s.PermissionGroupId = &v
	return s
}

type DeletePermissionGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeletePermissionGroupOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeletePermissionGroupOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfFileSystemTypeForDeletePermissionGroupInputExtreme is a EnumOfFileSystemTypeForDeletePermissionGroupInput enum value
	EnumOfFileSystemTypeForDeletePermissionGroupInputExtreme = "Extreme"

	// EnumOfFileSystemTypeForDeletePermissionGroupInputCapacity is a EnumOfFileSystemTypeForDeletePermissionGroupInput enum value
	EnumOfFileSystemTypeForDeletePermissionGroupInputCapacity = "Capacity"

	// EnumOfFileSystemTypeForDeletePermissionGroupInputCache is a EnumOfFileSystemTypeForDeletePermissionGroupInput enum value
	EnumOfFileSystemTypeForDeletePermissionGroupInputCache = "Cache"
)
