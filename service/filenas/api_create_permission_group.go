// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package filenas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreatePermissionGroupCommon = "CreatePermissionGroup"

// CreatePermissionGroupCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreatePermissionGroupCommon operation. The "output" return
// value will be populated with the CreatePermissionGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreatePermissionGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreatePermissionGroupCommon Send returns without error.
//
// See CreatePermissionGroupCommon for more information on using the CreatePermissionGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the CreatePermissionGroupCommonRequest method.
//    req, resp := client.CreatePermissionGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FILENAS) CreatePermissionGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreatePermissionGroupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreatePermissionGroupCommon API operation for FILENAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for FILENAS's
// API operation CreatePermissionGroupCommon for usage and error information.
func (c *FILENAS) CreatePermissionGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreatePermissionGroupCommonRequest(input)
	return out, req.Send()
}

// CreatePermissionGroupCommonWithContext is the same as CreatePermissionGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreatePermissionGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FILENAS) CreatePermissionGroupCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreatePermissionGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreatePermissionGroup = "CreatePermissionGroup"

// CreatePermissionGroupRequest generates a "byteplus/request.Request" representing the
// client's request for the CreatePermissionGroup operation. The "output" return
// value will be populated with the CreatePermissionGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreatePermissionGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreatePermissionGroupCommon Send returns without error.
//
// See CreatePermissionGroup for more information on using the CreatePermissionGroup
// API call, and error handling.
//
//    // Example sending a request using the CreatePermissionGroupRequest method.
//    req, resp := client.CreatePermissionGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FILENAS) CreatePermissionGroupRequest(input *CreatePermissionGroupInput) (req *request.Request, output *CreatePermissionGroupOutput) {
	op := &request.Operation{
		Name:       opCreatePermissionGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreatePermissionGroupInput{}
	}

	output = &CreatePermissionGroupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreatePermissionGroup API operation for FILENAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for FILENAS's
// API operation CreatePermissionGroup for usage and error information.
func (c *FILENAS) CreatePermissionGroup(input *CreatePermissionGroupInput) (*CreatePermissionGroupOutput, error) {
	req, out := c.CreatePermissionGroupRequest(input)
	return out, req.Send()
}

// CreatePermissionGroupWithContext is the same as CreatePermissionGroup with the addition of
// the ability to pass a context and additional request options.
//
// See CreatePermissionGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FILENAS) CreatePermissionGroupWithContext(ctx byteplus.Context, input *CreatePermissionGroupInput, opts ...request.Option) (*CreatePermissionGroupOutput, error) {
	req, out := c.CreatePermissionGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreatePermissionGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	FileSystemType *string `type:"string" json:",omitempty" enum:"EnumOfFileSystemTypeForCreatePermissionGroupInput"`

	// PermissionGroupName is a required field
	PermissionGroupName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreatePermissionGroupInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreatePermissionGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreatePermissionGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreatePermissionGroupInput"}
	if s.PermissionGroupName == nil {
		invalidParams.Add(request.NewErrParamRequired("PermissionGroupName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreatePermissionGroupInput) SetDescription(v string) *CreatePermissionGroupInput {
	s.Description = &v
	return s
}

// SetFileSystemType sets the FileSystemType field's value.
func (s *CreatePermissionGroupInput) SetFileSystemType(v string) *CreatePermissionGroupInput {
	s.FileSystemType = &v
	return s
}

// SetPermissionGroupName sets the PermissionGroupName field's value.
func (s *CreatePermissionGroupInput) SetPermissionGroupName(v string) *CreatePermissionGroupInput {
	s.PermissionGroupName = &v
	return s
}

type CreatePermissionGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	PermissionGroupId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreatePermissionGroupOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreatePermissionGroupOutput) GoString() string {
	return s.String()
}

// SetPermissionGroupId sets the PermissionGroupId field's value.
func (s *CreatePermissionGroupOutput) SetPermissionGroupId(v string) *CreatePermissionGroupOutput {
	s.PermissionGroupId = &v
	return s
}

const (
	// EnumOfFileSystemTypeForCreatePermissionGroupInputExtreme is a EnumOfFileSystemTypeForCreatePermissionGroupInput enum value
	EnumOfFileSystemTypeForCreatePermissionGroupInputExtreme = "Extreme"

	// EnumOfFileSystemTypeForCreatePermissionGroupInputCapacity is a EnumOfFileSystemTypeForCreatePermissionGroupInput enum value
	EnumOfFileSystemTypeForCreatePermissionGroupInputCapacity = "Capacity"

	// EnumOfFileSystemTypeForCreatePermissionGroupInputCache is a EnumOfFileSystemTypeForCreatePermissionGroupInput enum value
	EnumOfFileSystemTypeForCreatePermissionGroupInputCache = "Cache"
)
