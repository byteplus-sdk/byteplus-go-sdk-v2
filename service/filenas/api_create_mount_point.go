// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package filenas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateMountPointCommon = "CreateMountPoint"

// CreateMountPointCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateMountPointCommon operation. The "output" return
// value will be populated with the CreateMountPointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateMountPointCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateMountPointCommon Send returns without error.
//
// See CreateMountPointCommon for more information on using the CreateMountPointCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateMountPointCommonRequest method.
//    req, resp := client.CreateMountPointCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FILENAS) CreateMountPointCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateMountPointCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateMountPointCommon API operation for FILENAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for FILENAS's
// API operation CreateMountPointCommon for usage and error information.
func (c *FILENAS) CreateMountPointCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateMountPointCommonRequest(input)
	return out, req.Send()
}

// CreateMountPointCommonWithContext is the same as CreateMountPointCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateMountPointCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FILENAS) CreateMountPointCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateMountPointCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateMountPoint = "CreateMountPoint"

// CreateMountPointRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateMountPoint operation. The "output" return
// value will be populated with the CreateMountPointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateMountPointCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateMountPointCommon Send returns without error.
//
// See CreateMountPoint for more information on using the CreateMountPoint
// API call, and error handling.
//
//    // Example sending a request using the CreateMountPointRequest method.
//    req, resp := client.CreateMountPointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FILENAS) CreateMountPointRequest(input *CreateMountPointInput) (req *request.Request, output *CreateMountPointOutput) {
	op := &request.Operation{
		Name:       opCreateMountPoint,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateMountPointInput{}
	}

	output = &CreateMountPointOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateMountPoint API operation for FILENAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for FILENAS's
// API operation CreateMountPoint for usage and error information.
func (c *FILENAS) CreateMountPoint(input *CreateMountPointInput) (*CreateMountPointOutput, error) {
	req, out := c.CreateMountPointRequest(input)
	return out, req.Send()
}

// CreateMountPointWithContext is the same as CreateMountPoint with the addition of
// the ability to pass a context and additional request options.
//
// See CreateMountPoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FILENAS) CreateMountPointWithContext(ctx byteplus.Context, input *CreateMountPointInput, opts ...request.Option) (*CreateMountPointOutput, error) {
	req, out := c.CreateMountPointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateMountPointInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FileSystemId is a required field
	FileSystemId *string `type:"string" json:",omitempty" required:"true"`

	// MountPointName is a required field
	MountPointName *string `type:"string" json:",omitempty" required:"true"`

	// PermissionGroupId is a required field
	PermissionGroupId *string `type:"string" json:",omitempty" required:"true"`

	// SubnetId is a required field
	SubnetId *string `type:"string" json:",omitempty" required:"true"`

	// VpcId is a required field
	VpcId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateMountPointInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateMountPointInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateMountPointInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateMountPointInput"}
	if s.FileSystemId == nil {
		invalidParams.Add(request.NewErrParamRequired("FileSystemId"))
	}
	if s.MountPointName == nil {
		invalidParams.Add(request.NewErrParamRequired("MountPointName"))
	}
	if s.PermissionGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("PermissionGroupId"))
	}
	if s.SubnetId == nil {
		invalidParams.Add(request.NewErrParamRequired("SubnetId"))
	}
	if s.VpcId == nil {
		invalidParams.Add(request.NewErrParamRequired("VpcId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFileSystemId sets the FileSystemId field's value.
func (s *CreateMountPointInput) SetFileSystemId(v string) *CreateMountPointInput {
	s.FileSystemId = &v
	return s
}

// SetMountPointName sets the MountPointName field's value.
func (s *CreateMountPointInput) SetMountPointName(v string) *CreateMountPointInput {
	s.MountPointName = &v
	return s
}

// SetPermissionGroupId sets the PermissionGroupId field's value.
func (s *CreateMountPointInput) SetPermissionGroupId(v string) *CreateMountPointInput {
	s.PermissionGroupId = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *CreateMountPointInput) SetSubnetId(v string) *CreateMountPointInput {
	s.SubnetId = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *CreateMountPointInput) SetVpcId(v string) *CreateMountPointInput {
	s.VpcId = &v
	return s
}

type CreateMountPointOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	MountPointId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateMountPointOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateMountPointOutput) GoString() string {
	return s.String()
}

// SetMountPointId sets the MountPointId field's value.
func (s *CreateMountPointOutput) SetMountPointId(v string) *CreateMountPointOutput {
	s.MountPointId = &v
	return s
}
