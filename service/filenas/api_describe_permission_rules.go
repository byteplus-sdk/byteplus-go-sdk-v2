// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package filenas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribePermissionRulesCommon = "DescribePermissionRules"

// DescribePermissionRulesCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribePermissionRulesCommon operation. The "output" return
// value will be populated with the DescribePermissionRulesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribePermissionRulesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribePermissionRulesCommon Send returns without error.
//
// See DescribePermissionRulesCommon for more information on using the DescribePermissionRulesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribePermissionRulesCommonRequest method.
//    req, resp := client.DescribePermissionRulesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FILENAS) DescribePermissionRulesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribePermissionRulesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribePermissionRulesCommon API operation for FILENAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for FILENAS's
// API operation DescribePermissionRulesCommon for usage and error information.
func (c *FILENAS) DescribePermissionRulesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribePermissionRulesCommonRequest(input)
	return out, req.Send()
}

// DescribePermissionRulesCommonWithContext is the same as DescribePermissionRulesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribePermissionRulesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FILENAS) DescribePermissionRulesCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribePermissionRulesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribePermissionRules = "DescribePermissionRules"

// DescribePermissionRulesRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribePermissionRules operation. The "output" return
// value will be populated with the DescribePermissionRulesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribePermissionRulesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribePermissionRulesCommon Send returns without error.
//
// See DescribePermissionRules for more information on using the DescribePermissionRules
// API call, and error handling.
//
//    // Example sending a request using the DescribePermissionRulesRequest method.
//    req, resp := client.DescribePermissionRulesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *FILENAS) DescribePermissionRulesRequest(input *DescribePermissionRulesInput) (req *request.Request, output *DescribePermissionRulesOutput) {
	op := &request.Operation{
		Name:       opDescribePermissionRules,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribePermissionRulesInput{}
	}

	output = &DescribePermissionRulesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribePermissionRules API operation for FILENAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for FILENAS's
// API operation DescribePermissionRules for usage and error information.
func (c *FILENAS) DescribePermissionRules(input *DescribePermissionRulesInput) (*DescribePermissionRulesOutput, error) {
	req, out := c.DescribePermissionRulesRequest(input)
	return out, req.Send()
}

// DescribePermissionRulesWithContext is the same as DescribePermissionRules with the addition of
// the ability to pass a context and additional request options.
//
// See DescribePermissionRules for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *FILENAS) DescribePermissionRulesWithContext(ctx byteplus.Context, input *DescribePermissionRulesInput, opts ...request.Option) (*DescribePermissionRulesOutput, error) {
	req, out := c.DescribePermissionRulesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribePermissionRulesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	FileSystemType *string `type:"string" json:",omitempty" enum:"EnumOfFileSystemTypeForDescribePermissionRulesInput"`

	// PermissionGroupId is a required field
	PermissionGroupId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribePermissionRulesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribePermissionRulesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribePermissionRulesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribePermissionRulesInput"}
	if s.PermissionGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("PermissionGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFileSystemType sets the FileSystemType field's value.
func (s *DescribePermissionRulesInput) SetFileSystemType(v string) *DescribePermissionRulesInput {
	s.FileSystemType = &v
	return s
}

// SetPermissionGroupId sets the PermissionGroupId field's value.
func (s *DescribePermissionRulesInput) SetPermissionGroupId(v string) *DescribePermissionRulesInput {
	s.PermissionGroupId = &v
	return s
}

type DescribePermissionRulesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	PermissionRules []*PermissionRuleForDescribePermissionRulesOutput `type:"list" json:",omitempty"`

	TotalCount *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribePermissionRulesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribePermissionRulesOutput) GoString() string {
	return s.String()
}

// SetPermissionRules sets the PermissionRules field's value.
func (s *DescribePermissionRulesOutput) SetPermissionRules(v []*PermissionRuleForDescribePermissionRulesOutput) *DescribePermissionRulesOutput {
	s.PermissionRules = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribePermissionRulesOutput) SetTotalCount(v int32) *DescribePermissionRulesOutput {
	s.TotalCount = &v
	return s
}

type PermissionRuleForDescribePermissionRulesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CidrIp *string `type:"string" json:",omitempty"`

	PermissionRuleId *string `type:"string" json:",omitempty"`

	RwMode *string `type:"string" json:",omitempty" enum:"EnumOfRwModeForDescribePermissionRulesOutput"`

	UserMode *string `type:"string" json:",omitempty" enum:"EnumOfUserModeForDescribePermissionRulesOutput"`
}

// String returns the string representation
func (s PermissionRuleForDescribePermissionRulesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s PermissionRuleForDescribePermissionRulesOutput) GoString() string {
	return s.String()
}

// SetCidrIp sets the CidrIp field's value.
func (s *PermissionRuleForDescribePermissionRulesOutput) SetCidrIp(v string) *PermissionRuleForDescribePermissionRulesOutput {
	s.CidrIp = &v
	return s
}

// SetPermissionRuleId sets the PermissionRuleId field's value.
func (s *PermissionRuleForDescribePermissionRulesOutput) SetPermissionRuleId(v string) *PermissionRuleForDescribePermissionRulesOutput {
	s.PermissionRuleId = &v
	return s
}

// SetRwMode sets the RwMode field's value.
func (s *PermissionRuleForDescribePermissionRulesOutput) SetRwMode(v string) *PermissionRuleForDescribePermissionRulesOutput {
	s.RwMode = &v
	return s
}

// SetUserMode sets the UserMode field's value.
func (s *PermissionRuleForDescribePermissionRulesOutput) SetUserMode(v string) *PermissionRuleForDescribePermissionRulesOutput {
	s.UserMode = &v
	return s
}

const (
	// EnumOfFileSystemTypeForDescribePermissionRulesInputExtreme is a EnumOfFileSystemTypeForDescribePermissionRulesInput enum value
	EnumOfFileSystemTypeForDescribePermissionRulesInputExtreme = "Extreme"

	// EnumOfFileSystemTypeForDescribePermissionRulesInputCapacity is a EnumOfFileSystemTypeForDescribePermissionRulesInput enum value
	EnumOfFileSystemTypeForDescribePermissionRulesInputCapacity = "Capacity"

	// EnumOfFileSystemTypeForDescribePermissionRulesInputCache is a EnumOfFileSystemTypeForDescribePermissionRulesInput enum value
	EnumOfFileSystemTypeForDescribePermissionRulesInputCache = "Cache"
)

const (
	// EnumOfRwModeForDescribePermissionRulesOutputRw is a EnumOfRwModeForDescribePermissionRulesOutput enum value
	EnumOfRwModeForDescribePermissionRulesOutputRw = "RW"

	// EnumOfRwModeForDescribePermissionRulesOutputRo is a EnumOfRwModeForDescribePermissionRulesOutput enum value
	EnumOfRwModeForDescribePermissionRulesOutputRo = "RO"
)

const (
	// EnumOfUserModeForDescribePermissionRulesOutputAllSquash is a EnumOfUserModeForDescribePermissionRulesOutput enum value
	EnumOfUserModeForDescribePermissionRulesOutputAllSquash = "All_squash"

	// EnumOfUserModeForDescribePermissionRulesOutputNoAllSquash is a EnumOfUserModeForDescribePermissionRulesOutput enum value
	EnumOfUserModeForDescribePermissionRulesOutputNoAllSquash = "No_all_squash"

	// EnumOfUserModeForDescribePermissionRulesOutputRootSquash is a EnumOfUserModeForDescribePermissionRulesOutput enum value
	EnumOfUserModeForDescribePermissionRulesOutputRootSquash = "Root_squash"

	// EnumOfUserModeForDescribePermissionRulesOutputNoRootSquash is a EnumOfUserModeForDescribePermissionRulesOutput enum value
	EnumOfUserModeForDescribePermissionRulesOutputNoRootSquash = "No_root_squash"
)
