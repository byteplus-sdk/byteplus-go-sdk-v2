// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpn

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteSslVpnClientCertCommon = "DeleteSslVpnClientCert"

// DeleteSslVpnClientCertCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteSslVpnClientCertCommon operation. The "output" return
// value will be populated with the DeleteSslVpnClientCertCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSslVpnClientCertCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSslVpnClientCertCommon Send returns without error.
//
// See DeleteSslVpnClientCertCommon for more information on using the DeleteSslVpnClientCertCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteSslVpnClientCertCommonRequest method.
//    req, resp := client.DeleteSslVpnClientCertCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) DeleteSslVpnClientCertCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteSslVpnClientCertCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteSslVpnClientCertCommon API operation for VPN.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPN's
// API operation DeleteSslVpnClientCertCommon for usage and error information.
func (c *VPN) DeleteSslVpnClientCertCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteSslVpnClientCertCommonRequest(input)
	return out, req.Send()
}

// DeleteSslVpnClientCertCommonWithContext is the same as DeleteSslVpnClientCertCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSslVpnClientCertCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) DeleteSslVpnClientCertCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteSslVpnClientCertCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteSslVpnClientCert = "DeleteSslVpnClientCert"

// DeleteSslVpnClientCertRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteSslVpnClientCert operation. The "output" return
// value will be populated with the DeleteSslVpnClientCertCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSslVpnClientCertCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSslVpnClientCertCommon Send returns without error.
//
// See DeleteSslVpnClientCert for more information on using the DeleteSslVpnClientCert
// API call, and error handling.
//
//    // Example sending a request using the DeleteSslVpnClientCertRequest method.
//    req, resp := client.DeleteSslVpnClientCertRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) DeleteSslVpnClientCertRequest(input *DeleteSslVpnClientCertInput) (req *request.Request, output *DeleteSslVpnClientCertOutput) {
	op := &request.Operation{
		Name:       opDeleteSslVpnClientCert,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteSslVpnClientCertInput{}
	}

	output = &DeleteSslVpnClientCertOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteSslVpnClientCert API operation for VPN.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPN's
// API operation DeleteSslVpnClientCert for usage and error information.
func (c *VPN) DeleteSslVpnClientCert(input *DeleteSslVpnClientCertInput) (*DeleteSslVpnClientCertOutput, error) {
	req, out := c.DeleteSslVpnClientCertRequest(input)
	return out, req.Send()
}

// DeleteSslVpnClientCertWithContext is the same as DeleteSslVpnClientCert with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSslVpnClientCert for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) DeleteSslVpnClientCertWithContext(ctx byteplus.Context, input *DeleteSslVpnClientCertInput, opts ...request.Option) (*DeleteSslVpnClientCertOutput, error) {
	req, out := c.DeleteSslVpnClientCertRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteSslVpnClientCertInput struct {
	_ struct{} `type:"structure"`

	// SslVpnClientCertId is a required field
	SslVpnClientCertId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteSslVpnClientCertInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSslVpnClientCertInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteSslVpnClientCertInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteSslVpnClientCertInput"}
	if s.SslVpnClientCertId == nil {
		invalidParams.Add(request.NewErrParamRequired("SslVpnClientCertId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSslVpnClientCertId sets the SslVpnClientCertId field's value.
func (s *DeleteSslVpnClientCertInput) SetSslVpnClientCertId(v string) *DeleteSslVpnClientCertInput {
	s.SslVpnClientCertId = &v
	return s
}

type DeleteSslVpnClientCertOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteSslVpnClientCertOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSslVpnClientCertOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteSslVpnClientCertOutput) SetRequestId(v string) *DeleteSslVpnClientCertOutput {
	s.RequestId = &v
	return s
}
