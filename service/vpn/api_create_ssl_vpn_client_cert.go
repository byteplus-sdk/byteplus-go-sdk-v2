// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpn

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateSslVpnClientCertCommon = "CreateSslVpnClientCert"

// CreateSslVpnClientCertCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateSslVpnClientCertCommon operation. The "output" return
// value will be populated with the CreateSslVpnClientCertCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSslVpnClientCertCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSslVpnClientCertCommon Send returns without error.
//
// See CreateSslVpnClientCertCommon for more information on using the CreateSslVpnClientCertCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateSslVpnClientCertCommonRequest method.
//    req, resp := client.CreateSslVpnClientCertCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) CreateSslVpnClientCertCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateSslVpnClientCertCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSslVpnClientCertCommon API operation for VPN.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPN's
// API operation CreateSslVpnClientCertCommon for usage and error information.
func (c *VPN) CreateSslVpnClientCertCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateSslVpnClientCertCommonRequest(input)
	return out, req.Send()
}

// CreateSslVpnClientCertCommonWithContext is the same as CreateSslVpnClientCertCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSslVpnClientCertCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) CreateSslVpnClientCertCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateSslVpnClientCertCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateSslVpnClientCert = "CreateSslVpnClientCert"

// CreateSslVpnClientCertRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateSslVpnClientCert operation. The "output" return
// value will be populated with the CreateSslVpnClientCertCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSslVpnClientCertCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSslVpnClientCertCommon Send returns without error.
//
// See CreateSslVpnClientCert for more information on using the CreateSslVpnClientCert
// API call, and error handling.
//
//    // Example sending a request using the CreateSslVpnClientCertRequest method.
//    req, resp := client.CreateSslVpnClientCertRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) CreateSslVpnClientCertRequest(input *CreateSslVpnClientCertInput) (req *request.Request, output *CreateSslVpnClientCertOutput) {
	op := &request.Operation{
		Name:       opCreateSslVpnClientCert,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateSslVpnClientCertInput{}
	}

	output = &CreateSslVpnClientCertOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSslVpnClientCert API operation for VPN.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPN's
// API operation CreateSslVpnClientCert for usage and error information.
func (c *VPN) CreateSslVpnClientCert(input *CreateSslVpnClientCertInput) (*CreateSslVpnClientCertOutput, error) {
	req, out := c.CreateSslVpnClientCertRequest(input)
	return out, req.Send()
}

// CreateSslVpnClientCertWithContext is the same as CreateSslVpnClientCert with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSslVpnClientCert for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) CreateSslVpnClientCertWithContext(ctx byteplus.Context, input *CreateSslVpnClientCertInput, opts ...request.Option) (*CreateSslVpnClientCertOutput, error) {
	req, out := c.CreateSslVpnClientCertRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateSslVpnClientCertInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	Description *string `type:"string"`

	SslVpnClientCertName *string `type:"string"`

	// SslVpnServerId is a required field
	SslVpnServerId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateSslVpnClientCertInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSslVpnClientCertInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateSslVpnClientCertInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateSslVpnClientCertInput"}
	if s.SslVpnServerId == nil {
		invalidParams.Add(request.NewErrParamRequired("SslVpnServerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateSslVpnClientCertInput) SetClientToken(v string) *CreateSslVpnClientCertInput {
	s.ClientToken = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateSslVpnClientCertInput) SetDescription(v string) *CreateSslVpnClientCertInput {
	s.Description = &v
	return s
}

// SetSslVpnClientCertName sets the SslVpnClientCertName field's value.
func (s *CreateSslVpnClientCertInput) SetSslVpnClientCertName(v string) *CreateSslVpnClientCertInput {
	s.SslVpnClientCertName = &v
	return s
}

// SetSslVpnServerId sets the SslVpnServerId field's value.
func (s *CreateSslVpnClientCertInput) SetSslVpnServerId(v string) *CreateSslVpnClientCertInput {
	s.SslVpnServerId = &v
	return s
}

type CreateSslVpnClientCertOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`

	SslVpnClientCertId *string `type:"string"`
}

// String returns the string representation
func (s CreateSslVpnClientCertOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSslVpnClientCertOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *CreateSslVpnClientCertOutput) SetRequestId(v string) *CreateSslVpnClientCertOutput {
	s.RequestId = &v
	return s
}

// SetSslVpnClientCertId sets the SslVpnClientCertId field's value.
func (s *CreateSslVpnClientCertOutput) SetSslVpnClientCertId(v string) *CreateSslVpnClientCertOutput {
	s.SslVpnClientCertId = &v
	return s
}
