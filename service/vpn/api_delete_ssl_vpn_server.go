// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpn

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteSslVpnServerCommon = "DeleteSslVpnServer"

// DeleteSslVpnServerCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteSslVpnServerCommon operation. The "output" return
// value will be populated with the DeleteSslVpnServerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSslVpnServerCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSslVpnServerCommon Send returns without error.
//
// See DeleteSslVpnServerCommon for more information on using the DeleteSslVpnServerCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteSslVpnServerCommonRequest method.
//    req, resp := client.DeleteSslVpnServerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) DeleteSslVpnServerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteSslVpnServerCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteSslVpnServerCommon API operation for VPN.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPN's
// API operation DeleteSslVpnServerCommon for usage and error information.
func (c *VPN) DeleteSslVpnServerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteSslVpnServerCommonRequest(input)
	return out, req.Send()
}

// DeleteSslVpnServerCommonWithContext is the same as DeleteSslVpnServerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSslVpnServerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) DeleteSslVpnServerCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteSslVpnServerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteSslVpnServer = "DeleteSslVpnServer"

// DeleteSslVpnServerRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteSslVpnServer operation. The "output" return
// value will be populated with the DeleteSslVpnServerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSslVpnServerCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSslVpnServerCommon Send returns without error.
//
// See DeleteSslVpnServer for more information on using the DeleteSslVpnServer
// API call, and error handling.
//
//    // Example sending a request using the DeleteSslVpnServerRequest method.
//    req, resp := client.DeleteSslVpnServerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) DeleteSslVpnServerRequest(input *DeleteSslVpnServerInput) (req *request.Request, output *DeleteSslVpnServerOutput) {
	op := &request.Operation{
		Name:       opDeleteSslVpnServer,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteSslVpnServerInput{}
	}

	output = &DeleteSslVpnServerOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteSslVpnServer API operation for VPN.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPN's
// API operation DeleteSslVpnServer for usage and error information.
func (c *VPN) DeleteSslVpnServer(input *DeleteSslVpnServerInput) (*DeleteSslVpnServerOutput, error) {
	req, out := c.DeleteSslVpnServerRequest(input)
	return out, req.Send()
}

// DeleteSslVpnServerWithContext is the same as DeleteSslVpnServer with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSslVpnServer for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) DeleteSslVpnServerWithContext(ctx byteplus.Context, input *DeleteSslVpnServerInput, opts ...request.Option) (*DeleteSslVpnServerOutput, error) {
	req, out := c.DeleteSslVpnServerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteSslVpnServerInput struct {
	_ struct{} `type:"structure"`

	// SslVpnServerId is a required field
	SslVpnServerId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteSslVpnServerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSslVpnServerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteSslVpnServerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteSslVpnServerInput"}
	if s.SslVpnServerId == nil {
		invalidParams.Add(request.NewErrParamRequired("SslVpnServerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSslVpnServerId sets the SslVpnServerId field's value.
func (s *DeleteSslVpnServerInput) SetSslVpnServerId(v string) *DeleteSslVpnServerInput {
	s.SslVpnServerId = &v
	return s
}

type DeleteSslVpnServerOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteSslVpnServerOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSslVpnServerOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteSslVpnServerOutput) SetRequestId(v string) *DeleteSslVpnServerOutput {
	s.RequestId = &v
	return s
}
