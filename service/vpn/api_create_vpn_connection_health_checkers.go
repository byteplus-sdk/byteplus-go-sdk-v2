// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpn

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateVpnConnectionHealthCheckersCommon = "CreateVpnConnectionHealthCheckers"

// CreateVpnConnectionHealthCheckersCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateVpnConnectionHealthCheckersCommon operation. The "output" return
// value will be populated with the CreateVpnConnectionHealthCheckersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateVpnConnectionHealthCheckersCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateVpnConnectionHealthCheckersCommon Send returns without error.
//
// See CreateVpnConnectionHealthCheckersCommon for more information on using the CreateVpnConnectionHealthCheckersCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateVpnConnectionHealthCheckersCommonRequest method.
//    req, resp := client.CreateVpnConnectionHealthCheckersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) CreateVpnConnectionHealthCheckersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateVpnConnectionHealthCheckersCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateVpnConnectionHealthCheckersCommon API operation for VPN.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPN's
// API operation CreateVpnConnectionHealthCheckersCommon for usage and error information.
func (c *VPN) CreateVpnConnectionHealthCheckersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateVpnConnectionHealthCheckersCommonRequest(input)
	return out, req.Send()
}

// CreateVpnConnectionHealthCheckersCommonWithContext is the same as CreateVpnConnectionHealthCheckersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateVpnConnectionHealthCheckersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) CreateVpnConnectionHealthCheckersCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateVpnConnectionHealthCheckersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateVpnConnectionHealthCheckers = "CreateVpnConnectionHealthCheckers"

// CreateVpnConnectionHealthCheckersRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateVpnConnectionHealthCheckers operation. The "output" return
// value will be populated with the CreateVpnConnectionHealthCheckersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateVpnConnectionHealthCheckersCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateVpnConnectionHealthCheckersCommon Send returns without error.
//
// See CreateVpnConnectionHealthCheckers for more information on using the CreateVpnConnectionHealthCheckers
// API call, and error handling.
//
//    // Example sending a request using the CreateVpnConnectionHealthCheckersRequest method.
//    req, resp := client.CreateVpnConnectionHealthCheckersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) CreateVpnConnectionHealthCheckersRequest(input *CreateVpnConnectionHealthCheckersInput) (req *request.Request, output *CreateVpnConnectionHealthCheckersOutput) {
	op := &request.Operation{
		Name:       opCreateVpnConnectionHealthCheckers,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateVpnConnectionHealthCheckersInput{}
	}

	output = &CreateVpnConnectionHealthCheckersOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateVpnConnectionHealthCheckers API operation for VPN.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VPN's
// API operation CreateVpnConnectionHealthCheckers for usage and error information.
func (c *VPN) CreateVpnConnectionHealthCheckers(input *CreateVpnConnectionHealthCheckersInput) (*CreateVpnConnectionHealthCheckersOutput, error) {
	req, out := c.CreateVpnConnectionHealthCheckersRequest(input)
	return out, req.Send()
}

// CreateVpnConnectionHealthCheckersWithContext is the same as CreateVpnConnectionHealthCheckers with the addition of
// the ability to pass a context and additional request options.
//
// See CreateVpnConnectionHealthCheckers for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) CreateVpnConnectionHealthCheckersWithContext(ctx byteplus.Context, input *CreateVpnConnectionHealthCheckersInput, opts ...request.Option) (*CreateVpnConnectionHealthCheckersOutput, error) {
	req, out := c.CreateVpnConnectionHealthCheckersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateVpnConnectionHealthCheckersInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	HealthCheckConfigs []*HealthCheckConfigForCreateVpnConnectionHealthCheckersInput `type:"list"`

	// VpnConnectionId is a required field
	VpnConnectionId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateVpnConnectionHealthCheckersInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVpnConnectionHealthCheckersInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateVpnConnectionHealthCheckersInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateVpnConnectionHealthCheckersInput"}
	if s.VpnConnectionId == nil {
		invalidParams.Add(request.NewErrParamRequired("VpnConnectionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateVpnConnectionHealthCheckersInput) SetClientToken(v string) *CreateVpnConnectionHealthCheckersInput {
	s.ClientToken = &v
	return s
}

// SetHealthCheckConfigs sets the HealthCheckConfigs field's value.
func (s *CreateVpnConnectionHealthCheckersInput) SetHealthCheckConfigs(v []*HealthCheckConfigForCreateVpnConnectionHealthCheckersInput) *CreateVpnConnectionHealthCheckersInput {
	s.HealthCheckConfigs = v
	return s
}

// SetVpnConnectionId sets the VpnConnectionId field's value.
func (s *CreateVpnConnectionHealthCheckersInput) SetVpnConnectionId(v string) *CreateVpnConnectionHealthCheckersInput {
	s.VpnConnectionId = &v
	return s
}

type CreateVpnConnectionHealthCheckersOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	CheckerIds []*string `type:"list"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s CreateVpnConnectionHealthCheckersOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVpnConnectionHealthCheckersOutput) GoString() string {
	return s.String()
}

// SetCheckerIds sets the CheckerIds field's value.
func (s *CreateVpnConnectionHealthCheckersOutput) SetCheckerIds(v []*string) *CreateVpnConnectionHealthCheckersOutput {
	s.CheckerIds = v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateVpnConnectionHealthCheckersOutput) SetRequestId(v string) *CreateVpnConnectionHealthCheckersOutput {
	s.RequestId = &v
	return s
}

type HealthCheckConfigForCreateVpnConnectionHealthCheckersInput struct {
	_ struct{} `type:"structure"`

	CheckInterval *int64 `type:"integer"`

	DownTime *int64 `type:"integer"`

	LocalIp *string `type:"string"`

	RemoteIp *string `type:"string"`

	Timeout *int64 `type:"integer"`

	UpTime *int64 `type:"integer"`
}

// String returns the string representation
func (s HealthCheckConfigForCreateVpnConnectionHealthCheckersInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s HealthCheckConfigForCreateVpnConnectionHealthCheckersInput) GoString() string {
	return s.String()
}

// SetCheckInterval sets the CheckInterval field's value.
func (s *HealthCheckConfigForCreateVpnConnectionHealthCheckersInput) SetCheckInterval(v int64) *HealthCheckConfigForCreateVpnConnectionHealthCheckersInput {
	s.CheckInterval = &v
	return s
}

// SetDownTime sets the DownTime field's value.
func (s *HealthCheckConfigForCreateVpnConnectionHealthCheckersInput) SetDownTime(v int64) *HealthCheckConfigForCreateVpnConnectionHealthCheckersInput {
	s.DownTime = &v
	return s
}

// SetLocalIp sets the LocalIp field's value.
func (s *HealthCheckConfigForCreateVpnConnectionHealthCheckersInput) SetLocalIp(v string) *HealthCheckConfigForCreateVpnConnectionHealthCheckersInput {
	s.LocalIp = &v
	return s
}

// SetRemoteIp sets the RemoteIp field's value.
func (s *HealthCheckConfigForCreateVpnConnectionHealthCheckersInput) SetRemoteIp(v string) *HealthCheckConfigForCreateVpnConnectionHealthCheckersInput {
	s.RemoteIp = &v
	return s
}

// SetTimeout sets the Timeout field's value.
func (s *HealthCheckConfigForCreateVpnConnectionHealthCheckersInput) SetTimeout(v int64) *HealthCheckConfigForCreateVpnConnectionHealthCheckersInput {
	s.Timeout = &v
	return s
}

// SetUpTime sets the UpTime field's value.
func (s *HealthCheckConfigForCreateVpnConnectionHealthCheckersInput) SetUpTime(v int64) *HealthCheckConfigForCreateVpnConnectionHealthCheckersInput {
	s.UpTime = &v
	return s
}
