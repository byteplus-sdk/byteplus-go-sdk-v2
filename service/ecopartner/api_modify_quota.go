// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecopartner

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyQuotaCommon = "ModifyQuota"

// ModifyQuotaCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyQuotaCommon operation. The "output" return
// value will be populated with the ModifyQuotaCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyQuotaCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyQuotaCommon Send returns without error.
//
// See ModifyQuotaCommon for more information on using the ModifyQuotaCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyQuotaCommonRequest method.
//    req, resp := client.ModifyQuotaCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECOPARTNER) ModifyQuotaCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyQuotaCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyQuotaCommon API operation for ECO_PARTNER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECO_PARTNER's
// API operation ModifyQuotaCommon for usage and error information.
func (c *ECOPARTNER) ModifyQuotaCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyQuotaCommonRequest(input)
	return out, req.Send()
}

// ModifyQuotaCommonWithContext is the same as ModifyQuotaCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyQuotaCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECOPARTNER) ModifyQuotaCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyQuotaCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyQuota = "ModifyQuota"

// ModifyQuotaRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyQuota operation. The "output" return
// value will be populated with the ModifyQuotaCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyQuotaCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyQuotaCommon Send returns without error.
//
// See ModifyQuota for more information on using the ModifyQuota
// API call, and error handling.
//
//    // Example sending a request using the ModifyQuotaRequest method.
//    req, resp := client.ModifyQuotaRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECOPARTNER) ModifyQuotaRequest(input *ModifyQuotaInput) (req *request.Request, output *ModifyQuotaOutput) {
	op := &request.Operation{
		Name:       opModifyQuota,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyQuotaInput{}
	}

	output = &ModifyQuotaOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyQuota API operation for ECO_PARTNER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECO_PARTNER's
// API operation ModifyQuota for usage and error information.
func (c *ECOPARTNER) ModifyQuota(input *ModifyQuotaInput) (*ModifyQuotaOutput, error) {
	req, out := c.ModifyQuotaRequest(input)
	return out, req.Send()
}

// ModifyQuotaWithContext is the same as ModifyQuota with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyQuota for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECOPARTNER) ModifyQuotaWithContext(ctx byteplus.Context, input *ModifyQuotaInput, opts ...request.Option) (*ModifyQuotaOutput, error) {
	req, out := c.ModifyQuotaRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyQuotaInput struct {
	_ struct{} `type:"structure"`

	// QuotaAmount is a required field
	QuotaAmount *float64 `type:"float" required:"true"`

	Remarks *string `max:"512" type:"string"`

	// Uid is a required field
	Uid *int32 `min:"10" max:"10" type:"int32" required:"true"`
}

// String returns the string representation
func (s ModifyQuotaInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyQuotaInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyQuotaInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyQuotaInput"}
	if s.QuotaAmount == nil {
		invalidParams.Add(request.NewErrParamRequired("QuotaAmount"))
	}
	if s.Remarks != nil && len(*s.Remarks) > 512 {
		invalidParams.Add(request.NewErrParamMaxLen("Remarks", 512, *s.Remarks))
	}
	if s.Uid == nil {
		invalidParams.Add(request.NewErrParamRequired("Uid"))
	}
	if s.Uid != nil && *s.Uid < 10 {
		invalidParams.Add(request.NewErrParamMinValue("Uid", 10))
	}
	if s.Uid != nil && *s.Uid > 10 {
		invalidParams.Add(request.NewErrParamMaxValue("Uid", 10))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetQuotaAmount sets the QuotaAmount field's value.
func (s *ModifyQuotaInput) SetQuotaAmount(v float64) *ModifyQuotaInput {
	s.QuotaAmount = &v
	return s
}

// SetRemarks sets the Remarks field's value.
func (s *ModifyQuotaInput) SetRemarks(v string) *ModifyQuotaInput {
	s.Remarks = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *ModifyQuotaInput) SetUid(v int32) *ModifyQuotaInput {
	s.Uid = &v
	return s
}

type ModifyQuotaOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	LastUpdatedTime *string `type:"string"`

	OutstandingAmount *float64 `type:"float"`

	QuotaAllocatedAfter *float64 `type:"float"`

	QuotaAllocatedBefore *float64 `type:"float"`

	QuotaBalance *float64 `type:"float"`

	QuotaUnit *string `type:"string"`

	Uid *int32 `type:"int32"`
}

// String returns the string representation
func (s ModifyQuotaOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyQuotaOutput) GoString() string {
	return s.String()
}

// SetLastUpdatedTime sets the LastUpdatedTime field's value.
func (s *ModifyQuotaOutput) SetLastUpdatedTime(v string) *ModifyQuotaOutput {
	s.LastUpdatedTime = &v
	return s
}

// SetOutstandingAmount sets the OutstandingAmount field's value.
func (s *ModifyQuotaOutput) SetOutstandingAmount(v float64) *ModifyQuotaOutput {
	s.OutstandingAmount = &v
	return s
}

// SetQuotaAllocatedAfter sets the QuotaAllocatedAfter field's value.
func (s *ModifyQuotaOutput) SetQuotaAllocatedAfter(v float64) *ModifyQuotaOutput {
	s.QuotaAllocatedAfter = &v
	return s
}

// SetQuotaAllocatedBefore sets the QuotaAllocatedBefore field's value.
func (s *ModifyQuotaOutput) SetQuotaAllocatedBefore(v float64) *ModifyQuotaOutput {
	s.QuotaAllocatedBefore = &v
	return s
}

// SetQuotaBalance sets the QuotaBalance field's value.
func (s *ModifyQuotaOutput) SetQuotaBalance(v float64) *ModifyQuotaOutput {
	s.QuotaBalance = &v
	return s
}

// SetQuotaUnit sets the QuotaUnit field's value.
func (s *ModifyQuotaOutput) SetQuotaUnit(v string) *ModifyQuotaOutput {
	s.QuotaUnit = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *ModifyQuotaOutput) SetUid(v int32) *ModifyQuotaOutput {
	s.Uid = &v
	return s
}
