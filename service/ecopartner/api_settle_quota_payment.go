// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecopartner

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opSettleQuotaPaymentCommon = "SettleQuotaPayment"

// SettleQuotaPaymentCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the SettleQuotaPaymentCommon operation. The "output" return
// value will be populated with the SettleQuotaPaymentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SettleQuotaPaymentCommon Request to send the API call to the service.
// the "output" return value is not valid until after SettleQuotaPaymentCommon Send returns without error.
//
// See SettleQuotaPaymentCommon for more information on using the SettleQuotaPaymentCommon
// API call, and error handling.
//
//    // Example sending a request using the SettleQuotaPaymentCommonRequest method.
//    req, resp := client.SettleQuotaPaymentCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECOPARTNER) SettleQuotaPaymentCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSettleQuotaPaymentCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// SettleQuotaPaymentCommon API operation for ECO_PARTNER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECO_PARTNER's
// API operation SettleQuotaPaymentCommon for usage and error information.
func (c *ECOPARTNER) SettleQuotaPaymentCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SettleQuotaPaymentCommonRequest(input)
	return out, req.Send()
}

// SettleQuotaPaymentCommonWithContext is the same as SettleQuotaPaymentCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SettleQuotaPaymentCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECOPARTNER) SettleQuotaPaymentCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SettleQuotaPaymentCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSettleQuotaPayment = "SettleQuotaPayment"

// SettleQuotaPaymentRequest generates a "byteplus/request.Request" representing the
// client's request for the SettleQuotaPayment operation. The "output" return
// value will be populated with the SettleQuotaPaymentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SettleQuotaPaymentCommon Request to send the API call to the service.
// the "output" return value is not valid until after SettleQuotaPaymentCommon Send returns without error.
//
// See SettleQuotaPayment for more information on using the SettleQuotaPayment
// API call, and error handling.
//
//    // Example sending a request using the SettleQuotaPaymentRequest method.
//    req, resp := client.SettleQuotaPaymentRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECOPARTNER) SettleQuotaPaymentRequest(input *SettleQuotaPaymentInput) (req *request.Request, output *SettleQuotaPaymentOutput) {
	op := &request.Operation{
		Name:       opSettleQuotaPayment,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SettleQuotaPaymentInput{}
	}

	output = &SettleQuotaPaymentOutput{}
	req = c.newRequest(op, input, output)

	return
}

// SettleQuotaPayment API operation for ECO_PARTNER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECO_PARTNER's
// API operation SettleQuotaPayment for usage and error information.
func (c *ECOPARTNER) SettleQuotaPayment(input *SettleQuotaPaymentInput) (*SettleQuotaPaymentOutput, error) {
	req, out := c.SettleQuotaPaymentRequest(input)
	return out, req.Send()
}

// SettleQuotaPaymentWithContext is the same as SettleQuotaPayment with the addition of
// the ability to pass a context and additional request options.
//
// See SettleQuotaPayment for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECOPARTNER) SettleQuotaPaymentWithContext(ctx byteplus.Context, input *SettleQuotaPaymentInput, opts ...request.Option) (*SettleQuotaPaymentOutput, error) {
	req, out := c.SettleQuotaPaymentRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SettleQuotaPaymentInput struct {
	_ struct{} `type:"structure"`

	Remarks *string `max:"256" type:"string"`

	// RepaymentAmount is a required field
	RepaymentAmount *float64 `type:"float" required:"true"`

	// Uid is a required field
	Uid *int32 `min:"10" max:"10" type:"int32" required:"true"`
}

// String returns the string representation
func (s SettleQuotaPaymentInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SettleQuotaPaymentInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SettleQuotaPaymentInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SettleQuotaPaymentInput"}
	if s.Remarks != nil && len(*s.Remarks) > 256 {
		invalidParams.Add(request.NewErrParamMaxLen("Remarks", 256, *s.Remarks))
	}
	if s.RepaymentAmount == nil {
		invalidParams.Add(request.NewErrParamRequired("RepaymentAmount"))
	}
	if s.Uid == nil {
		invalidParams.Add(request.NewErrParamRequired("Uid"))
	}
	if s.Uid != nil && *s.Uid < 10 {
		invalidParams.Add(request.NewErrParamMinValue("Uid", 10))
	}
	if s.Uid != nil && *s.Uid > 10 {
		invalidParams.Add(request.NewErrParamMaxValue("Uid", 10))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRemarks sets the Remarks field's value.
func (s *SettleQuotaPaymentInput) SetRemarks(v string) *SettleQuotaPaymentInput {
	s.Remarks = &v
	return s
}

// SetRepaymentAmount sets the RepaymentAmount field's value.
func (s *SettleQuotaPaymentInput) SetRepaymentAmount(v float64) *SettleQuotaPaymentInput {
	s.RepaymentAmount = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *SettleQuotaPaymentInput) SetUid(v int32) *SettleQuotaPaymentInput {
	s.Uid = &v
	return s
}

type SettleQuotaPaymentOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	LastUpdatedTime *string `type:"string"`

	OutstandingAmountAfter *float64 `type:"float"`

	OutstandingAmountBefore *float64 `type:"float"`

	QuotaAllocated *float64 `type:"float"`

	QuotaBalance *float64 `type:"float"`

	QuotaUnit *string `type:"string"`

	RepaymentAmount *float64 `type:"float"`

	Uid *int32 `type:"int32"`
}

// String returns the string representation
func (s SettleQuotaPaymentOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SettleQuotaPaymentOutput) GoString() string {
	return s.String()
}

// SetLastUpdatedTime sets the LastUpdatedTime field's value.
func (s *SettleQuotaPaymentOutput) SetLastUpdatedTime(v string) *SettleQuotaPaymentOutput {
	s.LastUpdatedTime = &v
	return s
}

// SetOutstandingAmountAfter sets the OutstandingAmountAfter field's value.
func (s *SettleQuotaPaymentOutput) SetOutstandingAmountAfter(v float64) *SettleQuotaPaymentOutput {
	s.OutstandingAmountAfter = &v
	return s
}

// SetOutstandingAmountBefore sets the OutstandingAmountBefore field's value.
func (s *SettleQuotaPaymentOutput) SetOutstandingAmountBefore(v float64) *SettleQuotaPaymentOutput {
	s.OutstandingAmountBefore = &v
	return s
}

// SetQuotaAllocated sets the QuotaAllocated field's value.
func (s *SettleQuotaPaymentOutput) SetQuotaAllocated(v float64) *SettleQuotaPaymentOutput {
	s.QuotaAllocated = &v
	return s
}

// SetQuotaBalance sets the QuotaBalance field's value.
func (s *SettleQuotaPaymentOutput) SetQuotaBalance(v float64) *SettleQuotaPaymentOutput {
	s.QuotaBalance = &v
	return s
}

// SetQuotaUnit sets the QuotaUnit field's value.
func (s *SettleQuotaPaymentOutput) SetQuotaUnit(v string) *SettleQuotaPaymentOutput {
	s.QuotaUnit = &v
	return s
}

// SetRepaymentAmount sets the RepaymentAmount field's value.
func (s *SettleQuotaPaymentOutput) SetRepaymentAmount(v float64) *SettleQuotaPaymentOutput {
	s.RepaymentAmount = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *SettleQuotaPaymentOutput) SetUid(v int32) *SettleQuotaPaymentOutput {
	s.Uid = &v
	return s
}
