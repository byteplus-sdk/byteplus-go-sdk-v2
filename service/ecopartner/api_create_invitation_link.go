// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecopartner

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateInvitationLinkCommon = "CreateInvitationLink"

// CreateInvitationLinkCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateInvitationLinkCommon operation. The "output" return
// value will be populated with the CreateInvitationLinkCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateInvitationLinkCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateInvitationLinkCommon Send returns without error.
//
// See CreateInvitationLinkCommon for more information on using the CreateInvitationLinkCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateInvitationLinkCommonRequest method.
//    req, resp := client.CreateInvitationLinkCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECOPARTNER) CreateInvitationLinkCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateInvitationLinkCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateInvitationLinkCommon API operation for ECO_PARTNER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECO_PARTNER's
// API operation CreateInvitationLinkCommon for usage and error information.
func (c *ECOPARTNER) CreateInvitationLinkCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateInvitationLinkCommonRequest(input)
	return out, req.Send()
}

// CreateInvitationLinkCommonWithContext is the same as CreateInvitationLinkCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateInvitationLinkCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECOPARTNER) CreateInvitationLinkCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateInvitationLinkCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateInvitationLink = "CreateInvitationLink"

// CreateInvitationLinkRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateInvitationLink operation. The "output" return
// value will be populated with the CreateInvitationLinkCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateInvitationLinkCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateInvitationLinkCommon Send returns without error.
//
// See CreateInvitationLink for more information on using the CreateInvitationLink
// API call, and error handling.
//
//    // Example sending a request using the CreateInvitationLinkRequest method.
//    req, resp := client.CreateInvitationLinkRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECOPARTNER) CreateInvitationLinkRequest(input *CreateInvitationLinkInput) (req *request.Request, output *CreateInvitationLinkOutput) {
	op := &request.Operation{
		Name:       opCreateInvitationLink,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateInvitationLinkInput{}
	}

	output = &CreateInvitationLinkOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateInvitationLink API operation for ECO_PARTNER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECO_PARTNER's
// API operation CreateInvitationLink for usage and error information.
func (c *ECOPARTNER) CreateInvitationLink(input *CreateInvitationLinkInput) (*CreateInvitationLinkOutput, error) {
	req, out := c.CreateInvitationLinkRequest(input)
	return out, req.Send()
}

// CreateInvitationLinkWithContext is the same as CreateInvitationLink with the addition of
// the ability to pass a context and additional request options.
//
// See CreateInvitationLink for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECOPARTNER) CreateInvitationLinkWithContext(ctx byteplus.Context, input *CreateInvitationLinkInput, opts ...request.Option) (*CreateInvitationLinkOutput, error) {
	req, out := c.CreateInvitationLinkRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateInvitationLinkInput struct {
	_ struct{} `type:"structure"`

	// InvitationType is a required field
	InvitationType *string `type:"string" required:"true" enum:"EnumOfInvitationTypeForCreateInvitationLinkInput"`

	// RecipientCompany is a required field
	RecipientCompany *string `max:"128" type:"string" required:"true"`

	// RecipientEmail is a required field
	RecipientEmail *string `max:"254" type:"string" required:"true"`

	// SendEmail is a required field
	SendEmail *bool `type:"boolean" required:"true"`
}

// String returns the string representation
func (s CreateInvitationLinkInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateInvitationLinkInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateInvitationLinkInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateInvitationLinkInput"}
	if s.InvitationType == nil {
		invalidParams.Add(request.NewErrParamRequired("InvitationType"))
	}
	if s.RecipientCompany == nil {
		invalidParams.Add(request.NewErrParamRequired("RecipientCompany"))
	}
	if s.RecipientCompany != nil && len(*s.RecipientCompany) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("RecipientCompany", 128, *s.RecipientCompany))
	}
	if s.RecipientEmail == nil {
		invalidParams.Add(request.NewErrParamRequired("RecipientEmail"))
	}
	if s.RecipientEmail != nil && len(*s.RecipientEmail) > 254 {
		invalidParams.Add(request.NewErrParamMaxLen("RecipientEmail", 254, *s.RecipientEmail))
	}
	if s.SendEmail == nil {
		invalidParams.Add(request.NewErrParamRequired("SendEmail"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInvitationType sets the InvitationType field's value.
func (s *CreateInvitationLinkInput) SetInvitationType(v string) *CreateInvitationLinkInput {
	s.InvitationType = &v
	return s
}

// SetRecipientCompany sets the RecipientCompany field's value.
func (s *CreateInvitationLinkInput) SetRecipientCompany(v string) *CreateInvitationLinkInput {
	s.RecipientCompany = &v
	return s
}

// SetRecipientEmail sets the RecipientEmail field's value.
func (s *CreateInvitationLinkInput) SetRecipientEmail(v string) *CreateInvitationLinkInput {
	s.RecipientEmail = &v
	return s
}

// SetSendEmail sets the SendEmail field's value.
func (s *CreateInvitationLinkInput) SetSendEmail(v bool) *CreateInvitationLinkInput {
	s.SendEmail = &v
	return s
}

type CreateInvitationLinkOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Link *string `type:"string"`

	Token *string `type:"string"`
}

// String returns the string representation
func (s CreateInvitationLinkOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateInvitationLinkOutput) GoString() string {
	return s.String()
}

// SetLink sets the Link field's value.
func (s *CreateInvitationLinkOutput) SetLink(v string) *CreateInvitationLinkOutput {
	s.Link = &v
	return s
}

// SetToken sets the Token field's value.
func (s *CreateInvitationLinkOutput) SetToken(v string) *CreateInvitationLinkOutput {
	s.Token = &v
	return s
}

const (
	// EnumOfInvitationTypeForCreateInvitationLinkInputEndCustomer is a EnumOfInvitationTypeForCreateInvitationLinkInput enum value
	EnumOfInvitationTypeForCreateInvitationLinkInputEndCustomer = "EndCustomer"

	// EnumOfInvitationTypeForCreateInvitationLinkInputDistributorReseller is a EnumOfInvitationTypeForCreateInvitationLinkInput enum value
	EnumOfInvitationTypeForCreateInvitationLinkInputDistributorReseller = "Distributor-Reseller"
)
