// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecopartner

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCheckInvitationStatusCommon = "CheckInvitationStatus"

// CheckInvitationStatusCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CheckInvitationStatusCommon operation. The "output" return
// value will be populated with the CheckInvitationStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CheckInvitationStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after CheckInvitationStatusCommon Send returns without error.
//
// See CheckInvitationStatusCommon for more information on using the CheckInvitationStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the CheckInvitationStatusCommonRequest method.
//    req, resp := client.CheckInvitationStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECOPARTNER) CheckInvitationStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCheckInvitationStatusCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CheckInvitationStatusCommon API operation for ECO_PARTNER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECO_PARTNER's
// API operation CheckInvitationStatusCommon for usage and error information.
func (c *ECOPARTNER) CheckInvitationStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CheckInvitationStatusCommonRequest(input)
	return out, req.Send()
}

// CheckInvitationStatusCommonWithContext is the same as CheckInvitationStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CheckInvitationStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECOPARTNER) CheckInvitationStatusCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CheckInvitationStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCheckInvitationStatus = "CheckInvitationStatus"

// CheckInvitationStatusRequest generates a "byteplus/request.Request" representing the
// client's request for the CheckInvitationStatus operation. The "output" return
// value will be populated with the CheckInvitationStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CheckInvitationStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after CheckInvitationStatusCommon Send returns without error.
//
// See CheckInvitationStatus for more information on using the CheckInvitationStatus
// API call, and error handling.
//
//    // Example sending a request using the CheckInvitationStatusRequest method.
//    req, resp := client.CheckInvitationStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECOPARTNER) CheckInvitationStatusRequest(input *CheckInvitationStatusInput) (req *request.Request, output *CheckInvitationStatusOutput) {
	op := &request.Operation{
		Name:       opCheckInvitationStatus,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CheckInvitationStatusInput{}
	}

	output = &CheckInvitationStatusOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CheckInvitationStatus API operation for ECO_PARTNER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECO_PARTNER's
// API operation CheckInvitationStatus for usage and error information.
func (c *ECOPARTNER) CheckInvitationStatus(input *CheckInvitationStatusInput) (*CheckInvitationStatusOutput, error) {
	req, out := c.CheckInvitationStatusRequest(input)
	return out, req.Send()
}

// CheckInvitationStatusWithContext is the same as CheckInvitationStatus with the addition of
// the ability to pass a context and additional request options.
//
// See CheckInvitationStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECOPARTNER) CheckInvitationStatusWithContext(ctx byteplus.Context, input *CheckInvitationStatusInput, opts ...request.Option) (*CheckInvitationStatusOutput, error) {
	req, out := c.CheckInvitationStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CheckInvitationStatusInput struct {
	_ struct{} `type:"structure"`

	// Token is a required field
	Token *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CheckInvitationStatusInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckInvitationStatusInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CheckInvitationStatusInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CheckInvitationStatusInput"}
	if s.Token == nil {
		invalidParams.Add(request.NewErrParamRequired("Token"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetToken sets the Token field's value.
func (s *CheckInvitationStatusInput) SetToken(v string) *CheckInvitationStatusInput {
	s.Token = &v
	return s
}

type CheckInvitationStatusOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ClaimedTime *string `type:"string"`

	ClaimedUserUid *int32 `type:"int32"`

	CreatedTime *string `type:"string"`

	CustomerType *string `type:"string"`

	FailureReason *string `type:"string"`

	PartnerUid *int32 `type:"int32"`

	Status *string `type:"string"`

	Token *string `type:"string"`
}

// String returns the string representation
func (s CheckInvitationStatusOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckInvitationStatusOutput) GoString() string {
	return s.String()
}

// SetClaimedTime sets the ClaimedTime field's value.
func (s *CheckInvitationStatusOutput) SetClaimedTime(v string) *CheckInvitationStatusOutput {
	s.ClaimedTime = &v
	return s
}

// SetClaimedUserUid sets the ClaimedUserUid field's value.
func (s *CheckInvitationStatusOutput) SetClaimedUserUid(v int32) *CheckInvitationStatusOutput {
	s.ClaimedUserUid = &v
	return s
}

// SetCreatedTime sets the CreatedTime field's value.
func (s *CheckInvitationStatusOutput) SetCreatedTime(v string) *CheckInvitationStatusOutput {
	s.CreatedTime = &v
	return s
}

// SetCustomerType sets the CustomerType field's value.
func (s *CheckInvitationStatusOutput) SetCustomerType(v string) *CheckInvitationStatusOutput {
	s.CustomerType = &v
	return s
}

// SetFailureReason sets the FailureReason field's value.
func (s *CheckInvitationStatusOutput) SetFailureReason(v string) *CheckInvitationStatusOutput {
	s.FailureReason = &v
	return s
}

// SetPartnerUid sets the PartnerUid field's value.
func (s *CheckInvitationStatusOutput) SetPartnerUid(v int32) *CheckInvitationStatusOutput {
	s.PartnerUid = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *CheckInvitationStatusOutput) SetStatus(v string) *CheckInvitationStatusOutput {
	s.Status = &v
	return s
}

// SetToken sets the Token field's value.
func (s *CheckInvitationStatusOutput) SetToken(v string) *CheckInvitationStatusOutput {
	s.Token = &v
	return s
}
