// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecopartner

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGetQuotaInformationCommon = "GetQuotaInformation"

// GetQuotaInformationCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GetQuotaInformationCommon operation. The "output" return
// value will be populated with the GetQuotaInformationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetQuotaInformationCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetQuotaInformationCommon Send returns without error.
//
// See GetQuotaInformationCommon for more information on using the GetQuotaInformationCommon
// API call, and error handling.
//
//    // Example sending a request using the GetQuotaInformationCommonRequest method.
//    req, resp := client.GetQuotaInformationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECOPARTNER) GetQuotaInformationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetQuotaInformationCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetQuotaInformationCommon API operation for ECO_PARTNER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECO_PARTNER's
// API operation GetQuotaInformationCommon for usage and error information.
func (c *ECOPARTNER) GetQuotaInformationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetQuotaInformationCommonRequest(input)
	return out, req.Send()
}

// GetQuotaInformationCommonWithContext is the same as GetQuotaInformationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetQuotaInformationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECOPARTNER) GetQuotaInformationCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetQuotaInformationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetQuotaInformation = "GetQuotaInformation"

// GetQuotaInformationRequest generates a "byteplus/request.Request" representing the
// client's request for the GetQuotaInformation operation. The "output" return
// value will be populated with the GetQuotaInformationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetQuotaInformationCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetQuotaInformationCommon Send returns without error.
//
// See GetQuotaInformation for more information on using the GetQuotaInformation
// API call, and error handling.
//
//    // Example sending a request using the GetQuotaInformationRequest method.
//    req, resp := client.GetQuotaInformationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECOPARTNER) GetQuotaInformationRequest(input *GetQuotaInformationInput) (req *request.Request, output *GetQuotaInformationOutput) {
	op := &request.Operation{
		Name:       opGetQuotaInformation,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetQuotaInformationInput{}
	}

	output = &GetQuotaInformationOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetQuotaInformation API operation for ECO_PARTNER.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ECO_PARTNER's
// API operation GetQuotaInformation for usage and error information.
func (c *ECOPARTNER) GetQuotaInformation(input *GetQuotaInformationInput) (*GetQuotaInformationOutput, error) {
	req, out := c.GetQuotaInformationRequest(input)
	return out, req.Send()
}

// GetQuotaInformationWithContext is the same as GetQuotaInformation with the addition of
// the ability to pass a context and additional request options.
//
// See GetQuotaInformation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECOPARTNER) GetQuotaInformationWithContext(ctx byteplus.Context, input *GetQuotaInformationInput, opts ...request.Option) (*GetQuotaInformationOutput, error) {
	req, out := c.GetQuotaInformationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetQuotaInformationInput struct {
	_ struct{} `type:"structure"`

	// Uid is a required field
	Uid *int32 `min:"10" max:"10" type:"int32" required:"true"`
}

// String returns the string representation
func (s GetQuotaInformationInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetQuotaInformationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetQuotaInformationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetQuotaInformationInput"}
	if s.Uid == nil {
		invalidParams.Add(request.NewErrParamRequired("Uid"))
	}
	if s.Uid != nil && *s.Uid < 10 {
		invalidParams.Add(request.NewErrParamMinValue("Uid", 10))
	}
	if s.Uid != nil && *s.Uid > 10 {
		invalidParams.Add(request.NewErrParamMaxValue("Uid", 10))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetUid sets the Uid field's value.
func (s *GetQuotaInformationInput) SetUid(v int32) *GetQuotaInformationInput {
	s.Uid = &v
	return s
}

type GetQuotaInformationOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	LastUpdatedTime *string `type:"string"`

	OutstandingAmount *float64 `type:"float"`

	QuotaAllocated *float64 `type:"float"`

	QuotaBalance *float64 `type:"float"`

	QuotaUnit *string `type:"string"`

	Uid *int32 `type:"int32"`
}

// String returns the string representation
func (s GetQuotaInformationOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetQuotaInformationOutput) GoString() string {
	return s.String()
}

// SetLastUpdatedTime sets the LastUpdatedTime field's value.
func (s *GetQuotaInformationOutput) SetLastUpdatedTime(v string) *GetQuotaInformationOutput {
	s.LastUpdatedTime = &v
	return s
}

// SetOutstandingAmount sets the OutstandingAmount field's value.
func (s *GetQuotaInformationOutput) SetOutstandingAmount(v float64) *GetQuotaInformationOutput {
	s.OutstandingAmount = &v
	return s
}

// SetQuotaAllocated sets the QuotaAllocated field's value.
func (s *GetQuotaInformationOutput) SetQuotaAllocated(v float64) *GetQuotaInformationOutput {
	s.QuotaAllocated = &v
	return s
}

// SetQuotaBalance sets the QuotaBalance field's value.
func (s *GetQuotaInformationOutput) SetQuotaBalance(v float64) *GetQuotaInformationOutput {
	s.QuotaBalance = &v
	return s
}

// SetQuotaUnit sets the QuotaUnit field's value.
func (s *GetQuotaInformationOutput) SetQuotaUnit(v string) *GetQuotaInformationOutput {
	s.QuotaUnit = &v
	return s
}

// SetUid sets the Uid field's value.
func (s *GetQuotaInformationOutput) SetUid(v int32) *GetQuotaInformationOutput {
	s.Uid = &v
	return s
}
