// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package smc

import (
	"fmt"

	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateMigrationJobCommon = "CreateMigrationJob"

// CreateMigrationJobCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateMigrationJobCommon operation. The "output" return
// value will be populated with the CreateMigrationJobCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateMigrationJobCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateMigrationJobCommon Send returns without error.
//
// See CreateMigrationJobCommon for more information on using the CreateMigrationJobCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateMigrationJobCommonRequest method.
//    req, resp := client.CreateMigrationJobCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SMC) CreateMigrationJobCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateMigrationJobCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateMigrationJobCommon API operation for SMC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for SMC's
// API operation CreateMigrationJobCommon for usage and error information.
func (c *SMC) CreateMigrationJobCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateMigrationJobCommonRequest(input)
	return out, req.Send()
}

// CreateMigrationJobCommonWithContext is the same as CreateMigrationJobCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateMigrationJobCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SMC) CreateMigrationJobCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateMigrationJobCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateMigrationJob = "CreateMigrationJob"

// CreateMigrationJobRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateMigrationJob operation. The "output" return
// value will be populated with the CreateMigrationJobCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateMigrationJobCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateMigrationJobCommon Send returns without error.
//
// See CreateMigrationJob for more information on using the CreateMigrationJob
// API call, and error handling.
//
//    // Example sending a request using the CreateMigrationJobRequest method.
//    req, resp := client.CreateMigrationJobRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SMC) CreateMigrationJobRequest(input *CreateMigrationJobInput) (req *request.Request, output *CreateMigrationJobOutput) {
	op := &request.Operation{
		Name:       opCreateMigrationJob,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateMigrationJobInput{}
	}

	output = &CreateMigrationJobOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateMigrationJob API operation for SMC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for SMC's
// API operation CreateMigrationJob for usage and error information.
func (c *SMC) CreateMigrationJob(input *CreateMigrationJobInput) (*CreateMigrationJobOutput, error) {
	req, out := c.CreateMigrationJobRequest(input)
	return out, req.Send()
}

// CreateMigrationJobWithContext is the same as CreateMigrationJob with the addition of
// the ability to pass a context and additional request options.
//
// See CreateMigrationJob for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SMC) CreateMigrationJobWithContext(ctx byteplus.Context, input *CreateMigrationJobInput, opts ...request.Option) (*CreateMigrationJobOutput, error) {
	req, out := c.CreateMigrationJobRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateMigrationJobInput struct {
	_ struct{} `type:"structure"`

	DestinationConfig *DestinationConfigForCreateMigrationJobInput `type:"structure"`

	DiskConfigs []*DiskConfigForCreateMigrationJobInput `type:"list"`

	MigrationJobDescription *string `type:"string"`

	// MigrationJobName is a required field
	MigrationJobName *string `type:"string" required:"true"`

	// MigrationSourceId is a required field
	MigrationSourceId *string `type:"string" required:"true"`

	NetworkConfig *NetworkConfigForCreateMigrationJobInput `type:"structure"`

	ProjectName *string `type:"string"`

	SyncConfig *SyncConfigForCreateMigrationJobInput `type:"structure"`

	Tags []*TagForCreateMigrationJobInput `type:"list"`
}

// String returns the string representation
func (s CreateMigrationJobInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateMigrationJobInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateMigrationJobInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateMigrationJobInput"}
	if s.MigrationJobName == nil {
		invalidParams.Add(request.NewErrParamRequired("MigrationJobName"))
	}
	if s.MigrationSourceId == nil {
		invalidParams.Add(request.NewErrParamRequired("MigrationSourceId"))
	}
	if s.DestinationConfig != nil {
		if err := s.DestinationConfig.Validate(); err != nil {
			invalidParams.AddNested("DestinationConfig", err.(request.ErrInvalidParams))
		}
	}
	if s.DiskConfigs != nil {
		for i, v := range s.DiskConfigs {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "DiskConfigs", i), err.(request.ErrInvalidParams))
			}
		}
	}
	if s.Tags != nil {
		for i, v := range s.Tags {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Tags", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDestinationConfig sets the DestinationConfig field's value.
func (s *CreateMigrationJobInput) SetDestinationConfig(v *DestinationConfigForCreateMigrationJobInput) *CreateMigrationJobInput {
	s.DestinationConfig = v
	return s
}

// SetDiskConfigs sets the DiskConfigs field's value.
func (s *CreateMigrationJobInput) SetDiskConfigs(v []*DiskConfigForCreateMigrationJobInput) *CreateMigrationJobInput {
	s.DiskConfigs = v
	return s
}

// SetMigrationJobDescription sets the MigrationJobDescription field's value.
func (s *CreateMigrationJobInput) SetMigrationJobDescription(v string) *CreateMigrationJobInput {
	s.MigrationJobDescription = &v
	return s
}

// SetMigrationJobName sets the MigrationJobName field's value.
func (s *CreateMigrationJobInput) SetMigrationJobName(v string) *CreateMigrationJobInput {
	s.MigrationJobName = &v
	return s
}

// SetMigrationSourceId sets the MigrationSourceId field's value.
func (s *CreateMigrationJobInput) SetMigrationSourceId(v string) *CreateMigrationJobInput {
	s.MigrationSourceId = &v
	return s
}

// SetNetworkConfig sets the NetworkConfig field's value.
func (s *CreateMigrationJobInput) SetNetworkConfig(v *NetworkConfigForCreateMigrationJobInput) *CreateMigrationJobInput {
	s.NetworkConfig = v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateMigrationJobInput) SetProjectName(v string) *CreateMigrationJobInput {
	s.ProjectName = &v
	return s
}

// SetSyncConfig sets the SyncConfig field's value.
func (s *CreateMigrationJobInput) SetSyncConfig(v *SyncConfigForCreateMigrationJobInput) *CreateMigrationJobInput {
	s.SyncConfig = v
	return s
}

// SetTags sets the Tags field's value.
func (s *CreateMigrationJobInput) SetTags(v []*TagForCreateMigrationJobInput) *CreateMigrationJobInput {
	s.Tags = v
	return s
}

type CreateMigrationJobOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	MigrationJobId *string `type:"string"`
}

// String returns the string representation
func (s CreateMigrationJobOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateMigrationJobOutput) GoString() string {
	return s.String()
}

// SetMigrationJobId sets the MigrationJobId field's value.
func (s *CreateMigrationJobOutput) SetMigrationJobId(v string) *CreateMigrationJobOutput {
	s.MigrationJobId = &v
	return s
}

type DestinationConfigForCreateMigrationJobInput struct {
	_ struct{} `type:"structure"`

	AutoInstallBlkNone *bool `type:"boolean"`

	AutoInstallVirtio11 *bool `type:"boolean"`

	AutoReplicate *bool `type:"boolean"`

	DestinationSystem *string `type:"string"`

	// DestinationType is a required field
	DestinationType *string `type:"string" required:"true"`

	ImageName *string `type:"string"`

	InstanceId *string `type:"string"`

	// Region is a required field
	Region *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DestinationConfigForCreateMigrationJobInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DestinationConfigForCreateMigrationJobInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DestinationConfigForCreateMigrationJobInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DestinationConfigForCreateMigrationJobInput"}
	if s.DestinationType == nil {
		invalidParams.Add(request.NewErrParamRequired("DestinationType"))
	}
	if s.Region == nil {
		invalidParams.Add(request.NewErrParamRequired("Region"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAutoInstallBlkNone sets the AutoInstallBlkNone field's value.
func (s *DestinationConfigForCreateMigrationJobInput) SetAutoInstallBlkNone(v bool) *DestinationConfigForCreateMigrationJobInput {
	s.AutoInstallBlkNone = &v
	return s
}

// SetAutoInstallVirtio11 sets the AutoInstallVirtio11 field's value.
func (s *DestinationConfigForCreateMigrationJobInput) SetAutoInstallVirtio11(v bool) *DestinationConfigForCreateMigrationJobInput {
	s.AutoInstallVirtio11 = &v
	return s
}

// SetAutoReplicate sets the AutoReplicate field's value.
func (s *DestinationConfigForCreateMigrationJobInput) SetAutoReplicate(v bool) *DestinationConfigForCreateMigrationJobInput {
	s.AutoReplicate = &v
	return s
}

// SetDestinationSystem sets the DestinationSystem field's value.
func (s *DestinationConfigForCreateMigrationJobInput) SetDestinationSystem(v string) *DestinationConfigForCreateMigrationJobInput {
	s.DestinationSystem = &v
	return s
}

// SetDestinationType sets the DestinationType field's value.
func (s *DestinationConfigForCreateMigrationJobInput) SetDestinationType(v string) *DestinationConfigForCreateMigrationJobInput {
	s.DestinationType = &v
	return s
}

// SetImageName sets the ImageName field's value.
func (s *DestinationConfigForCreateMigrationJobInput) SetImageName(v string) *DestinationConfigForCreateMigrationJobInput {
	s.ImageName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DestinationConfigForCreateMigrationJobInput) SetInstanceId(v string) *DestinationConfigForCreateMigrationJobInput {
	s.InstanceId = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *DestinationConfigForCreateMigrationJobInput) SetRegion(v string) *DestinationConfigForCreateMigrationJobInput {
	s.Region = &v
	return s
}

type DiskConfigForCreateMigrationJobInput struct {
	_ struct{} `type:"structure"`

	// DiskIndex is a required field
	DiskIndex *int32 `type:"int32" required:"true"`

	DiskSize *int32 `type:"int32"`
}

// String returns the string representation
func (s DiskConfigForCreateMigrationJobInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DiskConfigForCreateMigrationJobInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DiskConfigForCreateMigrationJobInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DiskConfigForCreateMigrationJobInput"}
	if s.DiskIndex == nil {
		invalidParams.Add(request.NewErrParamRequired("DiskIndex"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDiskIndex sets the DiskIndex field's value.
func (s *DiskConfigForCreateMigrationJobInput) SetDiskIndex(v int32) *DiskConfigForCreateMigrationJobInput {
	s.DiskIndex = &v
	return s
}

// SetDiskSize sets the DiskSize field's value.
func (s *DiskConfigForCreateMigrationJobInput) SetDiskSize(v int32) *DiskConfigForCreateMigrationJobInput {
	s.DiskSize = &v
	return s
}

type NetworkConfigForCreateMigrationJobInput struct {
	_ struct{} `type:"structure"`

	BandwidthLimit *int32 `type:"int32"`

	NetworkTransitionMode *string `type:"string"`

	SubnetId *string `type:"string"`

	VpcId *string `type:"string"`
}

// String returns the string representation
func (s NetworkConfigForCreateMigrationJobInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s NetworkConfigForCreateMigrationJobInput) GoString() string {
	return s.String()
}

// SetBandwidthLimit sets the BandwidthLimit field's value.
func (s *NetworkConfigForCreateMigrationJobInput) SetBandwidthLimit(v int32) *NetworkConfigForCreateMigrationJobInput {
	s.BandwidthLimit = &v
	return s
}

// SetNetworkTransitionMode sets the NetworkTransitionMode field's value.
func (s *NetworkConfigForCreateMigrationJobInput) SetNetworkTransitionMode(v string) *NetworkConfigForCreateMigrationJobInput {
	s.NetworkTransitionMode = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *NetworkConfigForCreateMigrationJobInput) SetSubnetId(v string) *NetworkConfigForCreateMigrationJobInput {
	s.SubnetId = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *NetworkConfigForCreateMigrationJobInput) SetVpcId(v string) *NetworkConfigForCreateMigrationJobInput {
	s.VpcId = &v
	return s
}

type SyncConfigForCreateMigrationJobInput struct {
	_ struct{} `type:"structure"`

	SyncInterval *int32 `type:"int32"`

	SyncTimes *int32 `type:"int32"`

	SyncType *string `type:"string"`

	TriggerLastSync *bool `type:"boolean"`
}

// String returns the string representation
func (s SyncConfigForCreateMigrationJobInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SyncConfigForCreateMigrationJobInput) GoString() string {
	return s.String()
}

// SetSyncInterval sets the SyncInterval field's value.
func (s *SyncConfigForCreateMigrationJobInput) SetSyncInterval(v int32) *SyncConfigForCreateMigrationJobInput {
	s.SyncInterval = &v
	return s
}

// SetSyncTimes sets the SyncTimes field's value.
func (s *SyncConfigForCreateMigrationJobInput) SetSyncTimes(v int32) *SyncConfigForCreateMigrationJobInput {
	s.SyncTimes = &v
	return s
}

// SetSyncType sets the SyncType field's value.
func (s *SyncConfigForCreateMigrationJobInput) SetSyncType(v string) *SyncConfigForCreateMigrationJobInput {
	s.SyncType = &v
	return s
}

// SetTriggerLastSync sets the TriggerLastSync field's value.
func (s *SyncConfigForCreateMigrationJobInput) SetTriggerLastSync(v bool) *SyncConfigForCreateMigrationJobInput {
	s.TriggerLastSync = &v
	return s
}

type TagForCreateMigrationJobInput struct {
	_ struct{} `type:"structure"`

	// Key is a required field
	Key *string `type:"string" required:"true"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForCreateMigrationJobInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForCreateMigrationJobInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TagForCreateMigrationJobInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "TagForCreateMigrationJobInput"}
	if s.Key == nil {
		invalidParams.Add(request.NewErrParamRequired("Key"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetKey sets the Key field's value.
func (s *TagForCreateMigrationJobInput) SetKey(v string) *TagForCreateMigrationJobInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForCreateMigrationJobInput) SetValue(v string) *TagForCreateMigrationJobInput {
	s.Value = &v
	return s
}
