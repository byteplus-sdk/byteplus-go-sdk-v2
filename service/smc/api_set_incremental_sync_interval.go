// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package smc

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opSetIncrementalSyncIntervalCommon = "SetIncrementalSyncInterval"

// SetIncrementalSyncIntervalCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the SetIncrementalSyncIntervalCommon operation. The "output" return
// value will be populated with the SetIncrementalSyncIntervalCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetIncrementalSyncIntervalCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetIncrementalSyncIntervalCommon Send returns without error.
//
// See SetIncrementalSyncIntervalCommon for more information on using the SetIncrementalSyncIntervalCommon
// API call, and error handling.
//
//    // Example sending a request using the SetIncrementalSyncIntervalCommonRequest method.
//    req, resp := client.SetIncrementalSyncIntervalCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SMC) SetIncrementalSyncIntervalCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSetIncrementalSyncIntervalCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// SetIncrementalSyncIntervalCommon API operation for SMC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for SMC's
// API operation SetIncrementalSyncIntervalCommon for usage and error information.
func (c *SMC) SetIncrementalSyncIntervalCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SetIncrementalSyncIntervalCommonRequest(input)
	return out, req.Send()
}

// SetIncrementalSyncIntervalCommonWithContext is the same as SetIncrementalSyncIntervalCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SetIncrementalSyncIntervalCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SMC) SetIncrementalSyncIntervalCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SetIncrementalSyncIntervalCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSetIncrementalSyncInterval = "SetIncrementalSyncInterval"

// SetIncrementalSyncIntervalRequest generates a "byteplus/request.Request" representing the
// client's request for the SetIncrementalSyncInterval operation. The "output" return
// value will be populated with the SetIncrementalSyncIntervalCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetIncrementalSyncIntervalCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetIncrementalSyncIntervalCommon Send returns without error.
//
// See SetIncrementalSyncInterval for more information on using the SetIncrementalSyncInterval
// API call, and error handling.
//
//    // Example sending a request using the SetIncrementalSyncIntervalRequest method.
//    req, resp := client.SetIncrementalSyncIntervalRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SMC) SetIncrementalSyncIntervalRequest(input *SetIncrementalSyncIntervalInput) (req *request.Request, output *SetIncrementalSyncIntervalOutput) {
	op := &request.Operation{
		Name:       opSetIncrementalSyncInterval,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SetIncrementalSyncIntervalInput{}
	}

	output = &SetIncrementalSyncIntervalOutput{}
	req = c.newRequest(op, input, output)

	return
}

// SetIncrementalSyncInterval API operation for SMC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for SMC's
// API operation SetIncrementalSyncInterval for usage and error information.
func (c *SMC) SetIncrementalSyncInterval(input *SetIncrementalSyncIntervalInput) (*SetIncrementalSyncIntervalOutput, error) {
	req, out := c.SetIncrementalSyncIntervalRequest(input)
	return out, req.Send()
}

// SetIncrementalSyncIntervalWithContext is the same as SetIncrementalSyncInterval with the addition of
// the ability to pass a context and additional request options.
//
// See SetIncrementalSyncInterval for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SMC) SetIncrementalSyncIntervalWithContext(ctx byteplus.Context, input *SetIncrementalSyncIntervalInput, opts ...request.Option) (*SetIncrementalSyncIntervalOutput, error) {
	req, out := c.SetIncrementalSyncIntervalRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SetIncrementalSyncIntervalInput struct {
	_ struct{} `type:"structure"`

	// MigrationJobId is a required field
	MigrationJobId *string `type:"string" required:"true"`

	SyncInterval *int32 `type:"int32"`
}

// String returns the string representation
func (s SetIncrementalSyncIntervalInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SetIncrementalSyncIntervalInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SetIncrementalSyncIntervalInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SetIncrementalSyncIntervalInput"}
	if s.MigrationJobId == nil {
		invalidParams.Add(request.NewErrParamRequired("MigrationJobId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetMigrationJobId sets the MigrationJobId field's value.
func (s *SetIncrementalSyncIntervalInput) SetMigrationJobId(v string) *SetIncrementalSyncIntervalInput {
	s.MigrationJobId = &v
	return s
}

// SetSyncInterval sets the SyncInterval field's value.
func (s *SetIncrementalSyncIntervalInput) SetSyncInterval(v int32) *SetIncrementalSyncIntervalInput {
	s.SyncInterval = &v
	return s
}

type SetIncrementalSyncIntervalOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s SetIncrementalSyncIntervalOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SetIncrementalSyncIntervalOutput) GoString() string {
	return s.String()
}
