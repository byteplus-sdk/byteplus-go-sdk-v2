// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package smc

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUnTagResourcesCommon = "UnTagResources"

// UnTagResourcesCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UnTagResourcesCommon operation. The "output" return
// value will be populated with the UnTagResourcesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UnTagResourcesCommon Request to send the API call to the service.
// the "output" return value is not valid until after UnTagResourcesCommon Send returns without error.
//
// See UnTagResourcesCommon for more information on using the UnTagResourcesCommon
// API call, and error handling.
//
//    // Example sending a request using the UnTagResourcesCommonRequest method.
//    req, resp := client.UnTagResourcesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SMC) UnTagResourcesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUnTagResourcesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UnTagResourcesCommon API operation for SMC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for SMC's
// API operation UnTagResourcesCommon for usage and error information.
func (c *SMC) UnTagResourcesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UnTagResourcesCommonRequest(input)
	return out, req.Send()
}

// UnTagResourcesCommonWithContext is the same as UnTagResourcesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UnTagResourcesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SMC) UnTagResourcesCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UnTagResourcesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUnTagResources = "UnTagResources"

// UnTagResourcesRequest generates a "byteplus/request.Request" representing the
// client's request for the UnTagResources operation. The "output" return
// value will be populated with the UnTagResourcesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UnTagResourcesCommon Request to send the API call to the service.
// the "output" return value is not valid until after UnTagResourcesCommon Send returns without error.
//
// See UnTagResources for more information on using the UnTagResources
// API call, and error handling.
//
//    // Example sending a request using the UnTagResourcesRequest method.
//    req, resp := client.UnTagResourcesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SMC) UnTagResourcesRequest(input *UnTagResourcesInput) (req *request.Request, output *UnTagResourcesOutput) {
	op := &request.Operation{
		Name:       opUnTagResources,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UnTagResourcesInput{}
	}

	output = &UnTagResourcesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// UnTagResources API operation for SMC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for SMC's
// API operation UnTagResources for usage and error information.
func (c *SMC) UnTagResources(input *UnTagResourcesInput) (*UnTagResourcesOutput, error) {
	req, out := c.UnTagResourcesRequest(input)
	return out, req.Send()
}

// UnTagResourcesWithContext is the same as UnTagResources with the addition of
// the ability to pass a context and additional request options.
//
// See UnTagResources for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SMC) UnTagResourcesWithContext(ctx byteplus.Context, input *UnTagResourcesInput, opts ...request.Option) (*UnTagResourcesOutput, error) {
	req, out := c.UnTagResourcesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ErrorForUnTagResourcesOutput struct {
	_ struct{} `type:"structure"`

	Code *string `type:"string"`

	Message *string `type:"string"`
}

// String returns the string representation
func (s ErrorForUnTagResourcesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ErrorForUnTagResourcesOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *ErrorForUnTagResourcesOutput) SetCode(v string) *ErrorForUnTagResourcesOutput {
	s.Code = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *ErrorForUnTagResourcesOutput) SetMessage(v string) *ErrorForUnTagResourcesOutput {
	s.Message = &v
	return s
}

type OperationDetailForUnTagResourcesOutput struct {
	_ struct{} `type:"structure"`

	Error *ErrorForUnTagResourcesOutput `type:"structure"`

	ResourceId *string `type:"string"`
}

// String returns the string representation
func (s OperationDetailForUnTagResourcesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationDetailForUnTagResourcesOutput) GoString() string {
	return s.String()
}

// SetError sets the Error field's value.
func (s *OperationDetailForUnTagResourcesOutput) SetError(v *ErrorForUnTagResourcesOutput) *OperationDetailForUnTagResourcesOutput {
	s.Error = v
	return s
}

// SetResourceId sets the ResourceId field's value.
func (s *OperationDetailForUnTagResourcesOutput) SetResourceId(v string) *OperationDetailForUnTagResourcesOutput {
	s.ResourceId = &v
	return s
}

type UnTagResourcesInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	// ResourceIds is a required field
	ResourceIds []*string `type:"list" required:"true"`

	// ResourceType is a required field
	ResourceType *string `type:"string" required:"true"`

	// TagKeys is a required field
	TagKeys []*string `type:"list" required:"true"`
}

// String returns the string representation
func (s UnTagResourcesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UnTagResourcesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UnTagResourcesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UnTagResourcesInput"}
	if s.ResourceIds == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceIds"))
	}
	if s.ResourceType == nil {
		invalidParams.Add(request.NewErrParamRequired("ResourceType"))
	}
	if s.TagKeys == nil {
		invalidParams.Add(request.NewErrParamRequired("TagKeys"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *UnTagResourcesInput) SetClientToken(v string) *UnTagResourcesInput {
	s.ClientToken = &v
	return s
}

// SetResourceIds sets the ResourceIds field's value.
func (s *UnTagResourcesInput) SetResourceIds(v []*string) *UnTagResourcesInput {
	s.ResourceIds = v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *UnTagResourcesInput) SetResourceType(v string) *UnTagResourcesInput {
	s.ResourceType = &v
	return s
}

// SetTagKeys sets the TagKeys field's value.
func (s *UnTagResourcesInput) SetTagKeys(v []*string) *UnTagResourcesInput {
	s.TagKeys = v
	return s
}

type UnTagResourcesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	OperationDetails []*OperationDetailForUnTagResourcesOutput `type:"list"`
}

// String returns the string representation
func (s UnTagResourcesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UnTagResourcesOutput) GoString() string {
	return s.String()
}

// SetOperationDetails sets the OperationDetails field's value.
func (s *UnTagResourcesOutput) SetOperationDetails(v []*OperationDetailForUnTagResourcesOutput) *UnTagResourcesOutput {
	s.OperationDetails = v
	return s
}
