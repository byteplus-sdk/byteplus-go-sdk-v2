// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package smc

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opTriggerLastIncrementalSyncCommon = "TriggerLastIncrementalSync"

// TriggerLastIncrementalSyncCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the TriggerLastIncrementalSyncCommon operation. The "output" return
// value will be populated with the TriggerLastIncrementalSyncCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TriggerLastIncrementalSyncCommon Request to send the API call to the service.
// the "output" return value is not valid until after TriggerLastIncrementalSyncCommon Send returns without error.
//
// See TriggerLastIncrementalSyncCommon for more information on using the TriggerLastIncrementalSyncCommon
// API call, and error handling.
//
//    // Example sending a request using the TriggerLastIncrementalSyncCommonRequest method.
//    req, resp := client.TriggerLastIncrementalSyncCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SMC) TriggerLastIncrementalSyncCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opTriggerLastIncrementalSyncCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// TriggerLastIncrementalSyncCommon API operation for SMC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for SMC's
// API operation TriggerLastIncrementalSyncCommon for usage and error information.
func (c *SMC) TriggerLastIncrementalSyncCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.TriggerLastIncrementalSyncCommonRequest(input)
	return out, req.Send()
}

// TriggerLastIncrementalSyncCommonWithContext is the same as TriggerLastIncrementalSyncCommon with the addition of
// the ability to pass a context and additional request options.
//
// See TriggerLastIncrementalSyncCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SMC) TriggerLastIncrementalSyncCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.TriggerLastIncrementalSyncCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opTriggerLastIncrementalSync = "TriggerLastIncrementalSync"

// TriggerLastIncrementalSyncRequest generates a "byteplus/request.Request" representing the
// client's request for the TriggerLastIncrementalSync operation. The "output" return
// value will be populated with the TriggerLastIncrementalSyncCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TriggerLastIncrementalSyncCommon Request to send the API call to the service.
// the "output" return value is not valid until after TriggerLastIncrementalSyncCommon Send returns without error.
//
// See TriggerLastIncrementalSync for more information on using the TriggerLastIncrementalSync
// API call, and error handling.
//
//    // Example sending a request using the TriggerLastIncrementalSyncRequest method.
//    req, resp := client.TriggerLastIncrementalSyncRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SMC) TriggerLastIncrementalSyncRequest(input *TriggerLastIncrementalSyncInput) (req *request.Request, output *TriggerLastIncrementalSyncOutput) {
	op := &request.Operation{
		Name:       opTriggerLastIncrementalSync,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TriggerLastIncrementalSyncInput{}
	}

	output = &TriggerLastIncrementalSyncOutput{}
	req = c.newRequest(op, input, output)

	return
}

// TriggerLastIncrementalSync API operation for SMC.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for SMC's
// API operation TriggerLastIncrementalSync for usage and error information.
func (c *SMC) TriggerLastIncrementalSync(input *TriggerLastIncrementalSyncInput) (*TriggerLastIncrementalSyncOutput, error) {
	req, out := c.TriggerLastIncrementalSyncRequest(input)
	return out, req.Send()
}

// TriggerLastIncrementalSyncWithContext is the same as TriggerLastIncrementalSync with the addition of
// the ability to pass a context and additional request options.
//
// See TriggerLastIncrementalSync for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SMC) TriggerLastIncrementalSyncWithContext(ctx byteplus.Context, input *TriggerLastIncrementalSyncInput, opts ...request.Option) (*TriggerLastIncrementalSyncOutput, error) {
	req, out := c.TriggerLastIncrementalSyncRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type TriggerLastIncrementalSyncInput struct {
	_ struct{} `type:"structure"`

	// MigrationJobId is a required field
	MigrationJobId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s TriggerLastIncrementalSyncInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TriggerLastIncrementalSyncInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TriggerLastIncrementalSyncInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "TriggerLastIncrementalSyncInput"}
	if s.MigrationJobId == nil {
		invalidParams.Add(request.NewErrParamRequired("MigrationJobId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetMigrationJobId sets the MigrationJobId field's value.
func (s *TriggerLastIncrementalSyncInput) SetMigrationJobId(v string) *TriggerLastIncrementalSyncInput {
	s.MigrationJobId = &v
	return s
}

type TriggerLastIncrementalSyncOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s TriggerLastIncrementalSyncOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TriggerLastIncrementalSyncOutput) GoString() string {
	return s.String()
}
