// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeBigKeysCommon = "DescribeBigKeys"

// DescribeBigKeysCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeBigKeysCommon operation. The "output" return
// value will be populated with the DescribeBigKeysCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBigKeysCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBigKeysCommon Send returns without error.
//
// See DescribeBigKeysCommon for more information on using the DescribeBigKeysCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeBigKeysCommonRequest method.
//    req, resp := client.DescribeBigKeysCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeBigKeysCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeBigKeysCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBigKeysCommon API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeBigKeysCommon for usage and error information.
func (c *REDIS) DescribeBigKeysCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeBigKeysCommonRequest(input)
	return out, req.Send()
}

// DescribeBigKeysCommonWithContext is the same as DescribeBigKeysCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBigKeysCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeBigKeysCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeBigKeysCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBigKeys = "DescribeBigKeys"

// DescribeBigKeysRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeBigKeys operation. The "output" return
// value will be populated with the DescribeBigKeysCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBigKeysCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBigKeysCommon Send returns without error.
//
// See DescribeBigKeys for more information on using the DescribeBigKeys
// API call, and error handling.
//
//    // Example sending a request using the DescribeBigKeysRequest method.
//    req, resp := client.DescribeBigKeysRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeBigKeysRequest(input *DescribeBigKeysInput) (req *request.Request, output *DescribeBigKeysOutput) {
	op := &request.Operation{
		Name:       opDescribeBigKeys,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeBigKeysInput{}
	}

	output = &DescribeBigKeysOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBigKeys API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeBigKeys for usage and error information.
func (c *REDIS) DescribeBigKeys(input *DescribeBigKeysInput) (*DescribeBigKeysOutput, error) {
	req, out := c.DescribeBigKeysRequest(input)
	return out, req.Send()
}

// DescribeBigKeysWithContext is the same as DescribeBigKeys with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBigKeys for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeBigKeysWithContext(ctx byteplus.Context, input *DescribeBigKeysInput, opts ...request.Option) (*DescribeBigKeysOutput, error) {
	req, out := c.DescribeBigKeysRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BigKeyForDescribeBigKeysOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DBName *string `type:"string" json:",omitempty"`

	KeyInfo *string `type:"string" json:",omitempty"`

	KeyType *string `type:"string" json:",omitempty"`

	ValueLen *string `type:"string" json:",omitempty"`

	ValueSize *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s BigKeyForDescribeBigKeysOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s BigKeyForDescribeBigKeysOutput) GoString() string {
	return s.String()
}

// SetDBName sets the DBName field's value.
func (s *BigKeyForDescribeBigKeysOutput) SetDBName(v string) *BigKeyForDescribeBigKeysOutput {
	s.DBName = &v
	return s
}

// SetKeyInfo sets the KeyInfo field's value.
func (s *BigKeyForDescribeBigKeysOutput) SetKeyInfo(v string) *BigKeyForDescribeBigKeysOutput {
	s.KeyInfo = &v
	return s
}

// SetKeyType sets the KeyType field's value.
func (s *BigKeyForDescribeBigKeysOutput) SetKeyType(v string) *BigKeyForDescribeBigKeysOutput {
	s.KeyType = &v
	return s
}

// SetValueLen sets the ValueLen field's value.
func (s *BigKeyForDescribeBigKeysOutput) SetValueLen(v string) *BigKeyForDescribeBigKeysOutput {
	s.ValueLen = &v
	return s
}

// SetValueSize sets the ValueSize field's value.
func (s *BigKeyForDescribeBigKeysOutput) SetValueSize(v string) *BigKeyForDescribeBigKeysOutput {
	s.ValueSize = &v
	return s
}

type DescribeBigKeysInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	KeyType *string `type:"string" json:",omitempty"`

	OrderBy *string `type:"string" json:",omitempty"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`

	QueryEndTime *string `type:"string" json:",omitempty"`

	QueryStartTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeBigKeysInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBigKeysInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeBigKeysInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeBigKeysInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeBigKeysInput) SetInstanceId(v string) *DescribeBigKeysInput {
	s.InstanceId = &v
	return s
}

// SetKeyType sets the KeyType field's value.
func (s *DescribeBigKeysInput) SetKeyType(v string) *DescribeBigKeysInput {
	s.KeyType = &v
	return s
}

// SetOrderBy sets the OrderBy field's value.
func (s *DescribeBigKeysInput) SetOrderBy(v string) *DescribeBigKeysInput {
	s.OrderBy = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeBigKeysInput) SetPageSize(v int32) *DescribeBigKeysInput {
	s.PageSize = &v
	return s
}

// SetQueryEndTime sets the QueryEndTime field's value.
func (s *DescribeBigKeysInput) SetQueryEndTime(v string) *DescribeBigKeysInput {
	s.QueryEndTime = &v
	return s
}

// SetQueryStartTime sets the QueryStartTime field's value.
func (s *DescribeBigKeysInput) SetQueryStartTime(v string) *DescribeBigKeysInput {
	s.QueryStartTime = &v
	return s
}

type DescribeBigKeysOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	BigKey []*BigKeyForDescribeBigKeysOutput `type:"list" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeBigKeysOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBigKeysOutput) GoString() string {
	return s.String()
}

// SetBigKey sets the BigKey field's value.
func (s *DescribeBigKeysOutput) SetBigKey(v []*BigKeyForDescribeBigKeysOutput) *DescribeBigKeysOutput {
	s.BigKey = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeBigKeysOutput) SetInstanceId(v string) *DescribeBigKeysOutput {
	s.InstanceId = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeBigKeysOutput) SetTotal(v int32) *DescribeBigKeysOutput {
	s.Total = &v
	return s
}
