// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeEnterpriseZonesCommon = "DescribeEnterpriseZones"

// DescribeEnterpriseZonesCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeEnterpriseZonesCommon operation. The "output" return
// value will be populated with the DescribeEnterpriseZonesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeEnterpriseZonesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeEnterpriseZonesCommon Send returns without error.
//
// See DescribeEnterpriseZonesCommon for more information on using the DescribeEnterpriseZonesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeEnterpriseZonesCommonRequest method.
//    req, resp := client.DescribeEnterpriseZonesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeEnterpriseZonesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeEnterpriseZonesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeEnterpriseZonesCommon API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeEnterpriseZonesCommon for usage and error information.
func (c *REDIS) DescribeEnterpriseZonesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeEnterpriseZonesCommonRequest(input)
	return out, req.Send()
}

// DescribeEnterpriseZonesCommonWithContext is the same as DescribeEnterpriseZonesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEnterpriseZonesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeEnterpriseZonesCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeEnterpriseZonesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeEnterpriseZones = "DescribeEnterpriseZones"

// DescribeEnterpriseZonesRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeEnterpriseZones operation. The "output" return
// value will be populated with the DescribeEnterpriseZonesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeEnterpriseZonesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeEnterpriseZonesCommon Send returns without error.
//
// See DescribeEnterpriseZones for more information on using the DescribeEnterpriseZones
// API call, and error handling.
//
//    // Example sending a request using the DescribeEnterpriseZonesRequest method.
//    req, resp := client.DescribeEnterpriseZonesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeEnterpriseZonesRequest(input *DescribeEnterpriseZonesInput) (req *request.Request, output *DescribeEnterpriseZonesOutput) {
	op := &request.Operation{
		Name:       opDescribeEnterpriseZones,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeEnterpriseZonesInput{}
	}

	output = &DescribeEnterpriseZonesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeEnterpriseZones API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeEnterpriseZones for usage and error information.
func (c *REDIS) DescribeEnterpriseZones(input *DescribeEnterpriseZonesInput) (*DescribeEnterpriseZonesOutput, error) {
	req, out := c.DescribeEnterpriseZonesRequest(input)
	return out, req.Send()
}

// DescribeEnterpriseZonesWithContext is the same as DescribeEnterpriseZones with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEnterpriseZones for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeEnterpriseZonesWithContext(ctx byteplus.Context, input *DescribeEnterpriseZonesInput, opts ...request.Option) (*DescribeEnterpriseZonesOutput, error) {
	req, out := c.DescribeEnterpriseZonesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeEnterpriseZonesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// RegionId is a required field
	RegionId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeEnterpriseZonesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEnterpriseZonesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeEnterpriseZonesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeEnterpriseZonesInput"}
	if s.RegionId == nil {
		invalidParams.Add(request.NewErrParamRequired("RegionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRegionId sets the RegionId field's value.
func (s *DescribeEnterpriseZonesInput) SetRegionId(v string) *DescribeEnterpriseZonesInput {
	s.RegionId = &v
	return s
}

type DescribeEnterpriseZonesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Zones []*ZoneForDescribeEnterpriseZonesOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeEnterpriseZonesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEnterpriseZonesOutput) GoString() string {
	return s.String()
}

// SetZones sets the Zones field's value.
func (s *DescribeEnterpriseZonesOutput) SetZones(v []*ZoneForDescribeEnterpriseZonesOutput) *DescribeEnterpriseZonesOutput {
	s.Zones = v
	return s
}

type ZoneForDescribeEnterpriseZonesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ZoneId *string `type:"string" json:",omitempty"`

	ZoneName *string `type:"string" json:",omitempty"`

	ZoneStatus *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ZoneForDescribeEnterpriseZonesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ZoneForDescribeEnterpriseZonesOutput) GoString() string {
	return s.String()
}

// SetZoneId sets the ZoneId field's value.
func (s *ZoneForDescribeEnterpriseZonesOutput) SetZoneId(v string) *ZoneForDescribeEnterpriseZonesOutput {
	s.ZoneId = &v
	return s
}

// SetZoneName sets the ZoneName field's value.
func (s *ZoneForDescribeEnterpriseZonesOutput) SetZoneName(v string) *ZoneForDescribeEnterpriseZonesOutput {
	s.ZoneName = &v
	return s
}

// SetZoneStatus sets the ZoneStatus field's value.
func (s *ZoneForDescribeEnterpriseZonesOutput) SetZoneStatus(v int32) *ZoneForDescribeEnterpriseZonesOutput {
	s.ZoneStatus = &v
	return s
}
