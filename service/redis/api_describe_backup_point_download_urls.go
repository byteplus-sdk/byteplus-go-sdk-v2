// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeBackupPointDownloadUrlsCommon = "DescribeBackupPointDownloadUrls"

// DescribeBackupPointDownloadUrlsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeBackupPointDownloadUrlsCommon operation. The "output" return
// value will be populated with the DescribeBackupPointDownloadUrlsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupPointDownloadUrlsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupPointDownloadUrlsCommon Send returns without error.
//
// See DescribeBackupPointDownloadUrlsCommon for more information on using the DescribeBackupPointDownloadUrlsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeBackupPointDownloadUrlsCommonRequest method.
//    req, resp := client.DescribeBackupPointDownloadUrlsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeBackupPointDownloadUrlsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeBackupPointDownloadUrlsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackupPointDownloadUrlsCommon API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeBackupPointDownloadUrlsCommon for usage and error information.
func (c *REDIS) DescribeBackupPointDownloadUrlsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupPointDownloadUrlsCommonRequest(input)
	return out, req.Send()
}

// DescribeBackupPointDownloadUrlsCommonWithContext is the same as DescribeBackupPointDownloadUrlsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackupPointDownloadUrlsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeBackupPointDownloadUrlsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupPointDownloadUrlsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBackupPointDownloadUrls = "DescribeBackupPointDownloadUrls"

// DescribeBackupPointDownloadUrlsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeBackupPointDownloadUrls operation. The "output" return
// value will be populated with the DescribeBackupPointDownloadUrlsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupPointDownloadUrlsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupPointDownloadUrlsCommon Send returns without error.
//
// See DescribeBackupPointDownloadUrls for more information on using the DescribeBackupPointDownloadUrls
// API call, and error handling.
//
//    // Example sending a request using the DescribeBackupPointDownloadUrlsRequest method.
//    req, resp := client.DescribeBackupPointDownloadUrlsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeBackupPointDownloadUrlsRequest(input *DescribeBackupPointDownloadUrlsInput) (req *request.Request, output *DescribeBackupPointDownloadUrlsOutput) {
	op := &request.Operation{
		Name:       opDescribeBackupPointDownloadUrls,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeBackupPointDownloadUrlsInput{}
	}

	output = &DescribeBackupPointDownloadUrlsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackupPointDownloadUrls API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeBackupPointDownloadUrls for usage and error information.
func (c *REDIS) DescribeBackupPointDownloadUrls(input *DescribeBackupPointDownloadUrlsInput) (*DescribeBackupPointDownloadUrlsOutput, error) {
	req, out := c.DescribeBackupPointDownloadUrlsRequest(input)
	return out, req.Send()
}

// DescribeBackupPointDownloadUrlsWithContext is the same as DescribeBackupPointDownloadUrls with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackupPointDownloadUrls for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeBackupPointDownloadUrlsWithContext(ctx byteplus.Context, input *DescribeBackupPointDownloadUrlsInput, opts ...request.Option) (*DescribeBackupPointDownloadUrlsOutput, error) {
	req, out := c.DescribeBackupPointDownloadUrlsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	PrivateDownloadUrl *string `type:"string" json:",omitempty"`

	PublicDownloadUrl *string `type:"string" json:",omitempty"`

	RdbFileSize *int64 `type:"int64" json:",omitempty"`

	ShardId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput) GoString() string {
	return s.String()
}

// SetPrivateDownloadUrl sets the PrivateDownloadUrl field's value.
func (s *BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput) SetPrivateDownloadUrl(v string) *BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput {
	s.PrivateDownloadUrl = &v
	return s
}

// SetPublicDownloadUrl sets the PublicDownloadUrl field's value.
func (s *BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput) SetPublicDownloadUrl(v string) *BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput {
	s.PublicDownloadUrl = &v
	return s
}

// SetRdbFileSize sets the RdbFileSize field's value.
func (s *BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput) SetRdbFileSize(v int64) *BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput {
	s.RdbFileSize = &v
	return s
}

// SetShardId sets the ShardId field's value.
func (s *BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput) SetShardId(v string) *BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput {
	s.ShardId = &v
	return s
}

type DescribeBackupPointDownloadUrlsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// BackupPointId is a required field
	BackupPointId *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeBackupPointDownloadUrlsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupPointDownloadUrlsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeBackupPointDownloadUrlsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeBackupPointDownloadUrlsInput"}
	if s.BackupPointId == nil {
		invalidParams.Add(request.NewErrParamRequired("BackupPointId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBackupPointId sets the BackupPointId field's value.
func (s *DescribeBackupPointDownloadUrlsInput) SetBackupPointId(v string) *DescribeBackupPointDownloadUrlsInput {
	s.BackupPointId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeBackupPointDownloadUrlsInput) SetInstanceId(v string) *DescribeBackupPointDownloadUrlsInput {
	s.InstanceId = &v
	return s
}

type DescribeBackupPointDownloadUrlsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	BackupPointDownloadUrls []*BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput `type:"list" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	ShardNumber *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeBackupPointDownloadUrlsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupPointDownloadUrlsOutput) GoString() string {
	return s.String()
}

// SetBackupPointDownloadUrls sets the BackupPointDownloadUrls field's value.
func (s *DescribeBackupPointDownloadUrlsOutput) SetBackupPointDownloadUrls(v []*BackupPointDownloadUrlForDescribeBackupPointDownloadUrlsOutput) *DescribeBackupPointDownloadUrlsOutput {
	s.BackupPointDownloadUrls = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeBackupPointDownloadUrlsOutput) SetInstanceId(v string) *DescribeBackupPointDownloadUrlsOutput {
	s.InstanceId = &v
	return s
}

// SetShardNumber sets the ShardNumber field's value.
func (s *DescribeBackupPointDownloadUrlsOutput) SetShardNumber(v int32) *DescribeBackupPointDownloadUrlsOutput {
	s.ShardNumber = &v
	return s
}
