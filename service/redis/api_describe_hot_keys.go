// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeHotKeysCommon = "DescribeHotKeys"

// DescribeHotKeysCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeHotKeysCommon operation. The "output" return
// value will be populated with the DescribeHotKeysCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeHotKeysCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeHotKeysCommon Send returns without error.
//
// See DescribeHotKeysCommon for more information on using the DescribeHotKeysCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeHotKeysCommonRequest method.
//    req, resp := client.DescribeHotKeysCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeHotKeysCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeHotKeysCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeHotKeysCommon API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeHotKeysCommon for usage and error information.
func (c *REDIS) DescribeHotKeysCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeHotKeysCommonRequest(input)
	return out, req.Send()
}

// DescribeHotKeysCommonWithContext is the same as DescribeHotKeysCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHotKeysCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeHotKeysCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeHotKeysCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeHotKeys = "DescribeHotKeys"

// DescribeHotKeysRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeHotKeys operation. The "output" return
// value will be populated with the DescribeHotKeysCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeHotKeysCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeHotKeysCommon Send returns without error.
//
// See DescribeHotKeys for more information on using the DescribeHotKeys
// API call, and error handling.
//
//    // Example sending a request using the DescribeHotKeysRequest method.
//    req, resp := client.DescribeHotKeysRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeHotKeysRequest(input *DescribeHotKeysInput) (req *request.Request, output *DescribeHotKeysOutput) {
	op := &request.Operation{
		Name:       opDescribeHotKeys,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeHotKeysInput{}
	}

	output = &DescribeHotKeysOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeHotKeys API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeHotKeys for usage and error information.
func (c *REDIS) DescribeHotKeys(input *DescribeHotKeysInput) (*DescribeHotKeysOutput, error) {
	req, out := c.DescribeHotKeysRequest(input)
	return out, req.Send()
}

// DescribeHotKeysWithContext is the same as DescribeHotKeys with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHotKeys for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeHotKeysWithContext(ctx byteplus.Context, input *DescribeHotKeysInput, opts ...request.Option) (*DescribeHotKeysOutput, error) {
	req, out := c.DescribeHotKeysRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeHotKeysInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	KeyType *string `type:"string" json:",omitempty"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`

	QueryEndTime *string `type:"string" json:",omitempty"`

	QueryStartTime *string `type:"string" json:",omitempty"`

	ShardIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribeHotKeysInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHotKeysInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeHotKeysInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeHotKeysInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeHotKeysInput) SetInstanceId(v string) *DescribeHotKeysInput {
	s.InstanceId = &v
	return s
}

// SetKeyType sets the KeyType field's value.
func (s *DescribeHotKeysInput) SetKeyType(v string) *DescribeHotKeysInput {
	s.KeyType = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeHotKeysInput) SetPageSize(v int32) *DescribeHotKeysInput {
	s.PageSize = &v
	return s
}

// SetQueryEndTime sets the QueryEndTime field's value.
func (s *DescribeHotKeysInput) SetQueryEndTime(v string) *DescribeHotKeysInput {
	s.QueryEndTime = &v
	return s
}

// SetQueryStartTime sets the QueryStartTime field's value.
func (s *DescribeHotKeysInput) SetQueryStartTime(v string) *DescribeHotKeysInput {
	s.QueryStartTime = &v
	return s
}

// SetShardIds sets the ShardIds field's value.
func (s *DescribeHotKeysInput) SetShardIds(v []*string) *DescribeHotKeysInput {
	s.ShardIds = v
	return s
}

type DescribeHotKeysOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	HotKey []*HotKeyForDescribeHotKeysOutput `type:"list" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeHotKeysOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHotKeysOutput) GoString() string {
	return s.String()
}

// SetHotKey sets the HotKey field's value.
func (s *DescribeHotKeysOutput) SetHotKey(v []*HotKeyForDescribeHotKeysOutput) *DescribeHotKeysOutput {
	s.HotKey = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeHotKeysOutput) SetInstanceId(v string) *DescribeHotKeysOutput {
	s.InstanceId = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeHotKeysOutput) SetTotal(v int32) *DescribeHotKeysOutput {
	s.Total = &v
	return s
}

type HotKeyForDescribeHotKeysOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	DBName *string `type:"string" json:",omitempty"`

	KeyInfo *string `type:"string" json:",omitempty"`

	KeyType *string `type:"string" json:",omitempty"`

	NodeId *string `type:"string" json:",omitempty"`

	QueryCount *string `type:"string" json:",omitempty"`

	ShardId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s HotKeyForDescribeHotKeysOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s HotKeyForDescribeHotKeysOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *HotKeyForDescribeHotKeysOutput) SetCreateTime(v string) *HotKeyForDescribeHotKeysOutput {
	s.CreateTime = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *HotKeyForDescribeHotKeysOutput) SetDBName(v string) *HotKeyForDescribeHotKeysOutput {
	s.DBName = &v
	return s
}

// SetKeyInfo sets the KeyInfo field's value.
func (s *HotKeyForDescribeHotKeysOutput) SetKeyInfo(v string) *HotKeyForDescribeHotKeysOutput {
	s.KeyInfo = &v
	return s
}

// SetKeyType sets the KeyType field's value.
func (s *HotKeyForDescribeHotKeysOutput) SetKeyType(v string) *HotKeyForDescribeHotKeysOutput {
	s.KeyType = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *HotKeyForDescribeHotKeysOutput) SetNodeId(v string) *HotKeyForDescribeHotKeysOutput {
	s.NodeId = &v
	return s
}

// SetQueryCount sets the QueryCount field's value.
func (s *HotKeyForDescribeHotKeysOutput) SetQueryCount(v string) *HotKeyForDescribeHotKeysOutput {
	s.QueryCount = &v
	return s
}

// SetShardId sets the ShardId field's value.
func (s *HotKeyForDescribeHotKeysOutput) SetShardId(v string) *HotKeyForDescribeHotKeysOutput {
	s.ShardId = &v
	return s
}
