// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeDBInstanceParamsCommon = "DescribeDBInstanceParams"

// DescribeDBInstanceParamsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeDBInstanceParamsCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceParamsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceParamsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceParamsCommon Send returns without error.
//
// See DescribeDBInstanceParamsCommon for more information on using the DescribeDBInstanceParamsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceParamsCommonRequest method.
//    req, resp := client.DescribeDBInstanceParamsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeDBInstanceParamsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceParamsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceParamsCommon API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeDBInstanceParamsCommon for usage and error information.
func (c *REDIS) DescribeDBInstanceParamsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceParamsCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceParamsCommonWithContext is the same as DescribeDBInstanceParamsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceParamsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeDBInstanceParamsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceParamsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceParams = "DescribeDBInstanceParams"

// DescribeDBInstanceParamsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeDBInstanceParams operation. The "output" return
// value will be populated with the DescribeDBInstanceParamsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceParamsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceParamsCommon Send returns without error.
//
// See DescribeDBInstanceParams for more information on using the DescribeDBInstanceParams
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceParamsRequest method.
//    req, resp := client.DescribeDBInstanceParamsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeDBInstanceParamsRequest(input *DescribeDBInstanceParamsInput) (req *request.Request, output *DescribeDBInstanceParamsOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceParams,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceParamsInput{}
	}

	output = &DescribeDBInstanceParamsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceParams API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeDBInstanceParams for usage and error information.
func (c *REDIS) DescribeDBInstanceParams(input *DescribeDBInstanceParamsInput) (*DescribeDBInstanceParamsOutput, error) {
	req, out := c.DescribeDBInstanceParamsRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceParamsWithContext is the same as DescribeDBInstanceParams with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceParams for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeDBInstanceParamsWithContext(ctx byteplus.Context, input *DescribeDBInstanceParamsInput, opts ...request.Option) (*DescribeDBInstanceParamsOutput, error) {
	req, out := c.DescribeDBInstanceParamsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeDBInstanceParamsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeDBInstanceParamsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceParamsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDBInstanceParamsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDBInstanceParamsInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceParamsInput) SetInstanceId(v string) *DescribeDBInstanceParamsInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDBInstanceParamsInput) SetPageNumber(v int32) *DescribeDBInstanceParamsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDBInstanceParamsInput) SetPageSize(v int32) *DescribeDBInstanceParamsInput {
	s.PageSize = &v
	return s
}

type DescribeDBInstanceParamsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Params []*ParamForDescribeDBInstanceParamsOutput `type:"list" json:",omitempty"`

	TotalParamsNum *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDBInstanceParamsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceParamsOutput) GoString() string {
	return s.String()
}

// SetParams sets the Params field's value.
func (s *DescribeDBInstanceParamsOutput) SetParams(v []*ParamForDescribeDBInstanceParamsOutput) *DescribeDBInstanceParamsOutput {
	s.Params = v
	return s
}

// SetTotalParamsNum sets the TotalParamsNum field's value.
func (s *DescribeDBInstanceParamsOutput) SetTotalParamsNum(v int32) *DescribeDBInstanceParamsOutput {
	s.TotalParamsNum = &v
	return s
}

type OptionForDescribeDBInstanceParamsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s OptionForDescribeDBInstanceParamsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s OptionForDescribeDBInstanceParamsOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *OptionForDescribeDBInstanceParamsOutput) SetDescription(v string) *OptionForDescribeDBInstanceParamsOutput {
	s.Description = &v
	return s
}

// SetValue sets the Value field's value.
func (s *OptionForDescribeDBInstanceParamsOutput) SetValue(v string) *OptionForDescribeDBInstanceParamsOutput {
	s.Value = &v
	return s
}

type ParamForDescribeDBInstanceParamsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CurrentValue *string `type:"string" json:",omitempty"`

	DefaultValue *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	EditableForInstance *bool `type:"boolean" json:",omitempty"`

	NeedReboot *bool `type:"boolean" json:",omitempty"`

	Options []*OptionForDescribeDBInstanceParamsOutput `type:"list" json:",omitempty"`

	ParamName *string `type:"string" json:",omitempty"`

	Range *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`

	Unit *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ParamForDescribeDBInstanceParamsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ParamForDescribeDBInstanceParamsOutput) GoString() string {
	return s.String()
}

// SetCurrentValue sets the CurrentValue field's value.
func (s *ParamForDescribeDBInstanceParamsOutput) SetCurrentValue(v string) *ParamForDescribeDBInstanceParamsOutput {
	s.CurrentValue = &v
	return s
}

// SetDefaultValue sets the DefaultValue field's value.
func (s *ParamForDescribeDBInstanceParamsOutput) SetDefaultValue(v string) *ParamForDescribeDBInstanceParamsOutput {
	s.DefaultValue = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ParamForDescribeDBInstanceParamsOutput) SetDescription(v string) *ParamForDescribeDBInstanceParamsOutput {
	s.Description = &v
	return s
}

// SetEditableForInstance sets the EditableForInstance field's value.
func (s *ParamForDescribeDBInstanceParamsOutput) SetEditableForInstance(v bool) *ParamForDescribeDBInstanceParamsOutput {
	s.EditableForInstance = &v
	return s
}

// SetNeedReboot sets the NeedReboot field's value.
func (s *ParamForDescribeDBInstanceParamsOutput) SetNeedReboot(v bool) *ParamForDescribeDBInstanceParamsOutput {
	s.NeedReboot = &v
	return s
}

// SetOptions sets the Options field's value.
func (s *ParamForDescribeDBInstanceParamsOutput) SetOptions(v []*OptionForDescribeDBInstanceParamsOutput) *ParamForDescribeDBInstanceParamsOutput {
	s.Options = v
	return s
}

// SetParamName sets the ParamName field's value.
func (s *ParamForDescribeDBInstanceParamsOutput) SetParamName(v string) *ParamForDescribeDBInstanceParamsOutput {
	s.ParamName = &v
	return s
}

// SetRange sets the Range field's value.
func (s *ParamForDescribeDBInstanceParamsOutput) SetRange(v string) *ParamForDescribeDBInstanceParamsOutput {
	s.Range = &v
	return s
}

// SetType sets the Type field's value.
func (s *ParamForDescribeDBInstanceParamsOutput) SetType(v string) *ParamForDescribeDBInstanceParamsOutput {
	s.Type = &v
	return s
}

// SetUnit sets the Unit field's value.
func (s *ParamForDescribeDBInstanceParamsOutput) SetUnit(v string) *ParamForDescribeDBInstanceParamsOutput {
	s.Unit = &v
	return s
}
