// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateDBEndpointDirectLinkAddressCommon = "CreateDBEndpointDirectLinkAddress"

// CreateDBEndpointDirectLinkAddressCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateDBEndpointDirectLinkAddressCommon operation. The "output" return
// value will be populated with the CreateDBEndpointDirectLinkAddressCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBEndpointDirectLinkAddressCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBEndpointDirectLinkAddressCommon Send returns without error.
//
// See CreateDBEndpointDirectLinkAddressCommon for more information on using the CreateDBEndpointDirectLinkAddressCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDBEndpointDirectLinkAddressCommonRequest method.
//    req, resp := client.CreateDBEndpointDirectLinkAddressCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) CreateDBEndpointDirectLinkAddressCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDBEndpointDirectLinkAddressCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBEndpointDirectLinkAddressCommon API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation CreateDBEndpointDirectLinkAddressCommon for usage and error information.
func (c *REDIS) CreateDBEndpointDirectLinkAddressCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDBEndpointDirectLinkAddressCommonRequest(input)
	return out, req.Send()
}

// CreateDBEndpointDirectLinkAddressCommonWithContext is the same as CreateDBEndpointDirectLinkAddressCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBEndpointDirectLinkAddressCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) CreateDBEndpointDirectLinkAddressCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDBEndpointDirectLinkAddressCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBEndpointDirectLinkAddress = "CreateDBEndpointDirectLinkAddress"

// CreateDBEndpointDirectLinkAddressRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateDBEndpointDirectLinkAddress operation. The "output" return
// value will be populated with the CreateDBEndpointDirectLinkAddressCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBEndpointDirectLinkAddressCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBEndpointDirectLinkAddressCommon Send returns without error.
//
// See CreateDBEndpointDirectLinkAddress for more information on using the CreateDBEndpointDirectLinkAddress
// API call, and error handling.
//
//    // Example sending a request using the CreateDBEndpointDirectLinkAddressRequest method.
//    req, resp := client.CreateDBEndpointDirectLinkAddressRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) CreateDBEndpointDirectLinkAddressRequest(input *CreateDBEndpointDirectLinkAddressInput) (req *request.Request, output *CreateDBEndpointDirectLinkAddressOutput) {
	op := &request.Operation{
		Name:       opCreateDBEndpointDirectLinkAddress,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDBEndpointDirectLinkAddressInput{}
	}

	output = &CreateDBEndpointDirectLinkAddressOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBEndpointDirectLinkAddress API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation CreateDBEndpointDirectLinkAddress for usage and error information.
func (c *REDIS) CreateDBEndpointDirectLinkAddress(input *CreateDBEndpointDirectLinkAddressInput) (*CreateDBEndpointDirectLinkAddressOutput, error) {
	req, out := c.CreateDBEndpointDirectLinkAddressRequest(input)
	return out, req.Send()
}

// CreateDBEndpointDirectLinkAddressWithContext is the same as CreateDBEndpointDirectLinkAddress with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBEndpointDirectLinkAddress for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) CreateDBEndpointDirectLinkAddressWithContext(ctx byteplus.Context, input *CreateDBEndpointDirectLinkAddressInput, opts ...request.Option) (*CreateDBEndpointDirectLinkAddressOutput, error) {
	req, out := c.CreateDBEndpointDirectLinkAddressRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateDBEndpointDirectLinkAddressInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ClientToken *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	Port *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s CreateDBEndpointDirectLinkAddressInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBEndpointDirectLinkAddressInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateDBEndpointDirectLinkAddressInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateDBEndpointDirectLinkAddressInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *CreateDBEndpointDirectLinkAddressInput) SetClientToken(v string) *CreateDBEndpointDirectLinkAddressInput {
	s.ClientToken = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateDBEndpointDirectLinkAddressInput) SetInstanceId(v string) *CreateDBEndpointDirectLinkAddressInput {
	s.InstanceId = &v
	return s
}

// SetPort sets the Port field's value.
func (s *CreateDBEndpointDirectLinkAddressInput) SetPort(v int32) *CreateDBEndpointDirectLinkAddressInput {
	s.Port = &v
	return s
}

type CreateDBEndpointDirectLinkAddressOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CreateDBEndpointDirectLinkAddressOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBEndpointDirectLinkAddressOutput) GoString() string {
	return s.String()
}
