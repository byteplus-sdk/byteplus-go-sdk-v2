// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeEnterpriseDBInstanceParamsCommon = "DescribeEnterpriseDBInstanceParams"

// DescribeEnterpriseDBInstanceParamsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeEnterpriseDBInstanceParamsCommon operation. The "output" return
// value will be populated with the DescribeEnterpriseDBInstanceParamsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeEnterpriseDBInstanceParamsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeEnterpriseDBInstanceParamsCommon Send returns without error.
//
// See DescribeEnterpriseDBInstanceParamsCommon for more information on using the DescribeEnterpriseDBInstanceParamsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeEnterpriseDBInstanceParamsCommonRequest method.
//    req, resp := client.DescribeEnterpriseDBInstanceParamsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeEnterpriseDBInstanceParamsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeEnterpriseDBInstanceParamsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeEnterpriseDBInstanceParamsCommon API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeEnterpriseDBInstanceParamsCommon for usage and error information.
func (c *REDIS) DescribeEnterpriseDBInstanceParamsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeEnterpriseDBInstanceParamsCommonRequest(input)
	return out, req.Send()
}

// DescribeEnterpriseDBInstanceParamsCommonWithContext is the same as DescribeEnterpriseDBInstanceParamsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEnterpriseDBInstanceParamsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeEnterpriseDBInstanceParamsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeEnterpriseDBInstanceParamsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeEnterpriseDBInstanceParams = "DescribeEnterpriseDBInstanceParams"

// DescribeEnterpriseDBInstanceParamsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeEnterpriseDBInstanceParams operation. The "output" return
// value will be populated with the DescribeEnterpriseDBInstanceParamsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeEnterpriseDBInstanceParamsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeEnterpriseDBInstanceParamsCommon Send returns without error.
//
// See DescribeEnterpriseDBInstanceParams for more information on using the DescribeEnterpriseDBInstanceParams
// API call, and error handling.
//
//    // Example sending a request using the DescribeEnterpriseDBInstanceParamsRequest method.
//    req, resp := client.DescribeEnterpriseDBInstanceParamsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeEnterpriseDBInstanceParamsRequest(input *DescribeEnterpriseDBInstanceParamsInput) (req *request.Request, output *DescribeEnterpriseDBInstanceParamsOutput) {
	op := &request.Operation{
		Name:       opDescribeEnterpriseDBInstanceParams,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeEnterpriseDBInstanceParamsInput{}
	}

	output = &DescribeEnterpriseDBInstanceParamsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeEnterpriseDBInstanceParams API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeEnterpriseDBInstanceParams for usage and error information.
func (c *REDIS) DescribeEnterpriseDBInstanceParams(input *DescribeEnterpriseDBInstanceParamsInput) (*DescribeEnterpriseDBInstanceParamsOutput, error) {
	req, out := c.DescribeEnterpriseDBInstanceParamsRequest(input)
	return out, req.Send()
}

// DescribeEnterpriseDBInstanceParamsWithContext is the same as DescribeEnterpriseDBInstanceParams with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEnterpriseDBInstanceParams for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeEnterpriseDBInstanceParamsWithContext(ctx byteplus.Context, input *DescribeEnterpriseDBInstanceParamsInput, opts ...request.Option) (*DescribeEnterpriseDBInstanceParamsOutput, error) {
	req, out := c.DescribeEnterpriseDBInstanceParamsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeEnterpriseDBInstanceParamsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeEnterpriseDBInstanceParamsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEnterpriseDBInstanceParamsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeEnterpriseDBInstanceParamsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeEnterpriseDBInstanceParamsInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeEnterpriseDBInstanceParamsInput) SetInstanceId(v string) *DescribeEnterpriseDBInstanceParamsInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeEnterpriseDBInstanceParamsInput) SetPageNumber(v int32) *DescribeEnterpriseDBInstanceParamsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeEnterpriseDBInstanceParamsInput) SetPageSize(v int32) *DescribeEnterpriseDBInstanceParamsInput {
	s.PageSize = &v
	return s
}

type DescribeEnterpriseDBInstanceParamsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Params []*ParamForDescribeEnterpriseDBInstanceParamsOutput `type:"list" json:",omitempty"`

	TotalParamsNum *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeEnterpriseDBInstanceParamsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEnterpriseDBInstanceParamsOutput) GoString() string {
	return s.String()
}

// SetParams sets the Params field's value.
func (s *DescribeEnterpriseDBInstanceParamsOutput) SetParams(v []*ParamForDescribeEnterpriseDBInstanceParamsOutput) *DescribeEnterpriseDBInstanceParamsOutput {
	s.Params = v
	return s
}

// SetTotalParamsNum sets the TotalParamsNum field's value.
func (s *DescribeEnterpriseDBInstanceParamsOutput) SetTotalParamsNum(v int32) *DescribeEnterpriseDBInstanceParamsOutput {
	s.TotalParamsNum = &v
	return s
}

type OptionForDescribeEnterpriseDBInstanceParamsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s OptionForDescribeEnterpriseDBInstanceParamsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s OptionForDescribeEnterpriseDBInstanceParamsOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *OptionForDescribeEnterpriseDBInstanceParamsOutput) SetDescription(v string) *OptionForDescribeEnterpriseDBInstanceParamsOutput {
	s.Description = &v
	return s
}

// SetValue sets the Value field's value.
func (s *OptionForDescribeEnterpriseDBInstanceParamsOutput) SetValue(v string) *OptionForDescribeEnterpriseDBInstanceParamsOutput {
	s.Value = &v
	return s
}

type ParamForDescribeEnterpriseDBInstanceParamsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CurrentValue *string `type:"string" json:",omitempty"`

	DefaultValue *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	EditableForInstance *bool `type:"boolean" json:",omitempty"`

	NeedReboot *bool `type:"boolean" json:",omitempty"`

	Options []*OptionForDescribeEnterpriseDBInstanceParamsOutput `type:"list" json:",omitempty"`

	ParamName *string `type:"string" json:",omitempty"`

	Range *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty"`

	Unit *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ParamForDescribeEnterpriseDBInstanceParamsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ParamForDescribeEnterpriseDBInstanceParamsOutput) GoString() string {
	return s.String()
}

// SetCurrentValue sets the CurrentValue field's value.
func (s *ParamForDescribeEnterpriseDBInstanceParamsOutput) SetCurrentValue(v string) *ParamForDescribeEnterpriseDBInstanceParamsOutput {
	s.CurrentValue = &v
	return s
}

// SetDefaultValue sets the DefaultValue field's value.
func (s *ParamForDescribeEnterpriseDBInstanceParamsOutput) SetDefaultValue(v string) *ParamForDescribeEnterpriseDBInstanceParamsOutput {
	s.DefaultValue = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ParamForDescribeEnterpriseDBInstanceParamsOutput) SetDescription(v string) *ParamForDescribeEnterpriseDBInstanceParamsOutput {
	s.Description = &v
	return s
}

// SetEditableForInstance sets the EditableForInstance field's value.
func (s *ParamForDescribeEnterpriseDBInstanceParamsOutput) SetEditableForInstance(v bool) *ParamForDescribeEnterpriseDBInstanceParamsOutput {
	s.EditableForInstance = &v
	return s
}

// SetNeedReboot sets the NeedReboot field's value.
func (s *ParamForDescribeEnterpriseDBInstanceParamsOutput) SetNeedReboot(v bool) *ParamForDescribeEnterpriseDBInstanceParamsOutput {
	s.NeedReboot = &v
	return s
}

// SetOptions sets the Options field's value.
func (s *ParamForDescribeEnterpriseDBInstanceParamsOutput) SetOptions(v []*OptionForDescribeEnterpriseDBInstanceParamsOutput) *ParamForDescribeEnterpriseDBInstanceParamsOutput {
	s.Options = v
	return s
}

// SetParamName sets the ParamName field's value.
func (s *ParamForDescribeEnterpriseDBInstanceParamsOutput) SetParamName(v string) *ParamForDescribeEnterpriseDBInstanceParamsOutput {
	s.ParamName = &v
	return s
}

// SetRange sets the Range field's value.
func (s *ParamForDescribeEnterpriseDBInstanceParamsOutput) SetRange(v string) *ParamForDescribeEnterpriseDBInstanceParamsOutput {
	s.Range = &v
	return s
}

// SetType sets the Type field's value.
func (s *ParamForDescribeEnterpriseDBInstanceParamsOutput) SetType(v string) *ParamForDescribeEnterpriseDBInstanceParamsOutput {
	s.Type = &v
	return s
}

// SetUnit sets the Unit field's value.
func (s *ParamForDescribeEnterpriseDBInstanceParamsOutput) SetUnit(v string) *ParamForDescribeEnterpriseDBInstanceParamsOutput {
	s.Unit = &v
	return s
}
