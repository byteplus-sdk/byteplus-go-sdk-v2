// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribePlannedEventsCommon = "DescribePlannedEvents"

// DescribePlannedEventsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribePlannedEventsCommon operation. The "output" return
// value will be populated with the DescribePlannedEventsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribePlannedEventsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribePlannedEventsCommon Send returns without error.
//
// See DescribePlannedEventsCommon for more information on using the DescribePlannedEventsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribePlannedEventsCommonRequest method.
//    req, resp := client.DescribePlannedEventsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribePlannedEventsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribePlannedEventsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribePlannedEventsCommon API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribePlannedEventsCommon for usage and error information.
func (c *REDIS) DescribePlannedEventsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribePlannedEventsCommonRequest(input)
	return out, req.Send()
}

// DescribePlannedEventsCommonWithContext is the same as DescribePlannedEventsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribePlannedEventsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribePlannedEventsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribePlannedEventsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribePlannedEvents = "DescribePlannedEvents"

// DescribePlannedEventsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribePlannedEvents operation. The "output" return
// value will be populated with the DescribePlannedEventsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribePlannedEventsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribePlannedEventsCommon Send returns without error.
//
// See DescribePlannedEvents for more information on using the DescribePlannedEvents
// API call, and error handling.
//
//    // Example sending a request using the DescribePlannedEventsRequest method.
//    req, resp := client.DescribePlannedEventsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribePlannedEventsRequest(input *DescribePlannedEventsInput) (req *request.Request, output *DescribePlannedEventsOutput) {
	op := &request.Operation{
		Name:       opDescribePlannedEvents,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribePlannedEventsInput{}
	}

	output = &DescribePlannedEventsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribePlannedEvents API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribePlannedEvents for usage and error information.
func (c *REDIS) DescribePlannedEvents(input *DescribePlannedEventsInput) (*DescribePlannedEventsOutput, error) {
	req, out := c.DescribePlannedEventsRequest(input)
	return out, req.Send()
}

// DescribePlannedEventsWithContext is the same as DescribePlannedEvents with the addition of
// the ability to pass a context and additional request options.
//
// See DescribePlannedEvents for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribePlannedEventsWithContext(ctx byteplus.Context, input *DescribePlannedEventsInput, opts ...request.Option) (*DescribePlannedEventsOutput, error) {
	req, out := c.DescribePlannedEventsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribePlannedEventsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	MaxStartTime *string `type:"string" json:",omitempty"`

	MinStartTime *string `type:"string" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribePlannedEventsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribePlannedEventsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribePlannedEventsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribePlannedEventsInput"}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribePlannedEventsInput) SetInstanceId(v string) *DescribePlannedEventsInput {
	s.InstanceId = &v
	return s
}

// SetMaxStartTime sets the MaxStartTime field's value.
func (s *DescribePlannedEventsInput) SetMaxStartTime(v string) *DescribePlannedEventsInput {
	s.MaxStartTime = &v
	return s
}

// SetMinStartTime sets the MinStartTime field's value.
func (s *DescribePlannedEventsInput) SetMinStartTime(v string) *DescribePlannedEventsInput {
	s.MinStartTime = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribePlannedEventsInput) SetPageNumber(v int32) *DescribePlannedEventsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribePlannedEventsInput) SetPageSize(v int32) *DescribePlannedEventsInput {
	s.PageSize = &v
	return s
}

type DescribePlannedEventsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	PlannedEvents []*PlannedEventForDescribePlannedEventsOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribePlannedEventsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribePlannedEventsOutput) GoString() string {
	return s.String()
}

// SetPlannedEvents sets the PlannedEvents field's value.
func (s *DescribePlannedEventsOutput) SetPlannedEvents(v []*PlannedEventForDescribePlannedEventsOutput) *DescribePlannedEventsOutput {
	s.PlannedEvents = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribePlannedEventsOutput) SetTotal(v int32) *DescribePlannedEventsOutput {
	s.Total = &v
	return s
}

type PlannedEventForDescribePlannedEventsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ActionName *string `type:"string" json:",omitempty"`

	CanCancel *bool `type:"boolean" json:",omitempty"`

	CanModifyTime *bool `type:"boolean" json:",omitempty"`

	EventId *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	InstanceName *string `type:"string" json:",omitempty"`

	MaxEndTime *string `type:"string" json:",omitempty"`

	PlanEndTime *string `type:"string" json:",omitempty"`

	PlanStartTime *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty" enum:"EnumOfStatusForDescribePlannedEventsOutput"`

	Type *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PlannedEventForDescribePlannedEventsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s PlannedEventForDescribePlannedEventsOutput) GoString() string {
	return s.String()
}

// SetActionName sets the ActionName field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetActionName(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.ActionName = &v
	return s
}

// SetCanCancel sets the CanCancel field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetCanCancel(v bool) *PlannedEventForDescribePlannedEventsOutput {
	s.CanCancel = &v
	return s
}

// SetCanModifyTime sets the CanModifyTime field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetCanModifyTime(v bool) *PlannedEventForDescribePlannedEventsOutput {
	s.CanModifyTime = &v
	return s
}

// SetEventId sets the EventId field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetEventId(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.EventId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetInstanceId(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.InstanceId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetInstanceName(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.InstanceName = &v
	return s
}

// SetMaxEndTime sets the MaxEndTime field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetMaxEndTime(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.MaxEndTime = &v
	return s
}

// SetPlanEndTime sets the PlanEndTime field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetPlanEndTime(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.PlanEndTime = &v
	return s
}

// SetPlanStartTime sets the PlanStartTime field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetPlanStartTime(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.PlanStartTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetStatus(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.Status = &v
	return s
}

// SetType sets the Type field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetType(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.Type = &v
	return s
}

const (
	// EnumOfStatusForDescribePlannedEventsOutputInitiated is a EnumOfStatusForDescribePlannedEventsOutput enum value
	EnumOfStatusForDescribePlannedEventsOutputInitiated = "Initiated"

	// EnumOfStatusForDescribePlannedEventsOutputWaiting is a EnumOfStatusForDescribePlannedEventsOutput enum value
	EnumOfStatusForDescribePlannedEventsOutputWaiting = "Waiting"

	// EnumOfStatusForDescribePlannedEventsOutputRunning is a EnumOfStatusForDescribePlannedEventsOutput enum value
	EnumOfStatusForDescribePlannedEventsOutputRunning = "Running"

	// EnumOfStatusForDescribePlannedEventsOutputSuccess is a EnumOfStatusForDescribePlannedEventsOutput enum value
	EnumOfStatusForDescribePlannedEventsOutputSuccess = "Success"

	// EnumOfStatusForDescribePlannedEventsOutputFailed is a EnumOfStatusForDescribePlannedEventsOutput enum value
	EnumOfStatusForDescribePlannedEventsOutputFailed = "Failed"

	// EnumOfStatusForDescribePlannedEventsOutputCanceled is a EnumOfStatusForDescribePlannedEventsOutput enum value
	EnumOfStatusForDescribePlannedEventsOutputCanceled = "Canceled"

	// EnumOfStatusForDescribePlannedEventsOutputAbandoned is a EnumOfStatusForDescribePlannedEventsOutput enum value
	EnumOfStatusForDescribePlannedEventsOutputAbandoned = "Abandoned"
)
