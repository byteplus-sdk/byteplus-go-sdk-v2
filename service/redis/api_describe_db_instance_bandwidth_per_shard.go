// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeDBInstanceBandwidthPerShardCommon = "DescribeDBInstanceBandwidthPerShard"

// DescribeDBInstanceBandwidthPerShardCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeDBInstanceBandwidthPerShardCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceBandwidthPerShardCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceBandwidthPerShardCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceBandwidthPerShardCommon Send returns without error.
//
// See DescribeDBInstanceBandwidthPerShardCommon for more information on using the DescribeDBInstanceBandwidthPerShardCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceBandwidthPerShardCommonRequest method.
//    req, resp := client.DescribeDBInstanceBandwidthPerShardCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeDBInstanceBandwidthPerShardCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceBandwidthPerShardCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceBandwidthPerShardCommon API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeDBInstanceBandwidthPerShardCommon for usage and error information.
func (c *REDIS) DescribeDBInstanceBandwidthPerShardCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceBandwidthPerShardCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceBandwidthPerShardCommonWithContext is the same as DescribeDBInstanceBandwidthPerShardCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceBandwidthPerShardCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeDBInstanceBandwidthPerShardCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceBandwidthPerShardCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceBandwidthPerShard = "DescribeDBInstanceBandwidthPerShard"

// DescribeDBInstanceBandwidthPerShardRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeDBInstanceBandwidthPerShard operation. The "output" return
// value will be populated with the DescribeDBInstanceBandwidthPerShardCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceBandwidthPerShardCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceBandwidthPerShardCommon Send returns without error.
//
// See DescribeDBInstanceBandwidthPerShard for more information on using the DescribeDBInstanceBandwidthPerShard
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceBandwidthPerShardRequest method.
//    req, resp := client.DescribeDBInstanceBandwidthPerShardRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeDBInstanceBandwidthPerShardRequest(input *DescribeDBInstanceBandwidthPerShardInput) (req *request.Request, output *DescribeDBInstanceBandwidthPerShardOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceBandwidthPerShard,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceBandwidthPerShardInput{}
	}

	output = &DescribeDBInstanceBandwidthPerShardOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceBandwidthPerShard API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeDBInstanceBandwidthPerShard for usage and error information.
func (c *REDIS) DescribeDBInstanceBandwidthPerShard(input *DescribeDBInstanceBandwidthPerShardInput) (*DescribeDBInstanceBandwidthPerShardOutput, error) {
	req, out := c.DescribeDBInstanceBandwidthPerShardRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceBandwidthPerShardWithContext is the same as DescribeDBInstanceBandwidthPerShard with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceBandwidthPerShard for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeDBInstanceBandwidthPerShardWithContext(ctx byteplus.Context, input *DescribeDBInstanceBandwidthPerShardInput, opts ...request.Option) (*DescribeDBInstanceBandwidthPerShardOutput, error) {
	req, out := c.DescribeDBInstanceBandwidthPerShardRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeDBInstanceBandwidthPerShardInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDBInstanceBandwidthPerShardInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceBandwidthPerShardInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceBandwidthPerShardInput) SetInstanceId(v string) *DescribeDBInstanceBandwidthPerShardInput {
	s.InstanceId = &v
	return s
}

type DescribeDBInstanceBandwidthPerShardOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	AdditionalBandwidthPerShard *int32 `type:"int32" json:",omitempty"`

	DefaultBandwidthPerShard *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDBInstanceBandwidthPerShardOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceBandwidthPerShardOutput) GoString() string {
	return s.String()
}

// SetAdditionalBandwidthPerShard sets the AdditionalBandwidthPerShard field's value.
func (s *DescribeDBInstanceBandwidthPerShardOutput) SetAdditionalBandwidthPerShard(v int32) *DescribeDBInstanceBandwidthPerShardOutput {
	s.AdditionalBandwidthPerShard = &v
	return s
}

// SetDefaultBandwidthPerShard sets the DefaultBandwidthPerShard field's value.
func (s *DescribeDBInstanceBandwidthPerShardOutput) SetDefaultBandwidthPerShard(v int32) *DescribeDBInstanceBandwidthPerShardOutput {
	s.DefaultBandwidthPerShard = &v
	return s
}
