// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeParameterGroupsCommon = "DescribeParameterGroups"

// DescribeParameterGroupsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeParameterGroupsCommon operation. The "output" return
// value will be populated with the DescribeParameterGroupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeParameterGroupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeParameterGroupsCommon Send returns without error.
//
// See DescribeParameterGroupsCommon for more information on using the DescribeParameterGroupsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeParameterGroupsCommonRequest method.
//    req, resp := client.DescribeParameterGroupsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeParameterGroupsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeParameterGroupsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeParameterGroupsCommon API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeParameterGroupsCommon for usage and error information.
func (c *REDIS) DescribeParameterGroupsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeParameterGroupsCommonRequest(input)
	return out, req.Send()
}

// DescribeParameterGroupsCommonWithContext is the same as DescribeParameterGroupsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeParameterGroupsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeParameterGroupsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeParameterGroupsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeParameterGroups = "DescribeParameterGroups"

// DescribeParameterGroupsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeParameterGroups operation. The "output" return
// value will be populated with the DescribeParameterGroupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeParameterGroupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeParameterGroupsCommon Send returns without error.
//
// See DescribeParameterGroups for more information on using the DescribeParameterGroups
// API call, and error handling.
//
//    // Example sending a request using the DescribeParameterGroupsRequest method.
//    req, resp := client.DescribeParameterGroupsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeParameterGroupsRequest(input *DescribeParameterGroupsInput) (req *request.Request, output *DescribeParameterGroupsOutput) {
	op := &request.Operation{
		Name:       opDescribeParameterGroups,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeParameterGroupsInput{}
	}

	output = &DescribeParameterGroupsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeParameterGroups API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation DescribeParameterGroups for usage and error information.
func (c *REDIS) DescribeParameterGroups(input *DescribeParameterGroupsInput) (*DescribeParameterGroupsOutput, error) {
	req, out := c.DescribeParameterGroupsRequest(input)
	return out, req.Send()
}

// DescribeParameterGroupsWithContext is the same as DescribeParameterGroups with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeParameterGroups for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeParameterGroupsWithContext(ctx byteplus.Context, input *DescribeParameterGroupsInput, opts ...request.Option) (*DescribeParameterGroupsOutput, error) {
	req, out := c.DescribeParameterGroupsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeParameterGroupsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EngineVersion *string `type:"string" json:",omitempty"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`

	Source *string `type:"string" json:",omitempty" enum:"EnumOfSourceForDescribeParameterGroupsInput"`
}

// String returns the string representation
func (s DescribeParameterGroupsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeParameterGroupsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeParameterGroupsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeParameterGroupsInput"}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEngineVersion sets the EngineVersion field's value.
func (s *DescribeParameterGroupsInput) SetEngineVersion(v string) *DescribeParameterGroupsInput {
	s.EngineVersion = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeParameterGroupsInput) SetPageNumber(v int32) *DescribeParameterGroupsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeParameterGroupsInput) SetPageSize(v int32) *DescribeParameterGroupsInput {
	s.PageSize = &v
	return s
}

// SetSource sets the Source field's value.
func (s *DescribeParameterGroupsInput) SetSource(v string) *DescribeParameterGroupsInput {
	s.Source = &v
	return s
}

type DescribeParameterGroupsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	ParameterGroups []*ParameterGroupForDescribeParameterGroupsOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeParameterGroupsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeParameterGroupsOutput) GoString() string {
	return s.String()
}

// SetParameterGroups sets the ParameterGroups field's value.
func (s *DescribeParameterGroupsOutput) SetParameterGroups(v []*ParameterGroupForDescribeParameterGroupsOutput) *DescribeParameterGroupsOutput {
	s.ParameterGroups = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeParameterGroupsOutput) SetTotal(v int32) *DescribeParameterGroupsOutput {
	s.Total = &v
	return s
}

type ParameterGroupForDescribeParameterGroupsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	Default *bool `type:"boolean" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	EngineVersion *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	ParameterGroupId *string `type:"string" json:",omitempty"`

	ParameterNum *int32 `type:"int32" json:",omitempty"`

	Source *string `type:"string" json:",omitempty" enum:"EnumOfSourceForDescribeParameterGroupsOutput"`

	UpdateTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ParameterGroupForDescribeParameterGroupsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ParameterGroupForDescribeParameterGroupsOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *ParameterGroupForDescribeParameterGroupsOutput) SetCreateTime(v string) *ParameterGroupForDescribeParameterGroupsOutput {
	s.CreateTime = &v
	return s
}

// SetDefault sets the Default field's value.
func (s *ParameterGroupForDescribeParameterGroupsOutput) SetDefault(v bool) *ParameterGroupForDescribeParameterGroupsOutput {
	s.Default = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ParameterGroupForDescribeParameterGroupsOutput) SetDescription(v string) *ParameterGroupForDescribeParameterGroupsOutput {
	s.Description = &v
	return s
}

// SetEngineVersion sets the EngineVersion field's value.
func (s *ParameterGroupForDescribeParameterGroupsOutput) SetEngineVersion(v string) *ParameterGroupForDescribeParameterGroupsOutput {
	s.EngineVersion = &v
	return s
}

// SetName sets the Name field's value.
func (s *ParameterGroupForDescribeParameterGroupsOutput) SetName(v string) *ParameterGroupForDescribeParameterGroupsOutput {
	s.Name = &v
	return s
}

// SetParameterGroupId sets the ParameterGroupId field's value.
func (s *ParameterGroupForDescribeParameterGroupsOutput) SetParameterGroupId(v string) *ParameterGroupForDescribeParameterGroupsOutput {
	s.ParameterGroupId = &v
	return s
}

// SetParameterNum sets the ParameterNum field's value.
func (s *ParameterGroupForDescribeParameterGroupsOutput) SetParameterNum(v int32) *ParameterGroupForDescribeParameterGroupsOutput {
	s.ParameterNum = &v
	return s
}

// SetSource sets the Source field's value.
func (s *ParameterGroupForDescribeParameterGroupsOutput) SetSource(v string) *ParameterGroupForDescribeParameterGroupsOutput {
	s.Source = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *ParameterGroupForDescribeParameterGroupsOutput) SetUpdateTime(v string) *ParameterGroupForDescribeParameterGroupsOutput {
	s.UpdateTime = &v
	return s
}

const (
	// EnumOfSourceForDescribeParameterGroupsInputSystem is a EnumOfSourceForDescribeParameterGroupsInput enum value
	EnumOfSourceForDescribeParameterGroupsInputSystem = "System"

	// EnumOfSourceForDescribeParameterGroupsInputUser is a EnumOfSourceForDescribeParameterGroupsInput enum value
	EnumOfSourceForDescribeParameterGroupsInputUser = "User"
)

const (
	// EnumOfSourceForDescribeParameterGroupsOutputSystem is a EnumOfSourceForDescribeParameterGroupsOutput enum value
	EnumOfSourceForDescribeParameterGroupsOutputSystem = "System"

	// EnumOfSourceForDescribeParameterGroupsOutputUser is a EnumOfSourceForDescribeParameterGroupsOutput enum value
	EnumOfSourceForDescribeParameterGroupsOutputUser = "User"
)
