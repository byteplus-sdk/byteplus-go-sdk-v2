// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opFlushDBInstanceCommon = "FlushDBInstance"

// FlushDBInstanceCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the FlushDBInstanceCommon operation. The "output" return
// value will be populated with the FlushDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned FlushDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after FlushDBInstanceCommon Send returns without error.
//
// See FlushDBInstanceCommon for more information on using the FlushDBInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the FlushDBInstanceCommonRequest method.
//    req, resp := client.FlushDBInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) FlushDBInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opFlushDBInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// FlushDBInstanceCommon API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation FlushDBInstanceCommon for usage and error information.
func (c *REDIS) FlushDBInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.FlushDBInstanceCommonRequest(input)
	return out, req.Send()
}

// FlushDBInstanceCommonWithContext is the same as FlushDBInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See FlushDBInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) FlushDBInstanceCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.FlushDBInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opFlushDBInstance = "FlushDBInstance"

// FlushDBInstanceRequest generates a "byteplus/request.Request" representing the
// client's request for the FlushDBInstance operation. The "output" return
// value will be populated with the FlushDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned FlushDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after FlushDBInstanceCommon Send returns without error.
//
// See FlushDBInstance for more information on using the FlushDBInstance
// API call, and error handling.
//
//    // Example sending a request using the FlushDBInstanceRequest method.
//    req, resp := client.FlushDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) FlushDBInstanceRequest(input *FlushDBInstanceInput) (req *request.Request, output *FlushDBInstanceOutput) {
	op := &request.Operation{
		Name:       opFlushDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &FlushDBInstanceInput{}
	}

	output = &FlushDBInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// FlushDBInstance API operation for REDIS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for REDIS's
// API operation FlushDBInstance for usage and error information.
func (c *REDIS) FlushDBInstance(input *FlushDBInstanceInput) (*FlushDBInstanceOutput, error) {
	req, out := c.FlushDBInstanceRequest(input)
	return out, req.Send()
}

// FlushDBInstanceWithContext is the same as FlushDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See FlushDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) FlushDBInstanceWithContext(ctx byteplus.Context, input *FlushDBInstanceInput, opts ...request.Option) (*FlushDBInstanceOutput, error) {
	req, out := c.FlushDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type FlushDBInstanceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ClientToken *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s FlushDBInstanceInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s FlushDBInstanceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *FlushDBInstanceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "FlushDBInstanceInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *FlushDBInstanceInput) SetClientToken(v string) *FlushDBInstanceInput {
	s.ClientToken = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *FlushDBInstanceInput) SetInstanceId(v string) *FlushDBInstanceInput {
	s.InstanceId = &v
	return s
}

type FlushDBInstanceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s FlushDBInstanceOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s FlushDBInstanceOutput) GoString() string {
	return s.String()
}
