// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package autoscaling

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opSuspendProcessesCommon = "SuspendProcesses"

// SuspendProcessesCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the SuspendProcessesCommon operation. The "output" return
// value will be populated with the SuspendProcessesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SuspendProcessesCommon Request to send the API call to the service.
// the "output" return value is not valid until after SuspendProcessesCommon Send returns without error.
//
// See SuspendProcessesCommon for more information on using the SuspendProcessesCommon
// API call, and error handling.
//
//    // Example sending a request using the SuspendProcessesCommonRequest method.
//    req, resp := client.SuspendProcessesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AUTOSCALING) SuspendProcessesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSuspendProcessesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// SuspendProcessesCommon API operation for AUTO_SCALING.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for AUTO_SCALING's
// API operation SuspendProcessesCommon for usage and error information.
func (c *AUTOSCALING) SuspendProcessesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SuspendProcessesCommonRequest(input)
	return out, req.Send()
}

// SuspendProcessesCommonWithContext is the same as SuspendProcessesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SuspendProcessesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AUTOSCALING) SuspendProcessesCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SuspendProcessesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSuspendProcesses = "SuspendProcesses"

// SuspendProcessesRequest generates a "byteplus/request.Request" representing the
// client's request for the SuspendProcesses operation. The "output" return
// value will be populated with the SuspendProcessesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SuspendProcessesCommon Request to send the API call to the service.
// the "output" return value is not valid until after SuspendProcessesCommon Send returns without error.
//
// See SuspendProcesses for more information on using the SuspendProcesses
// API call, and error handling.
//
//    // Example sending a request using the SuspendProcessesRequest method.
//    req, resp := client.SuspendProcessesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AUTOSCALING) SuspendProcessesRequest(input *SuspendProcessesInput) (req *request.Request, output *SuspendProcessesOutput) {
	op := &request.Operation{
		Name:       opSuspendProcesses,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SuspendProcessesInput{}
	}

	output = &SuspendProcessesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// SuspendProcesses API operation for AUTO_SCALING.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for AUTO_SCALING's
// API operation SuspendProcesses for usage and error information.
func (c *AUTOSCALING) SuspendProcesses(input *SuspendProcessesInput) (*SuspendProcessesOutput, error) {
	req, out := c.SuspendProcessesRequest(input)
	return out, req.Send()
}

// SuspendProcessesWithContext is the same as SuspendProcesses with the addition of
// the ability to pass a context and additional request options.
//
// See SuspendProcesses for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AUTOSCALING) SuspendProcessesWithContext(ctx byteplus.Context, input *SuspendProcessesInput, opts ...request.Option) (*SuspendProcessesOutput, error) {
	req, out := c.SuspendProcessesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type SuspendProcessesInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	// Processes is a required field
	Processes []*string `type:"list" required:"true"`

	// ScalingGroupId is a required field
	ScalingGroupId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s SuspendProcessesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SuspendProcessesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SuspendProcessesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SuspendProcessesInput"}
	if s.Processes == nil {
		invalidParams.Add(request.NewErrParamRequired("Processes"))
	}
	if s.ScalingGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("ScalingGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *SuspendProcessesInput) SetClientToken(v string) *SuspendProcessesInput {
	s.ClientToken = &v
	return s
}

// SetProcesses sets the Processes field's value.
func (s *SuspendProcessesInput) SetProcesses(v []*string) *SuspendProcessesInput {
	s.Processes = v
	return s
}

// SetScalingGroupId sets the ScalingGroupId field's value.
func (s *SuspendProcessesInput) SetScalingGroupId(v string) *SuspendProcessesInput {
	s.ScalingGroupId = &v
	return s
}

type SuspendProcessesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s SuspendProcessesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SuspendProcessesOutput) GoString() string {
	return s.String()
}
