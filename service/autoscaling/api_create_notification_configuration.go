// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package autoscaling

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateNotificationConfigurationCommon = "CreateNotificationConfiguration"

// CreateNotificationConfigurationCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateNotificationConfigurationCommon operation. The "output" return
// value will be populated with the CreateNotificationConfigurationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNotificationConfigurationCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNotificationConfigurationCommon Send returns without error.
//
// See CreateNotificationConfigurationCommon for more information on using the CreateNotificationConfigurationCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateNotificationConfigurationCommonRequest method.
//    req, resp := client.CreateNotificationConfigurationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AUTOSCALING) CreateNotificationConfigurationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateNotificationConfigurationCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateNotificationConfigurationCommon API operation for AUTO_SCALING.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for AUTO_SCALING's
// API operation CreateNotificationConfigurationCommon for usage and error information.
func (c *AUTOSCALING) CreateNotificationConfigurationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateNotificationConfigurationCommonRequest(input)
	return out, req.Send()
}

// CreateNotificationConfigurationCommonWithContext is the same as CreateNotificationConfigurationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNotificationConfigurationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AUTOSCALING) CreateNotificationConfigurationCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateNotificationConfigurationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateNotificationConfiguration = "CreateNotificationConfiguration"

// CreateNotificationConfigurationRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateNotificationConfiguration operation. The "output" return
// value will be populated with the CreateNotificationConfigurationCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNotificationConfigurationCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNotificationConfigurationCommon Send returns without error.
//
// See CreateNotificationConfiguration for more information on using the CreateNotificationConfiguration
// API call, and error handling.
//
//    // Example sending a request using the CreateNotificationConfigurationRequest method.
//    req, resp := client.CreateNotificationConfigurationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *AUTOSCALING) CreateNotificationConfigurationRequest(input *CreateNotificationConfigurationInput) (req *request.Request, output *CreateNotificationConfigurationOutput) {
	op := &request.Operation{
		Name:       opCreateNotificationConfiguration,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateNotificationConfigurationInput{}
	}

	output = &CreateNotificationConfigurationOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateNotificationConfiguration API operation for AUTO_SCALING.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for AUTO_SCALING's
// API operation CreateNotificationConfiguration for usage and error information.
func (c *AUTOSCALING) CreateNotificationConfiguration(input *CreateNotificationConfigurationInput) (*CreateNotificationConfigurationOutput, error) {
	req, out := c.CreateNotificationConfigurationRequest(input)
	return out, req.Send()
}

// CreateNotificationConfigurationWithContext is the same as CreateNotificationConfiguration with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNotificationConfiguration for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *AUTOSCALING) CreateNotificationConfigurationWithContext(ctx byteplus.Context, input *CreateNotificationConfigurationInput, opts ...request.Option) (*CreateNotificationConfigurationOutput, error) {
	req, out := c.CreateNotificationConfigurationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateNotificationConfigurationInput struct {
	_ struct{} `type:"structure"`

	// EventTypes is a required field
	EventTypes []*string `type:"list" required:"true"`

	// NotificationType is a required field
	NotificationType *string `type:"string" required:"true"`

	// ScalingGroupId is a required field
	ScalingGroupId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateNotificationConfigurationInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNotificationConfigurationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateNotificationConfigurationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateNotificationConfigurationInput"}
	if s.EventTypes == nil {
		invalidParams.Add(request.NewErrParamRequired("EventTypes"))
	}
	if s.NotificationType == nil {
		invalidParams.Add(request.NewErrParamRequired("NotificationType"))
	}
	if s.ScalingGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("ScalingGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEventTypes sets the EventTypes field's value.
func (s *CreateNotificationConfigurationInput) SetEventTypes(v []*string) *CreateNotificationConfigurationInput {
	s.EventTypes = v
	return s
}

// SetNotificationType sets the NotificationType field's value.
func (s *CreateNotificationConfigurationInput) SetNotificationType(v string) *CreateNotificationConfigurationInput {
	s.NotificationType = &v
	return s
}

// SetScalingGroupId sets the ScalingGroupId field's value.
func (s *CreateNotificationConfigurationInput) SetScalingGroupId(v string) *CreateNotificationConfigurationInput {
	s.ScalingGroupId = &v
	return s
}

type CreateNotificationConfigurationOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CreateNotificationConfigurationOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNotificationConfigurationOutput) GoString() string {
	return s.String()
}
