// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package natgateway

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeSessionLogsCommon = "DescribeSessionLogs"

// DescribeSessionLogsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeSessionLogsCommon operation. The "output" return
// value will be populated with the DescribeSessionLogsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSessionLogsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSessionLogsCommon Send returns without error.
//
// See DescribeSessionLogsCommon for more information on using the DescribeSessionLogsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeSessionLogsCommonRequest method.
//    req, resp := client.DescribeSessionLogsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DescribeSessionLogsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeSessionLogsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSessionLogsCommon API operation for NATGATEWAY.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for NATGATEWAY's
// API operation DescribeSessionLogsCommon for usage and error information.
func (c *NATGATEWAY) DescribeSessionLogsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeSessionLogsCommonRequest(input)
	return out, req.Send()
}

// DescribeSessionLogsCommonWithContext is the same as DescribeSessionLogsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSessionLogsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DescribeSessionLogsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeSessionLogsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSessionLogs = "DescribeSessionLogs"

// DescribeSessionLogsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeSessionLogs operation. The "output" return
// value will be populated with the DescribeSessionLogsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSessionLogsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSessionLogsCommon Send returns without error.
//
// See DescribeSessionLogs for more information on using the DescribeSessionLogs
// API call, and error handling.
//
//    // Example sending a request using the DescribeSessionLogsRequest method.
//    req, resp := client.DescribeSessionLogsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DescribeSessionLogsRequest(input *DescribeSessionLogsInput) (req *request.Request, output *DescribeSessionLogsOutput) {
	op := &request.Operation{
		Name:       opDescribeSessionLogs,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSessionLogsInput{}
	}

	output = &DescribeSessionLogsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSessionLogs API operation for NATGATEWAY.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for NATGATEWAY's
// API operation DescribeSessionLogs for usage and error information.
func (c *NATGATEWAY) DescribeSessionLogs(input *DescribeSessionLogsInput) (*DescribeSessionLogsOutput, error) {
	req, out := c.DescribeSessionLogsRequest(input)
	return out, req.Send()
}

// DescribeSessionLogsWithContext is the same as DescribeSessionLogs with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSessionLogs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DescribeSessionLogsWithContext(ctx byteplus.Context, input *DescribeSessionLogsInput, opts ...request.Option) (*DescribeSessionLogsOutput, error) {
	req, out := c.DescribeSessionLogsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeSessionLogsInput struct {
	_ struct{} `type:"structure"`

	NatGatewayId *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	SessionLogIds []*string `type:"list"`

	SessionLogName *string `type:"string"`

	Status *string `type:"string"`

	TlsProjectName *string `type:"string"`

	TlsTopicName *string `type:"string"`
}

// String returns the string representation
func (s DescribeSessionLogsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSessionLogsInput) GoString() string {
	return s.String()
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *DescribeSessionLogsInput) SetNatGatewayId(v string) *DescribeSessionLogsInput {
	s.NatGatewayId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeSessionLogsInput) SetPageNumber(v int64) *DescribeSessionLogsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeSessionLogsInput) SetPageSize(v int64) *DescribeSessionLogsInput {
	s.PageSize = &v
	return s
}

// SetSessionLogIds sets the SessionLogIds field's value.
func (s *DescribeSessionLogsInput) SetSessionLogIds(v []*string) *DescribeSessionLogsInput {
	s.SessionLogIds = v
	return s
}

// SetSessionLogName sets the SessionLogName field's value.
func (s *DescribeSessionLogsInput) SetSessionLogName(v string) *DescribeSessionLogsInput {
	s.SessionLogName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeSessionLogsInput) SetStatus(v string) *DescribeSessionLogsInput {
	s.Status = &v
	return s
}

// SetTlsProjectName sets the TlsProjectName field's value.
func (s *DescribeSessionLogsInput) SetTlsProjectName(v string) *DescribeSessionLogsInput {
	s.TlsProjectName = &v
	return s
}

// SetTlsTopicName sets the TlsTopicName field's value.
func (s *DescribeSessionLogsInput) SetTlsTopicName(v string) *DescribeSessionLogsInput {
	s.TlsTopicName = &v
	return s
}

type DescribeSessionLogsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	SessionLogs []*SessionLogForDescribeSessionLogsOutput `type:"list"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeSessionLogsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSessionLogsOutput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeSessionLogsOutput) SetPageNumber(v int64) *DescribeSessionLogsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeSessionLogsOutput) SetPageSize(v int64) *DescribeSessionLogsOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeSessionLogsOutput) SetRequestId(v string) *DescribeSessionLogsOutput {
	s.RequestId = &v
	return s
}

// SetSessionLogs sets the SessionLogs field's value.
func (s *DescribeSessionLogsOutput) SetSessionLogs(v []*SessionLogForDescribeSessionLogsOutput) *DescribeSessionLogsOutput {
	s.SessionLogs = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeSessionLogsOutput) SetTotalCount(v int64) *DescribeSessionLogsOutput {
	s.TotalCount = &v
	return s
}

type SessionLogForDescribeSessionLogsOutput struct {
	_ struct{} `type:"structure"`

	AggregationInterval *int64 `type:"integer"`

	Description *string `type:"string"`

	NatGatewayId *string `type:"string"`

	SessionLogId *string `type:"string"`

	SessionLogName *string `type:"string"`

	Status *string `type:"string"`

	TlsProjectId *string `type:"string"`

	TlsProjectName *string `type:"string"`

	TlsTopicId *string `type:"string"`

	TlsTopicName *string `type:"string"`
}

// String returns the string representation
func (s SessionLogForDescribeSessionLogsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SessionLogForDescribeSessionLogsOutput) GoString() string {
	return s.String()
}

// SetAggregationInterval sets the AggregationInterval field's value.
func (s *SessionLogForDescribeSessionLogsOutput) SetAggregationInterval(v int64) *SessionLogForDescribeSessionLogsOutput {
	s.AggregationInterval = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *SessionLogForDescribeSessionLogsOutput) SetDescription(v string) *SessionLogForDescribeSessionLogsOutput {
	s.Description = &v
	return s
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *SessionLogForDescribeSessionLogsOutput) SetNatGatewayId(v string) *SessionLogForDescribeSessionLogsOutput {
	s.NatGatewayId = &v
	return s
}

// SetSessionLogId sets the SessionLogId field's value.
func (s *SessionLogForDescribeSessionLogsOutput) SetSessionLogId(v string) *SessionLogForDescribeSessionLogsOutput {
	s.SessionLogId = &v
	return s
}

// SetSessionLogName sets the SessionLogName field's value.
func (s *SessionLogForDescribeSessionLogsOutput) SetSessionLogName(v string) *SessionLogForDescribeSessionLogsOutput {
	s.SessionLogName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *SessionLogForDescribeSessionLogsOutput) SetStatus(v string) *SessionLogForDescribeSessionLogsOutput {
	s.Status = &v
	return s
}

// SetTlsProjectId sets the TlsProjectId field's value.
func (s *SessionLogForDescribeSessionLogsOutput) SetTlsProjectId(v string) *SessionLogForDescribeSessionLogsOutput {
	s.TlsProjectId = &v
	return s
}

// SetTlsProjectName sets the TlsProjectName field's value.
func (s *SessionLogForDescribeSessionLogsOutput) SetTlsProjectName(v string) *SessionLogForDescribeSessionLogsOutput {
	s.TlsProjectName = &v
	return s
}

// SetTlsTopicId sets the TlsTopicId field's value.
func (s *SessionLogForDescribeSessionLogsOutput) SetTlsTopicId(v string) *SessionLogForDescribeSessionLogsOutput {
	s.TlsTopicId = &v
	return s
}

// SetTlsTopicName sets the TlsTopicName field's value.
func (s *SessionLogForDescribeSessionLogsOutput) SetTlsTopicName(v string) *SessionLogForDescribeSessionLogsOutput {
	s.TlsTopicName = &v
	return s
}
