// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package natgateway

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDisableSessionLogCommon = "DisableSessionLog"

// DisableSessionLogCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DisableSessionLogCommon operation. The "output" return
// value will be populated with the DisableSessionLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisableSessionLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisableSessionLogCommon Send returns without error.
//
// See DisableSessionLogCommon for more information on using the DisableSessionLogCommon
// API call, and error handling.
//
//    // Example sending a request using the DisableSessionLogCommonRequest method.
//    req, resp := client.DisableSessionLogCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DisableSessionLogCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDisableSessionLogCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DisableSessionLogCommon API operation for NATGATEWAY.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for NATGATEWAY's
// API operation DisableSessionLogCommon for usage and error information.
func (c *NATGATEWAY) DisableSessionLogCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DisableSessionLogCommonRequest(input)
	return out, req.Send()
}

// DisableSessionLogCommonWithContext is the same as DisableSessionLogCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DisableSessionLogCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DisableSessionLogCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DisableSessionLogCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDisableSessionLog = "DisableSessionLog"

// DisableSessionLogRequest generates a "byteplus/request.Request" representing the
// client's request for the DisableSessionLog operation. The "output" return
// value will be populated with the DisableSessionLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisableSessionLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisableSessionLogCommon Send returns without error.
//
// See DisableSessionLog for more information on using the DisableSessionLog
// API call, and error handling.
//
//    // Example sending a request using the DisableSessionLogRequest method.
//    req, resp := client.DisableSessionLogRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DisableSessionLogRequest(input *DisableSessionLogInput) (req *request.Request, output *DisableSessionLogOutput) {
	op := &request.Operation{
		Name:       opDisableSessionLog,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DisableSessionLogInput{}
	}

	output = &DisableSessionLogOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DisableSessionLog API operation for NATGATEWAY.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for NATGATEWAY's
// API operation DisableSessionLog for usage and error information.
func (c *NATGATEWAY) DisableSessionLog(input *DisableSessionLogInput) (*DisableSessionLogOutput, error) {
	req, out := c.DisableSessionLogRequest(input)
	return out, req.Send()
}

// DisableSessionLogWithContext is the same as DisableSessionLog with the addition of
// the ability to pass a context and additional request options.
//
// See DisableSessionLog for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DisableSessionLogWithContext(ctx byteplus.Context, input *DisableSessionLogInput, opts ...request.Option) (*DisableSessionLogOutput, error) {
	req, out := c.DisableSessionLogRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DisableSessionLogInput struct {
	_ struct{} `type:"structure"`

	// SessionLogId is a required field
	SessionLogId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DisableSessionLogInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableSessionLogInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DisableSessionLogInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DisableSessionLogInput"}
	if s.SessionLogId == nil {
		invalidParams.Add(request.NewErrParamRequired("SessionLogId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSessionLogId sets the SessionLogId field's value.
func (s *DisableSessionLogInput) SetSessionLogId(v string) *DisableSessionLogInput {
	s.SessionLogId = &v
	return s
}

type DisableSessionLogOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DisableSessionLogOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableSessionLogOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DisableSessionLogOutput) SetRequestId(v string) *DisableSessionLogOutput {
	s.RequestId = &v
	return s
}
