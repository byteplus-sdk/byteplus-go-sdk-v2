// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package natgateway

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateSessionLogCommon = "CreateSessionLog"

// CreateSessionLogCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateSessionLogCommon operation. The "output" return
// value will be populated with the CreateSessionLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSessionLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSessionLogCommon Send returns without error.
//
// See CreateSessionLogCommon for more information on using the CreateSessionLogCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateSessionLogCommonRequest method.
//    req, resp := client.CreateSessionLogCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) CreateSessionLogCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateSessionLogCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSessionLogCommon API operation for NATGATEWAY.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for NATGATEWAY's
// API operation CreateSessionLogCommon for usage and error information.
func (c *NATGATEWAY) CreateSessionLogCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateSessionLogCommonRequest(input)
	return out, req.Send()
}

// CreateSessionLogCommonWithContext is the same as CreateSessionLogCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSessionLogCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) CreateSessionLogCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateSessionLogCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateSessionLog = "CreateSessionLog"

// CreateSessionLogRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateSessionLog operation. The "output" return
// value will be populated with the CreateSessionLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSessionLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSessionLogCommon Send returns without error.
//
// See CreateSessionLog for more information on using the CreateSessionLog
// API call, and error handling.
//
//    // Example sending a request using the CreateSessionLogRequest method.
//    req, resp := client.CreateSessionLogRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) CreateSessionLogRequest(input *CreateSessionLogInput) (req *request.Request, output *CreateSessionLogOutput) {
	op := &request.Operation{
		Name:       opCreateSessionLog,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateSessionLogInput{}
	}

	output = &CreateSessionLogOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSessionLog API operation for NATGATEWAY.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for NATGATEWAY's
// API operation CreateSessionLog for usage and error information.
func (c *NATGATEWAY) CreateSessionLog(input *CreateSessionLogInput) (*CreateSessionLogOutput, error) {
	req, out := c.CreateSessionLogRequest(input)
	return out, req.Send()
}

// CreateSessionLogWithContext is the same as CreateSessionLog with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSessionLog for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) CreateSessionLogWithContext(ctx byteplus.Context, input *CreateSessionLogInput, opts ...request.Option) (*CreateSessionLogOutput, error) {
	req, out := c.CreateSessionLogRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateSessionLogInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	EnableTlsTopicIndex *bool `type:"boolean"`

	// NatGatewayId is a required field
	NatGatewayId *string `type:"string" required:"true"`

	SessionLogName *string `type:"string"`

	// TlsProjectName is a required field
	TlsProjectName *string `type:"string" required:"true"`

	// TlsTopicName is a required field
	TlsTopicName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateSessionLogInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSessionLogInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateSessionLogInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateSessionLogInput"}
	if s.NatGatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("NatGatewayId"))
	}
	if s.TlsProjectName == nil {
		invalidParams.Add(request.NewErrParamRequired("TlsProjectName"))
	}
	if s.TlsTopicName == nil {
		invalidParams.Add(request.NewErrParamRequired("TlsTopicName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateSessionLogInput) SetDescription(v string) *CreateSessionLogInput {
	s.Description = &v
	return s
}

// SetEnableTlsTopicIndex sets the EnableTlsTopicIndex field's value.
func (s *CreateSessionLogInput) SetEnableTlsTopicIndex(v bool) *CreateSessionLogInput {
	s.EnableTlsTopicIndex = &v
	return s
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *CreateSessionLogInput) SetNatGatewayId(v string) *CreateSessionLogInput {
	s.NatGatewayId = &v
	return s
}

// SetSessionLogName sets the SessionLogName field's value.
func (s *CreateSessionLogInput) SetSessionLogName(v string) *CreateSessionLogInput {
	s.SessionLogName = &v
	return s
}

// SetTlsProjectName sets the TlsProjectName field's value.
func (s *CreateSessionLogInput) SetTlsProjectName(v string) *CreateSessionLogInput {
	s.TlsProjectName = &v
	return s
}

// SetTlsTopicName sets the TlsTopicName field's value.
func (s *CreateSessionLogInput) SetTlsTopicName(v string) *CreateSessionLogInput {
	s.TlsTopicName = &v
	return s
}

type CreateSessionLogOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`

	SessionLogId *string `type:"string"`
}

// String returns the string representation
func (s CreateSessionLogOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSessionLogOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *CreateSessionLogOutput) SetRequestId(v string) *CreateSessionLogOutput {
	s.RequestId = &v
	return s
}

// SetSessionLogId sets the SessionLogId field's value.
func (s *CreateSessionLogOutput) SetSessionLogId(v string) *CreateSessionLogOutput {
	s.SessionLogId = &v
	return s
}
