// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package natgateway

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opEnableSessionLogCommon = "EnableSessionLog"

// EnableSessionLogCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the EnableSessionLogCommon operation. The "output" return
// value will be populated with the EnableSessionLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableSessionLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableSessionLogCommon Send returns without error.
//
// See EnableSessionLogCommon for more information on using the EnableSessionLogCommon
// API call, and error handling.
//
//    // Example sending a request using the EnableSessionLogCommonRequest method.
//    req, resp := client.EnableSessionLogCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) EnableSessionLogCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnableSessionLogCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// EnableSessionLogCommon API operation for NATGATEWAY.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for NATGATEWAY's
// API operation EnableSessionLogCommon for usage and error information.
func (c *NATGATEWAY) EnableSessionLogCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnableSessionLogCommonRequest(input)
	return out, req.Send()
}

// EnableSessionLogCommonWithContext is the same as EnableSessionLogCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnableSessionLogCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) EnableSessionLogCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnableSessionLogCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableSessionLog = "EnableSessionLog"

// EnableSessionLogRequest generates a "byteplus/request.Request" representing the
// client's request for the EnableSessionLog operation. The "output" return
// value will be populated with the EnableSessionLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableSessionLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableSessionLogCommon Send returns without error.
//
// See EnableSessionLog for more information on using the EnableSessionLog
// API call, and error handling.
//
//    // Example sending a request using the EnableSessionLogRequest method.
//    req, resp := client.EnableSessionLogRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) EnableSessionLogRequest(input *EnableSessionLogInput) (req *request.Request, output *EnableSessionLogOutput) {
	op := &request.Operation{
		Name:       opEnableSessionLog,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableSessionLogInput{}
	}

	output = &EnableSessionLogOutput{}
	req = c.newRequest(op, input, output)

	return
}

// EnableSessionLog API operation for NATGATEWAY.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for NATGATEWAY's
// API operation EnableSessionLog for usage and error information.
func (c *NATGATEWAY) EnableSessionLog(input *EnableSessionLogInput) (*EnableSessionLogOutput, error) {
	req, out := c.EnableSessionLogRequest(input)
	return out, req.Send()
}

// EnableSessionLogWithContext is the same as EnableSessionLog with the addition of
// the ability to pass a context and additional request options.
//
// See EnableSessionLog for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) EnableSessionLogWithContext(ctx byteplus.Context, input *EnableSessionLogInput, opts ...request.Option) (*EnableSessionLogOutput, error) {
	req, out := c.EnableSessionLogRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EnableSessionLogInput struct {
	_ struct{} `type:"structure"`

	// SessionLogId is a required field
	SessionLogId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s EnableSessionLogInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableSessionLogInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnableSessionLogInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnableSessionLogInput"}
	if s.SessionLogId == nil {
		invalidParams.Add(request.NewErrParamRequired("SessionLogId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSessionLogId sets the SessionLogId field's value.
func (s *EnableSessionLogInput) SetSessionLogId(v string) *EnableSessionLogInput {
	s.SessionLogId = &v
	return s
}

type EnableSessionLogOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s EnableSessionLogOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableSessionLogOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *EnableSessionLogOutput) SetRequestId(v string) *EnableSessionLogOutput {
	s.RequestId = &v
	return s
}
