// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package natgateway

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteSessionLogCommon = "DeleteSessionLog"

// DeleteSessionLogCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteSessionLogCommon operation. The "output" return
// value will be populated with the DeleteSessionLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSessionLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSessionLogCommon Send returns without error.
//
// See DeleteSessionLogCommon for more information on using the DeleteSessionLogCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteSessionLogCommonRequest method.
//    req, resp := client.DeleteSessionLogCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DeleteSessionLogCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteSessionLogCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteSessionLogCommon API operation for NATGATEWAY.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for NATGATEWAY's
// API operation DeleteSessionLogCommon for usage and error information.
func (c *NATGATEWAY) DeleteSessionLogCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteSessionLogCommonRequest(input)
	return out, req.Send()
}

// DeleteSessionLogCommonWithContext is the same as DeleteSessionLogCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSessionLogCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DeleteSessionLogCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteSessionLogCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteSessionLog = "DeleteSessionLog"

// DeleteSessionLogRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteSessionLog operation. The "output" return
// value will be populated with the DeleteSessionLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSessionLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSessionLogCommon Send returns without error.
//
// See DeleteSessionLog for more information on using the DeleteSessionLog
// API call, and error handling.
//
//    // Example sending a request using the DeleteSessionLogRequest method.
//    req, resp := client.DeleteSessionLogRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DeleteSessionLogRequest(input *DeleteSessionLogInput) (req *request.Request, output *DeleteSessionLogOutput) {
	op := &request.Operation{
		Name:       opDeleteSessionLog,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteSessionLogInput{}
	}

	output = &DeleteSessionLogOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteSessionLog API operation for NATGATEWAY.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for NATGATEWAY's
// API operation DeleteSessionLog for usage and error information.
func (c *NATGATEWAY) DeleteSessionLog(input *DeleteSessionLogInput) (*DeleteSessionLogOutput, error) {
	req, out := c.DeleteSessionLogRequest(input)
	return out, req.Send()
}

// DeleteSessionLogWithContext is the same as DeleteSessionLog with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSessionLog for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DeleteSessionLogWithContext(ctx byteplus.Context, input *DeleteSessionLogInput, opts ...request.Option) (*DeleteSessionLogOutput, error) {
	req, out := c.DeleteSessionLogRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteSessionLogInput struct {
	_ struct{} `type:"structure"`

	// SessionLogId is a required field
	SessionLogId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteSessionLogInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSessionLogInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteSessionLogInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteSessionLogInput"}
	if s.SessionLogId == nil {
		invalidParams.Add(request.NewErrParamRequired("SessionLogId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSessionLogId sets the SessionLogId field's value.
func (s *DeleteSessionLogInput) SetSessionLogId(v string) *DeleteSessionLogInput {
	s.SessionLogId = &v
	return s
}

type DeleteSessionLogOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteSessionLogOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSessionLogOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteSessionLogOutput) SetRequestId(v string) *DeleteSessionLogOutput {
	s.RequestId = &v
	return s
}
