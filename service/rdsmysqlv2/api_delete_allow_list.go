// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteAllowListCommon = "DeleteAllowList"

// DeleteAllowListCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteAllowListCommon operation. The "output" return
// value will be populated with the DeleteAllowListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteAllowListCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteAllowListCommon Send returns without error.
//
// See DeleteAllowListCommon for more information on using the DeleteAllowListCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteAllowListCommonRequest method.
//    req, resp := client.DeleteAllowListCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DeleteAllowListCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteAllowListCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteAllowListCommon API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation DeleteAllowListCommon for usage and error information.
func (c *RDSMYSQLV2) DeleteAllowListCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteAllowListCommonRequest(input)
	return out, req.Send()
}

// DeleteAllowListCommonWithContext is the same as DeleteAllowListCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteAllowListCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DeleteAllowListCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteAllowListCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteAllowList = "DeleteAllowList"

// DeleteAllowListRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteAllowList operation. The "output" return
// value will be populated with the DeleteAllowListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteAllowListCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteAllowListCommon Send returns without error.
//
// See DeleteAllowList for more information on using the DeleteAllowList
// API call, and error handling.
//
//    // Example sending a request using the DeleteAllowListRequest method.
//    req, resp := client.DeleteAllowListRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DeleteAllowListRequest(input *DeleteAllowListInput) (req *request.Request, output *DeleteAllowListOutput) {
	op := &request.Operation{
		Name:       opDeleteAllowList,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteAllowListInput{}
	}

	output = &DeleteAllowListOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteAllowList API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation DeleteAllowList for usage and error information.
func (c *RDSMYSQLV2) DeleteAllowList(input *DeleteAllowListInput) (*DeleteAllowListOutput, error) {
	req, out := c.DeleteAllowListRequest(input)
	return out, req.Send()
}

// DeleteAllowListWithContext is the same as DeleteAllowList with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteAllowList for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DeleteAllowListWithContext(ctx byteplus.Context, input *DeleteAllowListInput, opts ...request.Option) (*DeleteAllowListOutput, error) {
	req, out := c.DeleteAllowListRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteAllowListInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AllowListId is a required field
	AllowListId *string `type:"string" json:",omitempty" required:"true"`

	ProjectName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DeleteAllowListInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteAllowListInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteAllowListInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteAllowListInput"}
	if s.AllowListId == nil {
		invalidParams.Add(request.NewErrParamRequired("AllowListId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAllowListId sets the AllowListId field's value.
func (s *DeleteAllowListInput) SetAllowListId(v string) *DeleteAllowListInput {
	s.AllowListId = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DeleteAllowListInput) SetProjectName(v string) *DeleteAllowListInput {
	s.ProjectName = &v
	return s
}

type DeleteAllowListOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteAllowListOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteAllowListOutput) GoString() string {
	return s.String()
}
