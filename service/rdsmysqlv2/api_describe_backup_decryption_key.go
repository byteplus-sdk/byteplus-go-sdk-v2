// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeBackupDecryptionKeyCommon = "DescribeBackupDecryptionKey"

// DescribeBackupDecryptionKeyCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeBackupDecryptionKeyCommon operation. The "output" return
// value will be populated with the DescribeBackupDecryptionKeyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupDecryptionKeyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupDecryptionKeyCommon Send returns without error.
//
// See DescribeBackupDecryptionKeyCommon for more information on using the DescribeBackupDecryptionKeyCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeBackupDecryptionKeyCommonRequest method.
//    req, resp := client.DescribeBackupDecryptionKeyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeBackupDecryptionKeyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeBackupDecryptionKeyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackupDecryptionKeyCommon API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation DescribeBackupDecryptionKeyCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeBackupDecryptionKeyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupDecryptionKeyCommonRequest(input)
	return out, req.Send()
}

// DescribeBackupDecryptionKeyCommonWithContext is the same as DescribeBackupDecryptionKeyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackupDecryptionKeyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeBackupDecryptionKeyCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupDecryptionKeyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBackupDecryptionKey = "DescribeBackupDecryptionKey"

// DescribeBackupDecryptionKeyRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeBackupDecryptionKey operation. The "output" return
// value will be populated with the DescribeBackupDecryptionKeyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupDecryptionKeyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupDecryptionKeyCommon Send returns without error.
//
// See DescribeBackupDecryptionKey for more information on using the DescribeBackupDecryptionKey
// API call, and error handling.
//
//    // Example sending a request using the DescribeBackupDecryptionKeyRequest method.
//    req, resp := client.DescribeBackupDecryptionKeyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeBackupDecryptionKeyRequest(input *DescribeBackupDecryptionKeyInput) (req *request.Request, output *DescribeBackupDecryptionKeyOutput) {
	op := &request.Operation{
		Name:       opDescribeBackupDecryptionKey,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeBackupDecryptionKeyInput{}
	}

	output = &DescribeBackupDecryptionKeyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackupDecryptionKey API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation DescribeBackupDecryptionKey for usage and error information.
func (c *RDSMYSQLV2) DescribeBackupDecryptionKey(input *DescribeBackupDecryptionKeyInput) (*DescribeBackupDecryptionKeyOutput, error) {
	req, out := c.DescribeBackupDecryptionKeyRequest(input)
	return out, req.Send()
}

// DescribeBackupDecryptionKeyWithContext is the same as DescribeBackupDecryptionKey with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackupDecryptionKey for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeBackupDecryptionKeyWithContext(ctx byteplus.Context, input *DescribeBackupDecryptionKeyInput, opts ...request.Option) (*DescribeBackupDecryptionKeyOutput, error) {
	req, out := c.DescribeBackupDecryptionKeyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeBackupDecryptionKeyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// BackupId is a required field
	BackupId *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeBackupDecryptionKeyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupDecryptionKeyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeBackupDecryptionKeyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeBackupDecryptionKeyInput"}
	if s.BackupId == nil {
		invalidParams.Add(request.NewErrParamRequired("BackupId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBackupId sets the BackupId field's value.
func (s *DescribeBackupDecryptionKeyInput) SetBackupId(v string) *DescribeBackupDecryptionKeyInput {
	s.BackupId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeBackupDecryptionKeyInput) SetInstanceId(v string) *DescribeBackupDecryptionKeyInput {
	s.InstanceId = &v
	return s
}

type DescribeBackupDecryptionKeyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	DecryptionKey *string `type:"string" json:",omitempty"`

	Iv *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeBackupDecryptionKeyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupDecryptionKeyOutput) GoString() string {
	return s.String()
}

// SetDecryptionKey sets the DecryptionKey field's value.
func (s *DescribeBackupDecryptionKeyOutput) SetDecryptionKey(v string) *DescribeBackupDecryptionKeyOutput {
	s.DecryptionKey = &v
	return s
}

// SetIv sets the Iv field's value.
func (s *DescribeBackupDecryptionKeyOutput) SetIv(v string) *DescribeBackupDecryptionKeyOutput {
	s.Iv = &v
	return s
}
