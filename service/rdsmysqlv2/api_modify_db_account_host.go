// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyDBAccountHostCommon = "ModifyDBAccountHost"

// ModifyDBAccountHostCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyDBAccountHostCommon operation. The "output" return
// value will be populated with the ModifyDBAccountHostCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBAccountHostCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBAccountHostCommon Send returns without error.
//
// See ModifyDBAccountHostCommon for more information on using the ModifyDBAccountHostCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBAccountHostCommonRequest method.
//    req, resp := client.ModifyDBAccountHostCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBAccountHostCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBAccountHostCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBAccountHostCommon API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBAccountHostCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyDBAccountHostCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBAccountHostCommonRequest(input)
	return out, req.Send()
}

// ModifyDBAccountHostCommonWithContext is the same as ModifyDBAccountHostCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBAccountHostCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBAccountHostCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBAccountHostCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBAccountHost = "ModifyDBAccountHost"

// ModifyDBAccountHostRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyDBAccountHost operation. The "output" return
// value will be populated with the ModifyDBAccountHostCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBAccountHostCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBAccountHostCommon Send returns without error.
//
// See ModifyDBAccountHost for more information on using the ModifyDBAccountHost
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBAccountHostRequest method.
//    req, resp := client.ModifyDBAccountHostRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBAccountHostRequest(input *ModifyDBAccountHostInput) (req *request.Request, output *ModifyDBAccountHostOutput) {
	op := &request.Operation{
		Name:       opModifyDBAccountHost,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBAccountHostInput{}
	}

	output = &ModifyDBAccountHostOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBAccountHost API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBAccountHost for usage and error information.
func (c *RDSMYSQLV2) ModifyDBAccountHost(input *ModifyDBAccountHostInput) (*ModifyDBAccountHostOutput, error) {
	req, out := c.ModifyDBAccountHostRequest(input)
	return out, req.Send()
}

// ModifyDBAccountHostWithContext is the same as ModifyDBAccountHost with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBAccountHost for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBAccountHostWithContext(ctx byteplus.Context, input *ModifyDBAccountHostInput, opts ...request.Option) (*ModifyDBAccountHostOutput, error) {
	req, out := c.ModifyDBAccountHostRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyDBAccountHostInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// AccountName is a required field
	AccountName *string `type:"string" json:",omitempty" required:"true"`

	// Host is a required field
	Host *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// NewHost is a required field
	NewHost *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyDBAccountHostInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBAccountHostInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDBAccountHostInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDBAccountHostInput"}
	if s.AccountName == nil {
		invalidParams.Add(request.NewErrParamRequired("AccountName"))
	}
	if s.Host == nil {
		invalidParams.Add(request.NewErrParamRequired("Host"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.NewHost == nil {
		invalidParams.Add(request.NewErrParamRequired("NewHost"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccountName sets the AccountName field's value.
func (s *ModifyDBAccountHostInput) SetAccountName(v string) *ModifyDBAccountHostInput {
	s.AccountName = &v
	return s
}

// SetHost sets the Host field's value.
func (s *ModifyDBAccountHostInput) SetHost(v string) *ModifyDBAccountHostInput {
	s.Host = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBAccountHostInput) SetInstanceId(v string) *ModifyDBAccountHostInput {
	s.InstanceId = &v
	return s
}

// SetNewHost sets the NewHost field's value.
func (s *ModifyDBAccountHostInput) SetNewHost(v string) *ModifyDBAccountHostInput {
	s.NewHost = &v
	return s
}

type ModifyDBAccountHostOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyDBAccountHostOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBAccountHostOutput) GoString() string {
	return s.String()
}
