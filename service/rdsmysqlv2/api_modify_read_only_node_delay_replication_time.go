// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyReadOnlyNodeDelayReplicationTimeCommon = "ModifyReadOnlyNodeDelayReplicationTime"

// ModifyReadOnlyNodeDelayReplicationTimeCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyReadOnlyNodeDelayReplicationTimeCommon operation. The "output" return
// value will be populated with the ModifyReadOnlyNodeDelayReplicationTimeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyReadOnlyNodeDelayReplicationTimeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyReadOnlyNodeDelayReplicationTimeCommon Send returns without error.
//
// See ModifyReadOnlyNodeDelayReplicationTimeCommon for more information on using the ModifyReadOnlyNodeDelayReplicationTimeCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyReadOnlyNodeDelayReplicationTimeCommonRequest method.
//    req, resp := client.ModifyReadOnlyNodeDelayReplicationTimeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyReadOnlyNodeDelayReplicationTimeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyReadOnlyNodeDelayReplicationTimeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyReadOnlyNodeDelayReplicationTimeCommon API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation ModifyReadOnlyNodeDelayReplicationTimeCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyReadOnlyNodeDelayReplicationTimeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyReadOnlyNodeDelayReplicationTimeCommonRequest(input)
	return out, req.Send()
}

// ModifyReadOnlyNodeDelayReplicationTimeCommonWithContext is the same as ModifyReadOnlyNodeDelayReplicationTimeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyReadOnlyNodeDelayReplicationTimeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyReadOnlyNodeDelayReplicationTimeCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyReadOnlyNodeDelayReplicationTimeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyReadOnlyNodeDelayReplicationTime = "ModifyReadOnlyNodeDelayReplicationTime"

// ModifyReadOnlyNodeDelayReplicationTimeRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyReadOnlyNodeDelayReplicationTime operation. The "output" return
// value will be populated with the ModifyReadOnlyNodeDelayReplicationTimeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyReadOnlyNodeDelayReplicationTimeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyReadOnlyNodeDelayReplicationTimeCommon Send returns without error.
//
// See ModifyReadOnlyNodeDelayReplicationTime for more information on using the ModifyReadOnlyNodeDelayReplicationTime
// API call, and error handling.
//
//    // Example sending a request using the ModifyReadOnlyNodeDelayReplicationTimeRequest method.
//    req, resp := client.ModifyReadOnlyNodeDelayReplicationTimeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyReadOnlyNodeDelayReplicationTimeRequest(input *ModifyReadOnlyNodeDelayReplicationTimeInput) (req *request.Request, output *ModifyReadOnlyNodeDelayReplicationTimeOutput) {
	op := &request.Operation{
		Name:       opModifyReadOnlyNodeDelayReplicationTime,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyReadOnlyNodeDelayReplicationTimeInput{}
	}

	output = &ModifyReadOnlyNodeDelayReplicationTimeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyReadOnlyNodeDelayReplicationTime API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation ModifyReadOnlyNodeDelayReplicationTime for usage and error information.
func (c *RDSMYSQLV2) ModifyReadOnlyNodeDelayReplicationTime(input *ModifyReadOnlyNodeDelayReplicationTimeInput) (*ModifyReadOnlyNodeDelayReplicationTimeOutput, error) {
	req, out := c.ModifyReadOnlyNodeDelayReplicationTimeRequest(input)
	return out, req.Send()
}

// ModifyReadOnlyNodeDelayReplicationTimeWithContext is the same as ModifyReadOnlyNodeDelayReplicationTime with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyReadOnlyNodeDelayReplicationTime for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyReadOnlyNodeDelayReplicationTimeWithContext(ctx byteplus.Context, input *ModifyReadOnlyNodeDelayReplicationTimeInput, opts ...request.Option) (*ModifyReadOnlyNodeDelayReplicationTimeOutput, error) {
	req, out := c.ModifyReadOnlyNodeDelayReplicationTimeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyReadOnlyNodeDelayReplicationTimeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// DelayReplicationTime is a required field
	DelayReplicationTime *int64 `type:"int64" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// NodeId is a required field
	NodeId *string `type:"string" json:",omitempty" required:"true"`

	UpdateEndpointIds []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ModifyReadOnlyNodeDelayReplicationTimeInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyReadOnlyNodeDelayReplicationTimeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyReadOnlyNodeDelayReplicationTimeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyReadOnlyNodeDelayReplicationTimeInput"}
	if s.DelayReplicationTime == nil {
		invalidParams.Add(request.NewErrParamRequired("DelayReplicationTime"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.NodeId == nil {
		invalidParams.Add(request.NewErrParamRequired("NodeId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDelayReplicationTime sets the DelayReplicationTime field's value.
func (s *ModifyReadOnlyNodeDelayReplicationTimeInput) SetDelayReplicationTime(v int64) *ModifyReadOnlyNodeDelayReplicationTimeInput {
	s.DelayReplicationTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyReadOnlyNodeDelayReplicationTimeInput) SetInstanceId(v string) *ModifyReadOnlyNodeDelayReplicationTimeInput {
	s.InstanceId = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *ModifyReadOnlyNodeDelayReplicationTimeInput) SetNodeId(v string) *ModifyReadOnlyNodeDelayReplicationTimeInput {
	s.NodeId = &v
	return s
}

// SetUpdateEndpointIds sets the UpdateEndpointIds field's value.
func (s *ModifyReadOnlyNodeDelayReplicationTimeInput) SetUpdateEndpointIds(v []*string) *ModifyReadOnlyNodeDelayReplicationTimeInput {
	s.UpdateEndpointIds = v
	return s
}

type ModifyReadOnlyNodeDelayReplicationTimeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyReadOnlyNodeDelayReplicationTimeOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyReadOnlyNodeDelayReplicationTimeOutput) GoString() string {
	return s.String()
}
