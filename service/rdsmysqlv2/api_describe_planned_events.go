// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribePlannedEventsCommon = "DescribePlannedEvents"

// DescribePlannedEventsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribePlannedEventsCommon operation. The "output" return
// value will be populated with the DescribePlannedEventsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribePlannedEventsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribePlannedEventsCommon Send returns without error.
//
// See DescribePlannedEventsCommon for more information on using the DescribePlannedEventsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribePlannedEventsCommonRequest method.
//    req, resp := client.DescribePlannedEventsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribePlannedEventsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribePlannedEventsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribePlannedEventsCommon API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation DescribePlannedEventsCommon for usage and error information.
func (c *RDSMYSQLV2) DescribePlannedEventsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribePlannedEventsCommonRequest(input)
	return out, req.Send()
}

// DescribePlannedEventsCommonWithContext is the same as DescribePlannedEventsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribePlannedEventsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribePlannedEventsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribePlannedEventsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribePlannedEvents = "DescribePlannedEvents"

// DescribePlannedEventsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribePlannedEvents operation. The "output" return
// value will be populated with the DescribePlannedEventsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribePlannedEventsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribePlannedEventsCommon Send returns without error.
//
// See DescribePlannedEvents for more information on using the DescribePlannedEvents
// API call, and error handling.
//
//    // Example sending a request using the DescribePlannedEventsRequest method.
//    req, resp := client.DescribePlannedEventsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribePlannedEventsRequest(input *DescribePlannedEventsInput) (req *request.Request, output *DescribePlannedEventsOutput) {
	op := &request.Operation{
		Name:       opDescribePlannedEvents,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribePlannedEventsInput{}
	}

	output = &DescribePlannedEventsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribePlannedEvents API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation DescribePlannedEvents for usage and error information.
func (c *RDSMYSQLV2) DescribePlannedEvents(input *DescribePlannedEventsInput) (*DescribePlannedEventsOutput, error) {
	req, out := c.DescribePlannedEventsRequest(input)
	return out, req.Send()
}

// DescribePlannedEventsWithContext is the same as DescribePlannedEvents with the addition of
// the ability to pass a context and additional request options.
//
// See DescribePlannedEvents for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribePlannedEventsWithContext(ctx byteplus.Context, input *DescribePlannedEventsInput, opts ...request.Option) (*DescribePlannedEventsOutput, error) {
	req, out := c.DescribePlannedEventsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribePlannedEventsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BeginTime *string `type:"string" json:",omitempty"`

	EndTime *string `type:"string" json:",omitempty"`

	EventId *string `type:"string" json:",omitempty"`

	EventType []*string `type:"list" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	Status []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DescribePlannedEventsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribePlannedEventsInput) GoString() string {
	return s.String()
}

// SetBeginTime sets the BeginTime field's value.
func (s *DescribePlannedEventsInput) SetBeginTime(v string) *DescribePlannedEventsInput {
	s.BeginTime = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *DescribePlannedEventsInput) SetEndTime(v string) *DescribePlannedEventsInput {
	s.EndTime = &v
	return s
}

// SetEventId sets the EventId field's value.
func (s *DescribePlannedEventsInput) SetEventId(v string) *DescribePlannedEventsInput {
	s.EventId = &v
	return s
}

// SetEventType sets the EventType field's value.
func (s *DescribePlannedEventsInput) SetEventType(v []*string) *DescribePlannedEventsInput {
	s.EventType = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribePlannedEventsInput) SetInstanceId(v string) *DescribePlannedEventsInput {
	s.InstanceId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribePlannedEventsInput) SetStatus(v []*string) *DescribePlannedEventsInput {
	s.Status = v
	return s
}

type DescribePlannedEventsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	PlannedEvents []*PlannedEventForDescribePlannedEventsOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribePlannedEventsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribePlannedEventsOutput) GoString() string {
	return s.String()
}

// SetPlannedEvents sets the PlannedEvents field's value.
func (s *DescribePlannedEventsOutput) SetPlannedEvents(v []*PlannedEventForDescribePlannedEventsOutput) *DescribePlannedEventsOutput {
	s.PlannedEvents = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribePlannedEventsOutput) SetTotal(v int32) *DescribePlannedEventsOutput {
	s.Total = &v
	return s
}

type PlannedEventForDescribePlannedEventsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BusinessImpact *string `type:"string" json:",omitempty"`

	DBEngine *string `type:"string" json:",omitempty"`

	EventAction *string `type:"string" json:",omitempty"`

	EventID *string `type:"string" json:",omitempty"`

	EventName *string `type:"string" json:",omitempty"`

	EventType *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	InstanceName *string `type:"string" json:",omitempty"`

	MaxDelayTime *string `type:"string" json:",omitempty"`

	OriginBeginTime *string `type:"string" json:",omitempty"`

	PlannedBeginTime *string `type:"string" json:",omitempty"`

	PlannedEndTime *string `type:"string" json:",omitempty"`

	PlannedEventDescription *string `type:"string" json:",omitempty"`

	PlannedEventReason *string `type:"string" json:",omitempty"`

	PlannedSwitchBeginTime *string `type:"string" json:",omitempty"`

	PlannedSwitchEndTime *string `type:"string" json:",omitempty"`

	Region *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PlannedEventForDescribePlannedEventsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s PlannedEventForDescribePlannedEventsOutput) GoString() string {
	return s.String()
}

// SetBusinessImpact sets the BusinessImpact field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetBusinessImpact(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.BusinessImpact = &v
	return s
}

// SetDBEngine sets the DBEngine field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetDBEngine(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.DBEngine = &v
	return s
}

// SetEventAction sets the EventAction field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetEventAction(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.EventAction = &v
	return s
}

// SetEventID sets the EventID field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetEventID(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.EventID = &v
	return s
}

// SetEventName sets the EventName field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetEventName(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.EventName = &v
	return s
}

// SetEventType sets the EventType field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetEventType(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.EventType = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetInstanceId(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.InstanceId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetInstanceName(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.InstanceName = &v
	return s
}

// SetMaxDelayTime sets the MaxDelayTime field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetMaxDelayTime(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.MaxDelayTime = &v
	return s
}

// SetOriginBeginTime sets the OriginBeginTime field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetOriginBeginTime(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.OriginBeginTime = &v
	return s
}

// SetPlannedBeginTime sets the PlannedBeginTime field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetPlannedBeginTime(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.PlannedBeginTime = &v
	return s
}

// SetPlannedEndTime sets the PlannedEndTime field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetPlannedEndTime(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.PlannedEndTime = &v
	return s
}

// SetPlannedEventDescription sets the PlannedEventDescription field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetPlannedEventDescription(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.PlannedEventDescription = &v
	return s
}

// SetPlannedEventReason sets the PlannedEventReason field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetPlannedEventReason(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.PlannedEventReason = &v
	return s
}

// SetPlannedSwitchBeginTime sets the PlannedSwitchBeginTime field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetPlannedSwitchBeginTime(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.PlannedSwitchBeginTime = &v
	return s
}

// SetPlannedSwitchEndTime sets the PlannedSwitchEndTime field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetPlannedSwitchEndTime(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.PlannedSwitchEndTime = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetRegion(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.Region = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *PlannedEventForDescribePlannedEventsOutput) SetStatus(v string) *PlannedEventForDescribePlannedEventsOutput {
	s.Status = &v
	return s
}
