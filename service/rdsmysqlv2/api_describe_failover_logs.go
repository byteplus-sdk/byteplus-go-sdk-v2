// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeFailoverLogsCommon = "DescribeFailoverLogs"

// DescribeFailoverLogsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeFailoverLogsCommon operation. The "output" return
// value will be populated with the DescribeFailoverLogsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeFailoverLogsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeFailoverLogsCommon Send returns without error.
//
// See DescribeFailoverLogsCommon for more information on using the DescribeFailoverLogsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeFailoverLogsCommonRequest method.
//    req, resp := client.DescribeFailoverLogsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeFailoverLogsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeFailoverLogsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeFailoverLogsCommon API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation DescribeFailoverLogsCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeFailoverLogsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeFailoverLogsCommonRequest(input)
	return out, req.Send()
}

// DescribeFailoverLogsCommonWithContext is the same as DescribeFailoverLogsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeFailoverLogsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeFailoverLogsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeFailoverLogsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeFailoverLogs = "DescribeFailoverLogs"

// DescribeFailoverLogsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeFailoverLogs operation. The "output" return
// value will be populated with the DescribeFailoverLogsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeFailoverLogsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeFailoverLogsCommon Send returns without error.
//
// See DescribeFailoverLogs for more information on using the DescribeFailoverLogs
// API call, and error handling.
//
//    // Example sending a request using the DescribeFailoverLogsRequest method.
//    req, resp := client.DescribeFailoverLogsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeFailoverLogsRequest(input *DescribeFailoverLogsInput) (req *request.Request, output *DescribeFailoverLogsOutput) {
	op := &request.Operation{
		Name:       opDescribeFailoverLogs,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeFailoverLogsInput{}
	}

	output = &DescribeFailoverLogsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeFailoverLogs API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation DescribeFailoverLogs for usage and error information.
func (c *RDSMYSQLV2) DescribeFailoverLogs(input *DescribeFailoverLogsInput) (*DescribeFailoverLogsOutput, error) {
	req, out := c.DescribeFailoverLogsRequest(input)
	return out, req.Send()
}

// DescribeFailoverLogsWithContext is the same as DescribeFailoverLogs with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeFailoverLogs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeFailoverLogsWithContext(ctx byteplus.Context, input *DescribeFailoverLogsInput, opts ...request.Option) (*DescribeFailoverLogsOutput, error) {
	req, out := c.DescribeFailoverLogsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeFailoverLogsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	EndTime *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	Limit *int32 `type:"int32" json:",omitempty"`

	Offset *int32 `type:"int32" json:",omitempty"`

	StartTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeFailoverLogsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeFailoverLogsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeFailoverLogsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeFailoverLogsInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEndTime sets the EndTime field's value.
func (s *DescribeFailoverLogsInput) SetEndTime(v string) *DescribeFailoverLogsInput {
	s.EndTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeFailoverLogsInput) SetInstanceId(v string) *DescribeFailoverLogsInput {
	s.InstanceId = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *DescribeFailoverLogsInput) SetLimit(v int32) *DescribeFailoverLogsInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *DescribeFailoverLogsInput) SetOffset(v int32) *DescribeFailoverLogsInput {
	s.Offset = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DescribeFailoverLogsInput) SetStartTime(v string) *DescribeFailoverLogsInput {
	s.StartTime = &v
	return s
}

type DescribeFailoverLogsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	FailoverQueryInfos []*FailoverQueryInfoForDescribeFailoverLogsOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeFailoverLogsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeFailoverLogsOutput) GoString() string {
	return s.String()
}

// SetFailoverQueryInfos sets the FailoverQueryInfos field's value.
func (s *DescribeFailoverLogsOutput) SetFailoverQueryInfos(v []*FailoverQueryInfoForDescribeFailoverLogsOutput) *DescribeFailoverLogsOutput {
	s.FailoverQueryInfos = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeFailoverLogsOutput) SetTotal(v int32) *DescribeFailoverLogsOutput {
	s.Total = &v
	return s
}

type FailoverQueryInfoForDescribeFailoverLogsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ChangeTime *string `type:"string" json:",omitempty"`

	Details *string `type:"string" json:",omitempty"`

	HAChangeType *string `type:"string" json:",omitempty"`

	NewMaster *string `type:"string" json:",omitempty"`

	OldMaster *string `type:"string" json:",omitempty"`

	Reason *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FailoverQueryInfoForDescribeFailoverLogsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s FailoverQueryInfoForDescribeFailoverLogsOutput) GoString() string {
	return s.String()
}

// SetChangeTime sets the ChangeTime field's value.
func (s *FailoverQueryInfoForDescribeFailoverLogsOutput) SetChangeTime(v string) *FailoverQueryInfoForDescribeFailoverLogsOutput {
	s.ChangeTime = &v
	return s
}

// SetDetails sets the Details field's value.
func (s *FailoverQueryInfoForDescribeFailoverLogsOutput) SetDetails(v string) *FailoverQueryInfoForDescribeFailoverLogsOutput {
	s.Details = &v
	return s
}

// SetHAChangeType sets the HAChangeType field's value.
func (s *FailoverQueryInfoForDescribeFailoverLogsOutput) SetHAChangeType(v string) *FailoverQueryInfoForDescribeFailoverLogsOutput {
	s.HAChangeType = &v
	return s
}

// SetNewMaster sets the NewMaster field's value.
func (s *FailoverQueryInfoForDescribeFailoverLogsOutput) SetNewMaster(v string) *FailoverQueryInfoForDescribeFailoverLogsOutput {
	s.NewMaster = &v
	return s
}

// SetOldMaster sets the OldMaster field's value.
func (s *FailoverQueryInfoForDescribeFailoverLogsOutput) SetOldMaster(v string) *FailoverQueryInfoForDescribeFailoverLogsOutput {
	s.OldMaster = &v
	return s
}

// SetReason sets the Reason field's value.
func (s *FailoverQueryInfoForDescribeFailoverLogsOutput) SetReason(v string) *FailoverQueryInfoForDescribeFailoverLogsOutput {
	s.Reason = &v
	return s
}
