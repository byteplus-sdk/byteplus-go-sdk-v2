// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyDBProxyConfigCommon = "ModifyDBProxyConfig"

// ModifyDBProxyConfigCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyDBProxyConfigCommon operation. The "output" return
// value will be populated with the ModifyDBProxyConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBProxyConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBProxyConfigCommon Send returns without error.
//
// See ModifyDBProxyConfigCommon for more information on using the ModifyDBProxyConfigCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBProxyConfigCommonRequest method.
//    req, resp := client.ModifyDBProxyConfigCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBProxyConfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBProxyConfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBProxyConfigCommon API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBProxyConfigCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyDBProxyConfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBProxyConfigCommonRequest(input)
	return out, req.Send()
}

// ModifyDBProxyConfigCommonWithContext is the same as ModifyDBProxyConfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBProxyConfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBProxyConfigCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBProxyConfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBProxyConfig = "ModifyDBProxyConfig"

// ModifyDBProxyConfigRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyDBProxyConfig operation. The "output" return
// value will be populated with the ModifyDBProxyConfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBProxyConfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBProxyConfigCommon Send returns without error.
//
// See ModifyDBProxyConfig for more information on using the ModifyDBProxyConfig
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBProxyConfigRequest method.
//    req, resp := client.ModifyDBProxyConfigRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBProxyConfigRequest(input *ModifyDBProxyConfigInput) (req *request.Request, output *ModifyDBProxyConfigOutput) {
	op := &request.Operation{
		Name:       opModifyDBProxyConfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBProxyConfigInput{}
	}

	output = &ModifyDBProxyConfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBProxyConfig API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBProxyConfig for usage and error information.
func (c *RDSMYSQLV2) ModifyDBProxyConfig(input *ModifyDBProxyConfigInput) (*ModifyDBProxyConfigOutput, error) {
	req, out := c.ModifyDBProxyConfigRequest(input)
	return out, req.Send()
}

// ModifyDBProxyConfigWithContext is the same as ModifyDBProxyConfig with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBProxyConfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBProxyConfigWithContext(ctx byteplus.Context, input *ModifyDBProxyConfigInput, opts ...request.Option) (*ModifyDBProxyConfigOutput, error) {
	req, out := c.ModifyDBProxyConfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyDBProxyConfigInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ConnectionPoolType *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyDBProxyConfigInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBProxyConfigInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDBProxyConfigInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDBProxyConfigInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConnectionPoolType sets the ConnectionPoolType field's value.
func (s *ModifyDBProxyConfigInput) SetConnectionPoolType(v string) *ModifyDBProxyConfigInput {
	s.ConnectionPoolType = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBProxyConfigInput) SetInstanceId(v string) *ModifyDBProxyConfigInput {
	s.InstanceId = &v
	return s
}

type ModifyDBProxyConfigOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyDBProxyConfigOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBProxyConfigOutput) GoString() string {
	return s.String()
}
