// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyPlannedEventExecuteTimeCommon = "ModifyPlannedEventExecuteTime"

// ModifyPlannedEventExecuteTimeCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyPlannedEventExecuteTimeCommon operation. The "output" return
// value will be populated with the ModifyPlannedEventExecuteTimeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyPlannedEventExecuteTimeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyPlannedEventExecuteTimeCommon Send returns without error.
//
// See ModifyPlannedEventExecuteTimeCommon for more information on using the ModifyPlannedEventExecuteTimeCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyPlannedEventExecuteTimeCommonRequest method.
//    req, resp := client.ModifyPlannedEventExecuteTimeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyPlannedEventExecuteTimeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyPlannedEventExecuteTimeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyPlannedEventExecuteTimeCommon API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation ModifyPlannedEventExecuteTimeCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyPlannedEventExecuteTimeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyPlannedEventExecuteTimeCommonRequest(input)
	return out, req.Send()
}

// ModifyPlannedEventExecuteTimeCommonWithContext is the same as ModifyPlannedEventExecuteTimeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyPlannedEventExecuteTimeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyPlannedEventExecuteTimeCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyPlannedEventExecuteTimeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyPlannedEventExecuteTime = "ModifyPlannedEventExecuteTime"

// ModifyPlannedEventExecuteTimeRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyPlannedEventExecuteTime operation. The "output" return
// value will be populated with the ModifyPlannedEventExecuteTimeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyPlannedEventExecuteTimeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyPlannedEventExecuteTimeCommon Send returns without error.
//
// See ModifyPlannedEventExecuteTime for more information on using the ModifyPlannedEventExecuteTime
// API call, and error handling.
//
//    // Example sending a request using the ModifyPlannedEventExecuteTimeRequest method.
//    req, resp := client.ModifyPlannedEventExecuteTimeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyPlannedEventExecuteTimeRequest(input *ModifyPlannedEventExecuteTimeInput) (req *request.Request, output *ModifyPlannedEventExecuteTimeOutput) {
	op := &request.Operation{
		Name:       opModifyPlannedEventExecuteTime,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyPlannedEventExecuteTimeInput{}
	}

	output = &ModifyPlannedEventExecuteTimeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyPlannedEventExecuteTime API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation ModifyPlannedEventExecuteTime for usage and error information.
func (c *RDSMYSQLV2) ModifyPlannedEventExecuteTime(input *ModifyPlannedEventExecuteTimeInput) (*ModifyPlannedEventExecuteTimeOutput, error) {
	req, out := c.ModifyPlannedEventExecuteTimeRequest(input)
	return out, req.Send()
}

// ModifyPlannedEventExecuteTimeWithContext is the same as ModifyPlannedEventExecuteTime with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyPlannedEventExecuteTime for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyPlannedEventExecuteTimeWithContext(ctx byteplus.Context, input *ModifyPlannedEventExecuteTimeInput, opts ...request.Option) (*ModifyPlannedEventExecuteTimeOutput, error) {
	req, out := c.ModifyPlannedEventExecuteTimeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyPlannedEventExecuteTimeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// EventId is a required field
	EventId *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	ModifyBeginTime *string `type:"string" json:",omitempty"`

	ModifyEndTime *string `type:"string" json:",omitempty"`

	ProjectName *string `type:"string" json:",omitempty"`

	// TaskEventOperation is a required field
	TaskEventOperation *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyPlannedEventExecuteTimeInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyPlannedEventExecuteTimeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyPlannedEventExecuteTimeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyPlannedEventExecuteTimeInput"}
	if s.EventId == nil {
		invalidParams.Add(request.NewErrParamRequired("EventId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.TaskEventOperation == nil {
		invalidParams.Add(request.NewErrParamRequired("TaskEventOperation"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEventId sets the EventId field's value.
func (s *ModifyPlannedEventExecuteTimeInput) SetEventId(v string) *ModifyPlannedEventExecuteTimeInput {
	s.EventId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyPlannedEventExecuteTimeInput) SetInstanceId(v string) *ModifyPlannedEventExecuteTimeInput {
	s.InstanceId = &v
	return s
}

// SetModifyBeginTime sets the ModifyBeginTime field's value.
func (s *ModifyPlannedEventExecuteTimeInput) SetModifyBeginTime(v string) *ModifyPlannedEventExecuteTimeInput {
	s.ModifyBeginTime = &v
	return s
}

// SetModifyEndTime sets the ModifyEndTime field's value.
func (s *ModifyPlannedEventExecuteTimeInput) SetModifyEndTime(v string) *ModifyPlannedEventExecuteTimeInput {
	s.ModifyEndTime = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *ModifyPlannedEventExecuteTimeInput) SetProjectName(v string) *ModifyPlannedEventExecuteTimeInput {
	s.ProjectName = &v
	return s
}

// SetTaskEventOperation sets the TaskEventOperation field's value.
func (s *ModifyPlannedEventExecuteTimeInput) SetTaskEventOperation(v string) *ModifyPlannedEventExecuteTimeInput {
	s.TaskEventOperation = &v
	return s
}

type ModifyPlannedEventExecuteTimeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyPlannedEventExecuteTimeOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyPlannedEventExecuteTimeOutput) GoString() string {
	return s.String()
}
