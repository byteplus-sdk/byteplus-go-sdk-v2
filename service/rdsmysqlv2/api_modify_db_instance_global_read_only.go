// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyDBInstanceGlobalReadOnlyCommon = "ModifyDBInstanceGlobalReadOnly"

// ModifyDBInstanceGlobalReadOnlyCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyDBInstanceGlobalReadOnlyCommon operation. The "output" return
// value will be populated with the ModifyDBInstanceGlobalReadOnlyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBInstanceGlobalReadOnlyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBInstanceGlobalReadOnlyCommon Send returns without error.
//
// See ModifyDBInstanceGlobalReadOnlyCommon for more information on using the ModifyDBInstanceGlobalReadOnlyCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBInstanceGlobalReadOnlyCommonRequest method.
//    req, resp := client.ModifyDBInstanceGlobalReadOnlyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBInstanceGlobalReadOnlyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBInstanceGlobalReadOnlyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBInstanceGlobalReadOnlyCommon API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBInstanceGlobalReadOnlyCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyDBInstanceGlobalReadOnlyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBInstanceGlobalReadOnlyCommonRequest(input)
	return out, req.Send()
}

// ModifyDBInstanceGlobalReadOnlyCommonWithContext is the same as ModifyDBInstanceGlobalReadOnlyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBInstanceGlobalReadOnlyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBInstanceGlobalReadOnlyCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBInstanceGlobalReadOnlyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBInstanceGlobalReadOnly = "ModifyDBInstanceGlobalReadOnly"

// ModifyDBInstanceGlobalReadOnlyRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyDBInstanceGlobalReadOnly operation. The "output" return
// value will be populated with the ModifyDBInstanceGlobalReadOnlyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBInstanceGlobalReadOnlyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBInstanceGlobalReadOnlyCommon Send returns without error.
//
// See ModifyDBInstanceGlobalReadOnly for more information on using the ModifyDBInstanceGlobalReadOnly
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBInstanceGlobalReadOnlyRequest method.
//    req, resp := client.ModifyDBInstanceGlobalReadOnlyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBInstanceGlobalReadOnlyRequest(input *ModifyDBInstanceGlobalReadOnlyInput) (req *request.Request, output *ModifyDBInstanceGlobalReadOnlyOutput) {
	op := &request.Operation{
		Name:       opModifyDBInstanceGlobalReadOnly,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBInstanceGlobalReadOnlyInput{}
	}

	output = &ModifyDBInstanceGlobalReadOnlyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBInstanceGlobalReadOnly API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBInstanceGlobalReadOnly for usage and error information.
func (c *RDSMYSQLV2) ModifyDBInstanceGlobalReadOnly(input *ModifyDBInstanceGlobalReadOnlyInput) (*ModifyDBInstanceGlobalReadOnlyOutput, error) {
	req, out := c.ModifyDBInstanceGlobalReadOnlyRequest(input)
	return out, req.Send()
}

// ModifyDBInstanceGlobalReadOnlyWithContext is the same as ModifyDBInstanceGlobalReadOnly with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBInstanceGlobalReadOnly for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBInstanceGlobalReadOnlyWithContext(ctx byteplus.Context, input *ModifyDBInstanceGlobalReadOnlyInput, opts ...request.Option) (*ModifyDBInstanceGlobalReadOnlyOutput, error) {
	req, out := c.ModifyDBInstanceGlobalReadOnlyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyDBInstanceGlobalReadOnlyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// GlobalReadOnly is a required field
	GlobalReadOnly *bool `type:"boolean" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyDBInstanceGlobalReadOnlyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceGlobalReadOnlyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDBInstanceGlobalReadOnlyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDBInstanceGlobalReadOnlyInput"}
	if s.GlobalReadOnly == nil {
		invalidParams.Add(request.NewErrParamRequired("GlobalReadOnly"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetGlobalReadOnly sets the GlobalReadOnly field's value.
func (s *ModifyDBInstanceGlobalReadOnlyInput) SetGlobalReadOnly(v bool) *ModifyDBInstanceGlobalReadOnlyInput {
	s.GlobalReadOnly = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBInstanceGlobalReadOnlyInput) SetInstanceId(v string) *ModifyDBInstanceGlobalReadOnlyInput {
	s.InstanceId = &v
	return s
}

type ModifyDBInstanceGlobalReadOnlyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyDBInstanceGlobalReadOnlyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceGlobalReadOnlyOutput) GoString() string {
	return s.String()
}
