// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyBackupEncryptionPolicyCommon = "ModifyBackupEncryptionPolicy"

// ModifyBackupEncryptionPolicyCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyBackupEncryptionPolicyCommon operation. The "output" return
// value will be populated with the ModifyBackupEncryptionPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyBackupEncryptionPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyBackupEncryptionPolicyCommon Send returns without error.
//
// See ModifyBackupEncryptionPolicyCommon for more information on using the ModifyBackupEncryptionPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyBackupEncryptionPolicyCommonRequest method.
//    req, resp := client.ModifyBackupEncryptionPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyBackupEncryptionPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyBackupEncryptionPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyBackupEncryptionPolicyCommon API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation ModifyBackupEncryptionPolicyCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyBackupEncryptionPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyBackupEncryptionPolicyCommonRequest(input)
	return out, req.Send()
}

// ModifyBackupEncryptionPolicyCommonWithContext is the same as ModifyBackupEncryptionPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyBackupEncryptionPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyBackupEncryptionPolicyCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyBackupEncryptionPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyBackupEncryptionPolicy = "ModifyBackupEncryptionPolicy"

// ModifyBackupEncryptionPolicyRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyBackupEncryptionPolicy operation. The "output" return
// value will be populated with the ModifyBackupEncryptionPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyBackupEncryptionPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyBackupEncryptionPolicyCommon Send returns without error.
//
// See ModifyBackupEncryptionPolicy for more information on using the ModifyBackupEncryptionPolicy
// API call, and error handling.
//
//    // Example sending a request using the ModifyBackupEncryptionPolicyRequest method.
//    req, resp := client.ModifyBackupEncryptionPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyBackupEncryptionPolicyRequest(input *ModifyBackupEncryptionPolicyInput) (req *request.Request, output *ModifyBackupEncryptionPolicyOutput) {
	op := &request.Operation{
		Name:       opModifyBackupEncryptionPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyBackupEncryptionPolicyInput{}
	}

	output = &ModifyBackupEncryptionPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyBackupEncryptionPolicy API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation ModifyBackupEncryptionPolicy for usage and error information.
func (c *RDSMYSQLV2) ModifyBackupEncryptionPolicy(input *ModifyBackupEncryptionPolicyInput) (*ModifyBackupEncryptionPolicyOutput, error) {
	req, out := c.ModifyBackupEncryptionPolicyRequest(input)
	return out, req.Send()
}

// ModifyBackupEncryptionPolicyWithContext is the same as ModifyBackupEncryptionPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyBackupEncryptionPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyBackupEncryptionPolicyWithContext(ctx byteplus.Context, input *ModifyBackupEncryptionPolicyInput, opts ...request.Option) (*ModifyBackupEncryptionPolicyOutput, error) {
	req, out := c.ModifyBackupEncryptionPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyBackupEncryptionPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	DataBackupEnabled *bool `type:"boolean" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	LogBackupEnabled *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s ModifyBackupEncryptionPolicyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyBackupEncryptionPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyBackupEncryptionPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyBackupEncryptionPolicyInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDataBackupEnabled sets the DataBackupEnabled field's value.
func (s *ModifyBackupEncryptionPolicyInput) SetDataBackupEnabled(v bool) *ModifyBackupEncryptionPolicyInput {
	s.DataBackupEnabled = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyBackupEncryptionPolicyInput) SetInstanceId(v string) *ModifyBackupEncryptionPolicyInput {
	s.InstanceId = &v
	return s
}

// SetLogBackupEnabled sets the LogBackupEnabled field's value.
func (s *ModifyBackupEncryptionPolicyInput) SetLogBackupEnabled(v bool) *ModifyBackupEncryptionPolicyInput {
	s.LogBackupEnabled = &v
	return s
}

type ModifyBackupEncryptionPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyBackupEncryptionPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyBackupEncryptionPolicyOutput) GoString() string {
	return s.String()
}
