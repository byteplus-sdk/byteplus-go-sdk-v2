// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeReadOnlyNodeDelayCommon = "DescribeReadOnlyNodeDelay"

// DescribeReadOnlyNodeDelayCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeReadOnlyNodeDelayCommon operation. The "output" return
// value will be populated with the DescribeReadOnlyNodeDelayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeReadOnlyNodeDelayCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeReadOnlyNodeDelayCommon Send returns without error.
//
// See DescribeReadOnlyNodeDelayCommon for more information on using the DescribeReadOnlyNodeDelayCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeReadOnlyNodeDelayCommonRequest method.
//    req, resp := client.DescribeReadOnlyNodeDelayCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeReadOnlyNodeDelayCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeReadOnlyNodeDelayCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeReadOnlyNodeDelayCommon API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation DescribeReadOnlyNodeDelayCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeReadOnlyNodeDelayCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeReadOnlyNodeDelayCommonRequest(input)
	return out, req.Send()
}

// DescribeReadOnlyNodeDelayCommonWithContext is the same as DescribeReadOnlyNodeDelayCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeReadOnlyNodeDelayCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeReadOnlyNodeDelayCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeReadOnlyNodeDelayCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeReadOnlyNodeDelay = "DescribeReadOnlyNodeDelay"

// DescribeReadOnlyNodeDelayRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeReadOnlyNodeDelay operation. The "output" return
// value will be populated with the DescribeReadOnlyNodeDelayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeReadOnlyNodeDelayCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeReadOnlyNodeDelayCommon Send returns without error.
//
// See DescribeReadOnlyNodeDelay for more information on using the DescribeReadOnlyNodeDelay
// API call, and error handling.
//
//    // Example sending a request using the DescribeReadOnlyNodeDelayRequest method.
//    req, resp := client.DescribeReadOnlyNodeDelayRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeReadOnlyNodeDelayRequest(input *DescribeReadOnlyNodeDelayInput) (req *request.Request, output *DescribeReadOnlyNodeDelayOutput) {
	op := &request.Operation{
		Name:       opDescribeReadOnlyNodeDelay,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeReadOnlyNodeDelayInput{}
	}

	output = &DescribeReadOnlyNodeDelayOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeReadOnlyNodeDelay API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation DescribeReadOnlyNodeDelay for usage and error information.
func (c *RDSMYSQLV2) DescribeReadOnlyNodeDelay(input *DescribeReadOnlyNodeDelayInput) (*DescribeReadOnlyNodeDelayOutput, error) {
	req, out := c.DescribeReadOnlyNodeDelayRequest(input)
	return out, req.Send()
}

// DescribeReadOnlyNodeDelayWithContext is the same as DescribeReadOnlyNodeDelay with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeReadOnlyNodeDelay for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeReadOnlyNodeDelayWithContext(ctx byteplus.Context, input *DescribeReadOnlyNodeDelayInput, opts ...request.Option) (*DescribeReadOnlyNodeDelayOutput, error) {
	req, out := c.DescribeReadOnlyNodeDelayRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeReadOnlyNodeDelayInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// NodeId is a required field
	NodeId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeReadOnlyNodeDelayInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeReadOnlyNodeDelayInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeReadOnlyNodeDelayInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeReadOnlyNodeDelayInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.NodeId == nil {
		invalidParams.Add(request.NewErrParamRequired("NodeId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeReadOnlyNodeDelayInput) SetInstanceId(v string) *DescribeReadOnlyNodeDelayInput {
	s.InstanceId = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *DescribeReadOnlyNodeDelayInput) SetNodeId(v string) *DescribeReadOnlyNodeDelayInput {
	s.NodeId = &v
	return s
}

type DescribeReadOnlyNodeDelayOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	DelayReplicationTime *int64 `type:"int64" json:",omitempty"`

	NodeId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeReadOnlyNodeDelayOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeReadOnlyNodeDelayOutput) GoString() string {
	return s.String()
}

// SetDelayReplicationTime sets the DelayReplicationTime field's value.
func (s *DescribeReadOnlyNodeDelayOutput) SetDelayReplicationTime(v int64) *DescribeReadOnlyNodeDelayOutput {
	s.DelayReplicationTime = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *DescribeReadOnlyNodeDelayOutput) SetNodeId(v string) *DescribeReadOnlyNodeDelayOutput {
	s.NodeId = &v
	return s
}
