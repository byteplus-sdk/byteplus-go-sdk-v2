// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeDBInstanceSSLCommon = "DescribeDBInstanceSSL"

// DescribeDBInstanceSSLCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeDBInstanceSSLCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceSSLCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceSSLCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceSSLCommon Send returns without error.
//
// See DescribeDBInstanceSSLCommon for more information on using the DescribeDBInstanceSSLCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceSSLCommonRequest method.
//    req, resp := client.DescribeDBInstanceSSLCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceSSLCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceSSLCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceSSLCommon API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceSSLCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceSSLCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceSSLCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceSSLCommonWithContext is the same as DescribeDBInstanceSSLCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceSSLCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceSSLCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceSSLCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceSSL = "DescribeDBInstanceSSL"

// DescribeDBInstanceSSLRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeDBInstanceSSL operation. The "output" return
// value will be populated with the DescribeDBInstanceSSLCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceSSLCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceSSLCommon Send returns without error.
//
// See DescribeDBInstanceSSL for more information on using the DescribeDBInstanceSSL
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceSSLRequest method.
//    req, resp := client.DescribeDBInstanceSSLRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceSSLRequest(input *DescribeDBInstanceSSLInput) (req *request.Request, output *DescribeDBInstanceSSLOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceSSL,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceSSLInput{}
	}

	output = &DescribeDBInstanceSSLOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceSSL API operation for RDS_MYSQL_V2.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceSSL for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceSSL(input *DescribeDBInstanceSSLInput) (*DescribeDBInstanceSSLOutput, error) {
	req, out := c.DescribeDBInstanceSSLRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceSSLWithContext is the same as DescribeDBInstanceSSL with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceSSL for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceSSLWithContext(ctx byteplus.Context, input *DescribeDBInstanceSSLInput, opts ...request.Option) (*DescribeDBInstanceSSLOutput, error) {
	req, out := c.DescribeDBInstanceSSLRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeDBInstanceSSLInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s DescribeDBInstanceSSLInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceSSLInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDBInstanceSSLInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDBInstanceSSLInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceSSLInput) SetInstanceId(v string) *DescribeDBInstanceSSLInput {
	s.InstanceId = &v
	return s
}

type DescribeDBInstanceSSLOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Address *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	IsValid *bool `type:"boolean" json:",omitempty"`

	SSLEnable *bool `type:"boolean" json:",omitempty"`

	SSLExpireTime *string `type:"string" json:",omitempty"`

	TLSVersion *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s DescribeDBInstanceSSLOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceSSLOutput) GoString() string {
	return s.String()
}

// SetAddress sets the Address field's value.
func (s *DescribeDBInstanceSSLOutput) SetAddress(v string) *DescribeDBInstanceSSLOutput {
	s.Address = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceSSLOutput) SetInstanceId(v string) *DescribeDBInstanceSSLOutput {
	s.InstanceId = &v
	return s
}

// SetIsValid sets the IsValid field's value.
func (s *DescribeDBInstanceSSLOutput) SetIsValid(v bool) *DescribeDBInstanceSSLOutput {
	s.IsValid = &v
	return s
}

// SetSSLEnable sets the SSLEnable field's value.
func (s *DescribeDBInstanceSSLOutput) SetSSLEnable(v bool) *DescribeDBInstanceSSLOutput {
	s.SSLEnable = &v
	return s
}

// SetSSLExpireTime sets the SSLExpireTime field's value.
func (s *DescribeDBInstanceSSLOutput) SetSSLExpireTime(v string) *DescribeDBInstanceSSLOutput {
	s.SSLExpireTime = &v
	return s
}

// SetTLSVersion sets the TLSVersion field's value.
func (s *DescribeDBInstanceSSLOutput) SetTLSVersion(v string) *DescribeDBInstanceSSLOutput {
	s.TLSVersion = &v
	return s
}
