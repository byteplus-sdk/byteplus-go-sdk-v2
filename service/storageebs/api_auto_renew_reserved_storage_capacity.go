// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package storageebs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opAutoRenewReservedStorageCapacityCommon = "AutoRenewReservedStorageCapacity"

// AutoRenewReservedStorageCapacityCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the AutoRenewReservedStorageCapacityCommon operation. The "output" return
// value will be populated with the AutoRenewReservedStorageCapacityCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AutoRenewReservedStorageCapacityCommon Request to send the API call to the service.
// the "output" return value is not valid until after AutoRenewReservedStorageCapacityCommon Send returns without error.
//
// See AutoRenewReservedStorageCapacityCommon for more information on using the AutoRenewReservedStorageCapacityCommon
// API call, and error handling.
//
//    // Example sending a request using the AutoRenewReservedStorageCapacityCommonRequest method.
//    req, resp := client.AutoRenewReservedStorageCapacityCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) AutoRenewReservedStorageCapacityCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAutoRenewReservedStorageCapacityCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AutoRenewReservedStorageCapacityCommon API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation AutoRenewReservedStorageCapacityCommon for usage and error information.
func (c *STORAGEEBS) AutoRenewReservedStorageCapacityCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AutoRenewReservedStorageCapacityCommonRequest(input)
	return out, req.Send()
}

// AutoRenewReservedStorageCapacityCommonWithContext is the same as AutoRenewReservedStorageCapacityCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AutoRenewReservedStorageCapacityCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) AutoRenewReservedStorageCapacityCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AutoRenewReservedStorageCapacityCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAutoRenewReservedStorageCapacity = "AutoRenewReservedStorageCapacity"

// AutoRenewReservedStorageCapacityRequest generates a "byteplus/request.Request" representing the
// client's request for the AutoRenewReservedStorageCapacity operation. The "output" return
// value will be populated with the AutoRenewReservedStorageCapacityCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AutoRenewReservedStorageCapacityCommon Request to send the API call to the service.
// the "output" return value is not valid until after AutoRenewReservedStorageCapacityCommon Send returns without error.
//
// See AutoRenewReservedStorageCapacity for more information on using the AutoRenewReservedStorageCapacity
// API call, and error handling.
//
//    // Example sending a request using the AutoRenewReservedStorageCapacityRequest method.
//    req, resp := client.AutoRenewReservedStorageCapacityRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) AutoRenewReservedStorageCapacityRequest(input *AutoRenewReservedStorageCapacityInput) (req *request.Request, output *AutoRenewReservedStorageCapacityOutput) {
	op := &request.Operation{
		Name:       opAutoRenewReservedStorageCapacity,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AutoRenewReservedStorageCapacityInput{}
	}

	output = &AutoRenewReservedStorageCapacityOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AutoRenewReservedStorageCapacity API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation AutoRenewReservedStorageCapacity for usage and error information.
func (c *STORAGEEBS) AutoRenewReservedStorageCapacity(input *AutoRenewReservedStorageCapacityInput) (*AutoRenewReservedStorageCapacityOutput, error) {
	req, out := c.AutoRenewReservedStorageCapacityRequest(input)
	return out, req.Send()
}

// AutoRenewReservedStorageCapacityWithContext is the same as AutoRenewReservedStorageCapacity with the addition of
// the ability to pass a context and additional request options.
//
// See AutoRenewReservedStorageCapacity for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) AutoRenewReservedStorageCapacityWithContext(ctx byteplus.Context, input *AutoRenewReservedStorageCapacityInput, opts ...request.Option) (*AutoRenewReservedStorageCapacityOutput, error) {
	req, out := c.AutoRenewReservedStorageCapacityRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AutoRenewReservedStorageCapacityInput struct {
	_ struct{} `type:"structure"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`

	RSCAutoRenew *bool `type:"boolean"`

	// RSCId is a required field
	RSCId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AutoRenewReservedStorageCapacityInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s AutoRenewReservedStorageCapacityInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AutoRenewReservedStorageCapacityInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AutoRenewReservedStorageCapacityInput"}
	if s.RSCId == nil {
		invalidParams.Add(request.NewErrParamRequired("RSCId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPeriod sets the Period field's value.
func (s *AutoRenewReservedStorageCapacityInput) SetPeriod(v int32) *AutoRenewReservedStorageCapacityInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *AutoRenewReservedStorageCapacityInput) SetPeriodUnit(v string) *AutoRenewReservedStorageCapacityInput {
	s.PeriodUnit = &v
	return s
}

// SetRSCAutoRenew sets the RSCAutoRenew field's value.
func (s *AutoRenewReservedStorageCapacityInput) SetRSCAutoRenew(v bool) *AutoRenewReservedStorageCapacityInput {
	s.RSCAutoRenew = &v
	return s
}

// SetRSCId sets the RSCId field's value.
func (s *AutoRenewReservedStorageCapacityInput) SetRSCId(v string) *AutoRenewReservedStorageCapacityInput {
	s.RSCId = &v
	return s
}

type AutoRenewReservedStorageCapacityOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s AutoRenewReservedStorageCapacityOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s AutoRenewReservedStorageCapacityOutput) GoString() string {
	return s.String()
}
