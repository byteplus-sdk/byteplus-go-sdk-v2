// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package storageebs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeSnapshotsUsageCommon = "DescribeSnapshotsUsage"

// DescribeSnapshotsUsageCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeSnapshotsUsageCommon operation. The "output" return
// value will be populated with the DescribeSnapshotsUsageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSnapshotsUsageCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSnapshotsUsageCommon Send returns without error.
//
// See DescribeSnapshotsUsageCommon for more information on using the DescribeSnapshotsUsageCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeSnapshotsUsageCommonRequest method.
//    req, resp := client.DescribeSnapshotsUsageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DescribeSnapshotsUsageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeSnapshotsUsageCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSnapshotsUsageCommon API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation DescribeSnapshotsUsageCommon for usage and error information.
func (c *STORAGEEBS) DescribeSnapshotsUsageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeSnapshotsUsageCommonRequest(input)
	return out, req.Send()
}

// DescribeSnapshotsUsageCommonWithContext is the same as DescribeSnapshotsUsageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSnapshotsUsageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DescribeSnapshotsUsageCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeSnapshotsUsageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSnapshotsUsage = "DescribeSnapshotsUsage"

// DescribeSnapshotsUsageRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeSnapshotsUsage operation. The "output" return
// value will be populated with the DescribeSnapshotsUsageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSnapshotsUsageCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSnapshotsUsageCommon Send returns without error.
//
// See DescribeSnapshotsUsage for more information on using the DescribeSnapshotsUsage
// API call, and error handling.
//
//    // Example sending a request using the DescribeSnapshotsUsageRequest method.
//    req, resp := client.DescribeSnapshotsUsageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DescribeSnapshotsUsageRequest(input *DescribeSnapshotsUsageInput) (req *request.Request, output *DescribeSnapshotsUsageOutput) {
	op := &request.Operation{
		Name:       opDescribeSnapshotsUsage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSnapshotsUsageInput{}
	}

	output = &DescribeSnapshotsUsageOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSnapshotsUsage API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation DescribeSnapshotsUsage for usage and error information.
func (c *STORAGEEBS) DescribeSnapshotsUsage(input *DescribeSnapshotsUsageInput) (*DescribeSnapshotsUsageOutput, error) {
	req, out := c.DescribeSnapshotsUsageRequest(input)
	return out, req.Send()
}

// DescribeSnapshotsUsageWithContext is the same as DescribeSnapshotsUsage with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSnapshotsUsage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DescribeSnapshotsUsageWithContext(ctx byteplus.Context, input *DescribeSnapshotsUsageInput, opts ...request.Option) (*DescribeSnapshotsUsageOutput, error) {
	req, out := c.DescribeSnapshotsUsageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeSnapshotsUsageInput struct {
	_ struct{} `type:"structure"`

	// RegionId is a required field
	RegionId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeSnapshotsUsageInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSnapshotsUsageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeSnapshotsUsageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeSnapshotsUsageInput"}
	if s.RegionId == nil {
		invalidParams.Add(request.NewErrParamRequired("RegionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRegionId sets the RegionId field's value.
func (s *DescribeSnapshotsUsageInput) SetRegionId(v string) *DescribeSnapshotsUsageInput {
	s.RegionId = &v
	return s
}

type DescribeSnapshotsUsageOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	SnapshotCount *int32 `type:"int32"`

	SnapshotSize *int64 `type:"int64"`
}

// String returns the string representation
func (s DescribeSnapshotsUsageOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSnapshotsUsageOutput) GoString() string {
	return s.String()
}

// SetSnapshotCount sets the SnapshotCount field's value.
func (s *DescribeSnapshotsUsageOutput) SetSnapshotCount(v int32) *DescribeSnapshotsUsageOutput {
	s.SnapshotCount = &v
	return s
}

// SetSnapshotSize sets the SnapshotSize field's value.
func (s *DescribeSnapshotsUsageOutput) SetSnapshotSize(v int64) *DescribeSnapshotsUsageOutput {
	s.SnapshotSize = &v
	return s
}
