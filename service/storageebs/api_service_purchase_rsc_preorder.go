// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package storageebs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opServicePurchaseRscPreorderCommon = "ServicePurchaseRscPreorder"

// ServicePurchaseRscPreorderCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ServicePurchaseRscPreorderCommon operation. The "output" return
// value will be populated with the ServicePurchaseRscPreorderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ServicePurchaseRscPreorderCommon Request to send the API call to the service.
// the "output" return value is not valid until after ServicePurchaseRscPreorderCommon Send returns without error.
//
// See ServicePurchaseRscPreorderCommon for more information on using the ServicePurchaseRscPreorderCommon
// API call, and error handling.
//
//    // Example sending a request using the ServicePurchaseRscPreorderCommonRequest method.
//    req, resp := client.ServicePurchaseRscPreorderCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) ServicePurchaseRscPreorderCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opServicePurchaseRscPreorderCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ServicePurchaseRscPreorderCommon API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation ServicePurchaseRscPreorderCommon for usage and error information.
func (c *STORAGEEBS) ServicePurchaseRscPreorderCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ServicePurchaseRscPreorderCommonRequest(input)
	return out, req.Send()
}

// ServicePurchaseRscPreorderCommonWithContext is the same as ServicePurchaseRscPreorderCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ServicePurchaseRscPreorderCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) ServicePurchaseRscPreorderCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ServicePurchaseRscPreorderCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opServicePurchaseRscPreorder = "ServicePurchaseRscPreorder"

// ServicePurchaseRscPreorderRequest generates a "byteplus/request.Request" representing the
// client's request for the ServicePurchaseRscPreorder operation. The "output" return
// value will be populated with the ServicePurchaseRscPreorderCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ServicePurchaseRscPreorderCommon Request to send the API call to the service.
// the "output" return value is not valid until after ServicePurchaseRscPreorderCommon Send returns without error.
//
// See ServicePurchaseRscPreorder for more information on using the ServicePurchaseRscPreorder
// API call, and error handling.
//
//    // Example sending a request using the ServicePurchaseRscPreorderRequest method.
//    req, resp := client.ServicePurchaseRscPreorderRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) ServicePurchaseRscPreorderRequest(input *ServicePurchaseRscPreorderInput) (req *request.Request, output *ServicePurchaseRscPreorderOutput) {
	op := &request.Operation{
		Name:       opServicePurchaseRscPreorder,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ServicePurchaseRscPreorderInput{}
	}

	output = &ServicePurchaseRscPreorderOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ServicePurchaseRscPreorder API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation ServicePurchaseRscPreorder for usage and error information.
func (c *STORAGEEBS) ServicePurchaseRscPreorder(input *ServicePurchaseRscPreorderInput) (*ServicePurchaseRscPreorderOutput, error) {
	req, out := c.ServicePurchaseRscPreorderRequest(input)
	return out, req.Send()
}

// ServicePurchaseRscPreorderWithContext is the same as ServicePurchaseRscPreorder with the addition of
// the ability to pass a context and additional request options.
//
// See ServicePurchaseRscPreorder for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) ServicePurchaseRscPreorderWithContext(ctx byteplus.Context, input *ServicePurchaseRscPreorderInput, opts ...request.Option) (*ServicePurchaseRscPreorderOutput, error) {
	req, out := c.ServicePurchaseRscPreorderRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ServicePurchaseRscPreorderInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	ClientToken *string `type:"string"`

	EffectiveAt *string `type:"string"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`

	ReservedCapacity *int32 `type:"int32"`

	ReservedStorageCapacityName *string `type:"string"`

	RscAutoRenew *bool `type:"boolean"`

	VolumeType *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s ServicePurchaseRscPreorderInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ServicePurchaseRscPreorderInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *ServicePurchaseRscPreorderInput) SetAccountId(v string) *ServicePurchaseRscPreorderInput {
	s.AccountId = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *ServicePurchaseRscPreorderInput) SetClientToken(v string) *ServicePurchaseRscPreorderInput {
	s.ClientToken = &v
	return s
}

// SetEffectiveAt sets the EffectiveAt field's value.
func (s *ServicePurchaseRscPreorderInput) SetEffectiveAt(v string) *ServicePurchaseRscPreorderInput {
	s.EffectiveAt = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *ServicePurchaseRscPreorderInput) SetPeriod(v int32) *ServicePurchaseRscPreorderInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *ServicePurchaseRscPreorderInput) SetPeriodUnit(v string) *ServicePurchaseRscPreorderInput {
	s.PeriodUnit = &v
	return s
}

// SetReservedCapacity sets the ReservedCapacity field's value.
func (s *ServicePurchaseRscPreorderInput) SetReservedCapacity(v int32) *ServicePurchaseRscPreorderInput {
	s.ReservedCapacity = &v
	return s
}

// SetReservedStorageCapacityName sets the ReservedStorageCapacityName field's value.
func (s *ServicePurchaseRscPreorderInput) SetReservedStorageCapacityName(v string) *ServicePurchaseRscPreorderInput {
	s.ReservedStorageCapacityName = &v
	return s
}

// SetRscAutoRenew sets the RscAutoRenew field's value.
func (s *ServicePurchaseRscPreorderInput) SetRscAutoRenew(v bool) *ServicePurchaseRscPreorderInput {
	s.RscAutoRenew = &v
	return s
}

// SetVolumeType sets the VolumeType field's value.
func (s *ServicePurchaseRscPreorderInput) SetVolumeType(v string) *ServicePurchaseRscPreorderInput {
	s.VolumeType = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *ServicePurchaseRscPreorderInput) SetZoneId(v string) *ServicePurchaseRscPreorderInput {
	s.ZoneId = &v
	return s
}

type ServicePurchaseRscPreorderOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	ReservedStorageCapacityId *string `type:"string"`
}

// String returns the string representation
func (s ServicePurchaseRscPreorderOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ServicePurchaseRscPreorderOutput) GoString() string {
	return s.String()
}

// SetReservedStorageCapacityId sets the ReservedStorageCapacityId field's value.
func (s *ServicePurchaseRscPreorderOutput) SetReservedStorageCapacityId(v string) *ServicePurchaseRscPreorderOutput {
	s.ReservedStorageCapacityId = &v
	return s
}
