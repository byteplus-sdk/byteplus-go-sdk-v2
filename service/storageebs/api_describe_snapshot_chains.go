// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package storageebs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeSnapshotChainsCommon = "DescribeSnapshotChains"

// DescribeSnapshotChainsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeSnapshotChainsCommon operation. The "output" return
// value will be populated with the DescribeSnapshotChainsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSnapshotChainsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSnapshotChainsCommon Send returns without error.
//
// See DescribeSnapshotChainsCommon for more information on using the DescribeSnapshotChainsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeSnapshotChainsCommonRequest method.
//    req, resp := client.DescribeSnapshotChainsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DescribeSnapshotChainsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeSnapshotChainsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSnapshotChainsCommon API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation DescribeSnapshotChainsCommon for usage and error information.
func (c *STORAGEEBS) DescribeSnapshotChainsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeSnapshotChainsCommonRequest(input)
	return out, req.Send()
}

// DescribeSnapshotChainsCommonWithContext is the same as DescribeSnapshotChainsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSnapshotChainsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DescribeSnapshotChainsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeSnapshotChainsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSnapshotChains = "DescribeSnapshotChains"

// DescribeSnapshotChainsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeSnapshotChains operation. The "output" return
// value will be populated with the DescribeSnapshotChainsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSnapshotChainsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSnapshotChainsCommon Send returns without error.
//
// See DescribeSnapshotChains for more information on using the DescribeSnapshotChains
// API call, and error handling.
//
//    // Example sending a request using the DescribeSnapshotChainsRequest method.
//    req, resp := client.DescribeSnapshotChainsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DescribeSnapshotChainsRequest(input *DescribeSnapshotChainsInput) (req *request.Request, output *DescribeSnapshotChainsOutput) {
	op := &request.Operation{
		Name:       opDescribeSnapshotChains,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSnapshotChainsInput{}
	}

	output = &DescribeSnapshotChainsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSnapshotChains API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation DescribeSnapshotChains for usage and error information.
func (c *STORAGEEBS) DescribeSnapshotChains(input *DescribeSnapshotChainsInput) (*DescribeSnapshotChainsOutput, error) {
	req, out := c.DescribeSnapshotChainsRequest(input)
	return out, req.Send()
}

// DescribeSnapshotChainsWithContext is the same as DescribeSnapshotChains with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSnapshotChains for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DescribeSnapshotChainsWithContext(ctx byteplus.Context, input *DescribeSnapshotChainsInput, opts ...request.Option) (*DescribeSnapshotChainsOutput, error) {
	req, out := c.DescribeSnapshotChainsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeSnapshotChainsInput struct {
	_ struct{} `type:"structure"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	VolumeIds []*string `type:"list"`
}

// String returns the string representation
func (s DescribeSnapshotChainsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSnapshotChainsInput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeSnapshotChainsInput) SetPageNumber(v int32) *DescribeSnapshotChainsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeSnapshotChainsInput) SetPageSize(v int32) *DescribeSnapshotChainsInput {
	s.PageSize = &v
	return s
}

// SetVolumeIds sets the VolumeIds field's value.
func (s *DescribeSnapshotChainsInput) SetVolumeIds(v []*string) *DescribeSnapshotChainsInput {
	s.VolumeIds = v
	return s
}

type DescribeSnapshotChainsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	SnapshotChains []*SnapshotChainForDescribeSnapshotChainsOutput `type:"list"`

	TotalCount *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeSnapshotChainsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSnapshotChainsOutput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeSnapshotChainsOutput) SetPageNumber(v int32) *DescribeSnapshotChainsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeSnapshotChainsOutput) SetPageSize(v int32) *DescribeSnapshotChainsOutput {
	s.PageSize = &v
	return s
}

// SetSnapshotChains sets the SnapshotChains field's value.
func (s *DescribeSnapshotChainsOutput) SetSnapshotChains(v []*SnapshotChainForDescribeSnapshotChainsOutput) *DescribeSnapshotChainsOutput {
	s.SnapshotChains = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeSnapshotChainsOutput) SetTotalCount(v int32) *DescribeSnapshotChainsOutput {
	s.TotalCount = &v
	return s
}

type SnapshotChainForDescribeSnapshotChainsOutput struct {
	_ struct{} `type:"structure"`

	SnapshotChainId *string `type:"string"`

	SnapshotCount *int32 `type:"int32"`

	SnapshotSize *int64 `type:"int64"`

	VolumeId *string `type:"string"`
}

// String returns the string representation
func (s SnapshotChainForDescribeSnapshotChainsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s SnapshotChainForDescribeSnapshotChainsOutput) GoString() string {
	return s.String()
}

// SetSnapshotChainId sets the SnapshotChainId field's value.
func (s *SnapshotChainForDescribeSnapshotChainsOutput) SetSnapshotChainId(v string) *SnapshotChainForDescribeSnapshotChainsOutput {
	s.SnapshotChainId = &v
	return s
}

// SetSnapshotCount sets the SnapshotCount field's value.
func (s *SnapshotChainForDescribeSnapshotChainsOutput) SetSnapshotCount(v int32) *SnapshotChainForDescribeSnapshotChainsOutput {
	s.SnapshotCount = &v
	return s
}

// SetSnapshotSize sets the SnapshotSize field's value.
func (s *SnapshotChainForDescribeSnapshotChainsOutput) SetSnapshotSize(v int64) *SnapshotChainForDescribeSnapshotChainsOutput {
	s.SnapshotSize = &v
	return s
}

// SetVolumeId sets the VolumeId field's value.
func (s *SnapshotChainForDescribeSnapshotChainsOutput) SetVolumeId(v string) *SnapshotChainForDescribeSnapshotChainsOutput {
	s.VolumeId = &v
	return s
}
