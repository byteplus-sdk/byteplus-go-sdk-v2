// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package storageebs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeReservedStorageCapacityCommon = "DescribeReservedStorageCapacity"

// DescribeReservedStorageCapacityCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeReservedStorageCapacityCommon operation. The "output" return
// value will be populated with the DescribeReservedStorageCapacityCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeReservedStorageCapacityCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeReservedStorageCapacityCommon Send returns without error.
//
// See DescribeReservedStorageCapacityCommon for more information on using the DescribeReservedStorageCapacityCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeReservedStorageCapacityCommonRequest method.
//    req, resp := client.DescribeReservedStorageCapacityCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DescribeReservedStorageCapacityCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeReservedStorageCapacityCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeReservedStorageCapacityCommon API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation DescribeReservedStorageCapacityCommon for usage and error information.
func (c *STORAGEEBS) DescribeReservedStorageCapacityCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeReservedStorageCapacityCommonRequest(input)
	return out, req.Send()
}

// DescribeReservedStorageCapacityCommonWithContext is the same as DescribeReservedStorageCapacityCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeReservedStorageCapacityCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DescribeReservedStorageCapacityCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeReservedStorageCapacityCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeReservedStorageCapacity = "DescribeReservedStorageCapacity"

// DescribeReservedStorageCapacityRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeReservedStorageCapacity operation. The "output" return
// value will be populated with the DescribeReservedStorageCapacityCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeReservedStorageCapacityCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeReservedStorageCapacityCommon Send returns without error.
//
// See DescribeReservedStorageCapacity for more information on using the DescribeReservedStorageCapacity
// API call, and error handling.
//
//    // Example sending a request using the DescribeReservedStorageCapacityRequest method.
//    req, resp := client.DescribeReservedStorageCapacityRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DescribeReservedStorageCapacityRequest(input *DescribeReservedStorageCapacityInput) (req *request.Request, output *DescribeReservedStorageCapacityOutput) {
	op := &request.Operation{
		Name:       opDescribeReservedStorageCapacity,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeReservedStorageCapacityInput{}
	}

	output = &DescribeReservedStorageCapacityOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeReservedStorageCapacity API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation DescribeReservedStorageCapacity for usage and error information.
func (c *STORAGEEBS) DescribeReservedStorageCapacity(input *DescribeReservedStorageCapacityInput) (*DescribeReservedStorageCapacityOutput, error) {
	req, out := c.DescribeReservedStorageCapacityRequest(input)
	return out, req.Send()
}

// DescribeReservedStorageCapacityWithContext is the same as DescribeReservedStorageCapacity with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeReservedStorageCapacity for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DescribeReservedStorageCapacityWithContext(ctx byteplus.Context, input *DescribeReservedStorageCapacityInput, opts ...request.Option) (*DescribeReservedStorageCapacityOutput, error) {
	req, out := c.DescribeReservedStorageCapacityRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeReservedStorageCapacityInput struct {
	_ struct{} `type:"structure"`

	PageNumber *string `type:"string"`

	PageSize *string `type:"string"`

	// ReservedStorageCapacityIds is a required field
	ReservedStorageCapacityIds []*string `type:"list" required:"true"`

	ReservedStorageCapacityName *string `type:"string"`

	Status *string `type:"string"`

	VolumeType *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DescribeReservedStorageCapacityInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeReservedStorageCapacityInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeReservedStorageCapacityInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeReservedStorageCapacityInput"}
	if s.ReservedStorageCapacityIds == nil {
		invalidParams.Add(request.NewErrParamRequired("ReservedStorageCapacityIds"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeReservedStorageCapacityInput) SetPageNumber(v string) *DescribeReservedStorageCapacityInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeReservedStorageCapacityInput) SetPageSize(v string) *DescribeReservedStorageCapacityInput {
	s.PageSize = &v
	return s
}

// SetReservedStorageCapacityIds sets the ReservedStorageCapacityIds field's value.
func (s *DescribeReservedStorageCapacityInput) SetReservedStorageCapacityIds(v []*string) *DescribeReservedStorageCapacityInput {
	s.ReservedStorageCapacityIds = v
	return s
}

// SetReservedStorageCapacityName sets the ReservedStorageCapacityName field's value.
func (s *DescribeReservedStorageCapacityInput) SetReservedStorageCapacityName(v string) *DescribeReservedStorageCapacityInput {
	s.ReservedStorageCapacityName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeReservedStorageCapacityInput) SetStatus(v string) *DescribeReservedStorageCapacityInput {
	s.Status = &v
	return s
}

// SetVolumeType sets the VolumeType field's value.
func (s *DescribeReservedStorageCapacityInput) SetVolumeType(v string) *DescribeReservedStorageCapacityInput {
	s.VolumeType = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeReservedStorageCapacityInput) SetZoneId(v string) *DescribeReservedStorageCapacityInput {
	s.ZoneId = &v
	return s
}

type DescribeReservedStorageCapacityOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	RscInfo []*RscInfoForDescribeReservedStorageCapacityOutput `type:"list"`

	TotalCount *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeReservedStorageCapacityOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeReservedStorageCapacityOutput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeReservedStorageCapacityOutput) SetPageNumber(v int32) *DescribeReservedStorageCapacityOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeReservedStorageCapacityOutput) SetPageSize(v int32) *DescribeReservedStorageCapacityOutput {
	s.PageSize = &v
	return s
}

// SetRscInfo sets the RscInfo field's value.
func (s *DescribeReservedStorageCapacityOutput) SetRscInfo(v []*RscInfoForDescribeReservedStorageCapacityOutput) *DescribeReservedStorageCapacityOutput {
	s.RscInfo = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeReservedStorageCapacityOutput) SetTotalCount(v int32) *DescribeReservedStorageCapacityOutput {
	s.TotalCount = &v
	return s
}

type RscInfoForDescribeReservedStorageCapacityOutput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	ExpiredTime *string `type:"string"`

	Id *string `type:"string"`

	Name *string `type:"string"`

	RSCAutoRenewPeriod *int32 `type:"int32"`

	RemainingSize *int32 `type:"int32"`

	RenewalStatus *string `type:"string"`

	Size *int64 `type:"int64"`

	Status *string `type:"string"`

	TakeEffectTime *string `type:"string"`

	Type *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s RscInfoForDescribeReservedStorageCapacityOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s RscInfoForDescribeReservedStorageCapacityOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *RscInfoForDescribeReservedStorageCapacityOutput) SetAccountId(v string) *RscInfoForDescribeReservedStorageCapacityOutput {
	s.AccountId = &v
	return s
}

// SetExpiredTime sets the ExpiredTime field's value.
func (s *RscInfoForDescribeReservedStorageCapacityOutput) SetExpiredTime(v string) *RscInfoForDescribeReservedStorageCapacityOutput {
	s.ExpiredTime = &v
	return s
}

// SetId sets the Id field's value.
func (s *RscInfoForDescribeReservedStorageCapacityOutput) SetId(v string) *RscInfoForDescribeReservedStorageCapacityOutput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *RscInfoForDescribeReservedStorageCapacityOutput) SetName(v string) *RscInfoForDescribeReservedStorageCapacityOutput {
	s.Name = &v
	return s
}

// SetRSCAutoRenewPeriod sets the RSCAutoRenewPeriod field's value.
func (s *RscInfoForDescribeReservedStorageCapacityOutput) SetRSCAutoRenewPeriod(v int32) *RscInfoForDescribeReservedStorageCapacityOutput {
	s.RSCAutoRenewPeriod = &v
	return s
}

// SetRemainingSize sets the RemainingSize field's value.
func (s *RscInfoForDescribeReservedStorageCapacityOutput) SetRemainingSize(v int32) *RscInfoForDescribeReservedStorageCapacityOutput {
	s.RemainingSize = &v
	return s
}

// SetRenewalStatus sets the RenewalStatus field's value.
func (s *RscInfoForDescribeReservedStorageCapacityOutput) SetRenewalStatus(v string) *RscInfoForDescribeReservedStorageCapacityOutput {
	s.RenewalStatus = &v
	return s
}

// SetSize sets the Size field's value.
func (s *RscInfoForDescribeReservedStorageCapacityOutput) SetSize(v int64) *RscInfoForDescribeReservedStorageCapacityOutput {
	s.Size = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *RscInfoForDescribeReservedStorageCapacityOutput) SetStatus(v string) *RscInfoForDescribeReservedStorageCapacityOutput {
	s.Status = &v
	return s
}

// SetTakeEffectTime sets the TakeEffectTime field's value.
func (s *RscInfoForDescribeReservedStorageCapacityOutput) SetTakeEffectTime(v string) *RscInfoForDescribeReservedStorageCapacityOutput {
	s.TakeEffectTime = &v
	return s
}

// SetType sets the Type field's value.
func (s *RscInfoForDescribeReservedStorageCapacityOutput) SetType(v string) *RscInfoForDescribeReservedStorageCapacityOutput {
	s.Type = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *RscInfoForDescribeReservedStorageCapacityOutput) SetZoneId(v string) *RscInfoForDescribeReservedStorageCapacityOutput {
	s.ZoneId = &v
	return s
}
