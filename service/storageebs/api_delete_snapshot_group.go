// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package storageebs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteSnapshotGroupCommon = "DeleteSnapshotGroup"

// DeleteSnapshotGroupCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteSnapshotGroupCommon operation. The "output" return
// value will be populated with the DeleteSnapshotGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSnapshotGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSnapshotGroupCommon Send returns without error.
//
// See DeleteSnapshotGroupCommon for more information on using the DeleteSnapshotGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteSnapshotGroupCommonRequest method.
//    req, resp := client.DeleteSnapshotGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DeleteSnapshotGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteSnapshotGroupCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteSnapshotGroupCommon API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation DeleteSnapshotGroupCommon for usage and error information.
func (c *STORAGEEBS) DeleteSnapshotGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteSnapshotGroupCommonRequest(input)
	return out, req.Send()
}

// DeleteSnapshotGroupCommonWithContext is the same as DeleteSnapshotGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSnapshotGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DeleteSnapshotGroupCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteSnapshotGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteSnapshotGroup = "DeleteSnapshotGroup"

// DeleteSnapshotGroupRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteSnapshotGroup operation. The "output" return
// value will be populated with the DeleteSnapshotGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSnapshotGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSnapshotGroupCommon Send returns without error.
//
// See DeleteSnapshotGroup for more information on using the DeleteSnapshotGroup
// API call, and error handling.
//
//    // Example sending a request using the DeleteSnapshotGroupRequest method.
//    req, resp := client.DeleteSnapshotGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DeleteSnapshotGroupRequest(input *DeleteSnapshotGroupInput) (req *request.Request, output *DeleteSnapshotGroupOutput) {
	op := &request.Operation{
		Name:       opDeleteSnapshotGroup,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteSnapshotGroupInput{}
	}

	output = &DeleteSnapshotGroupOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteSnapshotGroup API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation DeleteSnapshotGroup for usage and error information.
func (c *STORAGEEBS) DeleteSnapshotGroup(input *DeleteSnapshotGroupInput) (*DeleteSnapshotGroupOutput, error) {
	req, out := c.DeleteSnapshotGroupRequest(input)
	return out, req.Send()
}

// DeleteSnapshotGroupWithContext is the same as DeleteSnapshotGroup with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSnapshotGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DeleteSnapshotGroupWithContext(ctx byteplus.Context, input *DeleteSnapshotGroupInput, opts ...request.Option) (*DeleteSnapshotGroupOutput, error) {
	req, out := c.DeleteSnapshotGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteSnapshotGroupInput struct {
	_ struct{} `type:"structure"`

	// SnapshotGroupId is a required field
	SnapshotGroupId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteSnapshotGroupInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSnapshotGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteSnapshotGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteSnapshotGroupInput"}
	if s.SnapshotGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("SnapshotGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSnapshotGroupId sets the SnapshotGroupId field's value.
func (s *DeleteSnapshotGroupInput) SetSnapshotGroupId(v string) *DeleteSnapshotGroupInput {
	s.SnapshotGroupId = &v
	return s
}

type DeleteSnapshotGroupOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteSnapshotGroupOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSnapshotGroupOutput) GoString() string {
	return s.String()
}
