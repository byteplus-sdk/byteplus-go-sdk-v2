// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package storageebs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyReservedStorageCapacityEffectiveAtCommon = "ModifyReservedStorageCapacityEffectiveAt"

// ModifyReservedStorageCapacityEffectiveAtCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyReservedStorageCapacityEffectiveAtCommon operation. The "output" return
// value will be populated with the ModifyReservedStorageCapacityEffectiveAtCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyReservedStorageCapacityEffectiveAtCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyReservedStorageCapacityEffectiveAtCommon Send returns without error.
//
// See ModifyReservedStorageCapacityEffectiveAtCommon for more information on using the ModifyReservedStorageCapacityEffectiveAtCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyReservedStorageCapacityEffectiveAtCommonRequest method.
//    req, resp := client.ModifyReservedStorageCapacityEffectiveAtCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) ModifyReservedStorageCapacityEffectiveAtCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyReservedStorageCapacityEffectiveAtCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyReservedStorageCapacityEffectiveAtCommon API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation ModifyReservedStorageCapacityEffectiveAtCommon for usage and error information.
func (c *STORAGEEBS) ModifyReservedStorageCapacityEffectiveAtCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyReservedStorageCapacityEffectiveAtCommonRequest(input)
	return out, req.Send()
}

// ModifyReservedStorageCapacityEffectiveAtCommonWithContext is the same as ModifyReservedStorageCapacityEffectiveAtCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyReservedStorageCapacityEffectiveAtCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) ModifyReservedStorageCapacityEffectiveAtCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyReservedStorageCapacityEffectiveAtCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyReservedStorageCapacityEffectiveAt = "ModifyReservedStorageCapacityEffectiveAt"

// ModifyReservedStorageCapacityEffectiveAtRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyReservedStorageCapacityEffectiveAt operation. The "output" return
// value will be populated with the ModifyReservedStorageCapacityEffectiveAtCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyReservedStorageCapacityEffectiveAtCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyReservedStorageCapacityEffectiveAtCommon Send returns without error.
//
// See ModifyReservedStorageCapacityEffectiveAt for more information on using the ModifyReservedStorageCapacityEffectiveAt
// API call, and error handling.
//
//    // Example sending a request using the ModifyReservedStorageCapacityEffectiveAtRequest method.
//    req, resp := client.ModifyReservedStorageCapacityEffectiveAtRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) ModifyReservedStorageCapacityEffectiveAtRequest(input *ModifyReservedStorageCapacityEffectiveAtInput) (req *request.Request, output *ModifyReservedStorageCapacityEffectiveAtOutput) {
	op := &request.Operation{
		Name:       opModifyReservedStorageCapacityEffectiveAt,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyReservedStorageCapacityEffectiveAtInput{}
	}

	output = &ModifyReservedStorageCapacityEffectiveAtOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyReservedStorageCapacityEffectiveAt API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation ModifyReservedStorageCapacityEffectiveAt for usage and error information.
func (c *STORAGEEBS) ModifyReservedStorageCapacityEffectiveAt(input *ModifyReservedStorageCapacityEffectiveAtInput) (*ModifyReservedStorageCapacityEffectiveAtOutput, error) {
	req, out := c.ModifyReservedStorageCapacityEffectiveAtRequest(input)
	return out, req.Send()
}

// ModifyReservedStorageCapacityEffectiveAtWithContext is the same as ModifyReservedStorageCapacityEffectiveAt with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyReservedStorageCapacityEffectiveAt for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) ModifyReservedStorageCapacityEffectiveAtWithContext(ctx byteplus.Context, input *ModifyReservedStorageCapacityEffectiveAtInput, opts ...request.Option) (*ModifyReservedStorageCapacityEffectiveAtOutput, error) {
	req, out := c.ModifyReservedStorageCapacityEffectiveAtRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyReservedStorageCapacityEffectiveAtInput struct {
	_ struct{} `type:"structure"`

	EffectiveAt *string `type:"string"`

	// RSCId is a required field
	RSCId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ModifyReservedStorageCapacityEffectiveAtInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyReservedStorageCapacityEffectiveAtInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyReservedStorageCapacityEffectiveAtInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyReservedStorageCapacityEffectiveAtInput"}
	if s.RSCId == nil {
		invalidParams.Add(request.NewErrParamRequired("RSCId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEffectiveAt sets the EffectiveAt field's value.
func (s *ModifyReservedStorageCapacityEffectiveAtInput) SetEffectiveAt(v string) *ModifyReservedStorageCapacityEffectiveAtInput {
	s.EffectiveAt = &v
	return s
}

// SetRSCId sets the RSCId field's value.
func (s *ModifyReservedStorageCapacityEffectiveAtInput) SetRSCId(v string) *ModifyReservedStorageCapacityEffectiveAtInput {
	s.RSCId = &v
	return s
}

type ModifyReservedStorageCapacityEffectiveAtOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyReservedStorageCapacityEffectiveAtOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyReservedStorageCapacityEffectiveAtOutput) GoString() string {
	return s.String()
}
