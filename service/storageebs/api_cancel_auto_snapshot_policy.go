// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package storageebs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCancelAutoSnapshotPolicyCommon = "CancelAutoSnapshotPolicy"

// CancelAutoSnapshotPolicyCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CancelAutoSnapshotPolicyCommon operation. The "output" return
// value will be populated with the CancelAutoSnapshotPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelAutoSnapshotPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelAutoSnapshotPolicyCommon Send returns without error.
//
// See CancelAutoSnapshotPolicyCommon for more information on using the CancelAutoSnapshotPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the CancelAutoSnapshotPolicyCommonRequest method.
//    req, resp := client.CancelAutoSnapshotPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) CancelAutoSnapshotPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCancelAutoSnapshotPolicyCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CancelAutoSnapshotPolicyCommon API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation CancelAutoSnapshotPolicyCommon for usage and error information.
func (c *STORAGEEBS) CancelAutoSnapshotPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CancelAutoSnapshotPolicyCommonRequest(input)
	return out, req.Send()
}

// CancelAutoSnapshotPolicyCommonWithContext is the same as CancelAutoSnapshotPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CancelAutoSnapshotPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) CancelAutoSnapshotPolicyCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CancelAutoSnapshotPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCancelAutoSnapshotPolicy = "CancelAutoSnapshotPolicy"

// CancelAutoSnapshotPolicyRequest generates a "byteplus/request.Request" representing the
// client's request for the CancelAutoSnapshotPolicy operation. The "output" return
// value will be populated with the CancelAutoSnapshotPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelAutoSnapshotPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelAutoSnapshotPolicyCommon Send returns without error.
//
// See CancelAutoSnapshotPolicy for more information on using the CancelAutoSnapshotPolicy
// API call, and error handling.
//
//    // Example sending a request using the CancelAutoSnapshotPolicyRequest method.
//    req, resp := client.CancelAutoSnapshotPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) CancelAutoSnapshotPolicyRequest(input *CancelAutoSnapshotPolicyInput) (req *request.Request, output *CancelAutoSnapshotPolicyOutput) {
	op := &request.Operation{
		Name:       opCancelAutoSnapshotPolicy,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CancelAutoSnapshotPolicyInput{}
	}

	output = &CancelAutoSnapshotPolicyOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CancelAutoSnapshotPolicy API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation CancelAutoSnapshotPolicy for usage and error information.
func (c *STORAGEEBS) CancelAutoSnapshotPolicy(input *CancelAutoSnapshotPolicyInput) (*CancelAutoSnapshotPolicyOutput, error) {
	req, out := c.CancelAutoSnapshotPolicyRequest(input)
	return out, req.Send()
}

// CancelAutoSnapshotPolicyWithContext is the same as CancelAutoSnapshotPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See CancelAutoSnapshotPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) CancelAutoSnapshotPolicyWithContext(ctx byteplus.Context, input *CancelAutoSnapshotPolicyInput, opts ...request.Option) (*CancelAutoSnapshotPolicyOutput, error) {
	req, out := c.CancelAutoSnapshotPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CancelAutoSnapshotPolicyInput struct {
	_ struct{} `type:"structure"`

	// AutoSnapshotPolicyId is a required field
	AutoSnapshotPolicyId *string `type:"string" required:"true"`

	// VolumeIds is a required field
	VolumeIds []*string `type:"list" required:"true"`
}

// String returns the string representation
func (s CancelAutoSnapshotPolicyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelAutoSnapshotPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CancelAutoSnapshotPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CancelAutoSnapshotPolicyInput"}
	if s.AutoSnapshotPolicyId == nil {
		invalidParams.Add(request.NewErrParamRequired("AutoSnapshotPolicyId"))
	}
	if s.VolumeIds == nil {
		invalidParams.Add(request.NewErrParamRequired("VolumeIds"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAutoSnapshotPolicyId sets the AutoSnapshotPolicyId field's value.
func (s *CancelAutoSnapshotPolicyInput) SetAutoSnapshotPolicyId(v string) *CancelAutoSnapshotPolicyInput {
	s.AutoSnapshotPolicyId = &v
	return s
}

// SetVolumeIds sets the VolumeIds field's value.
func (s *CancelAutoSnapshotPolicyInput) SetVolumeIds(v []*string) *CancelAutoSnapshotPolicyInput {
	s.VolumeIds = v
	return s
}

type CancelAutoSnapshotPolicyOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CancelAutoSnapshotPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelAutoSnapshotPolicyOutput) GoString() string {
	return s.String()
}
