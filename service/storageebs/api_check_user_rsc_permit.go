// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package storageebs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCheckUserRscPermitCommon = "CheckUserRscPermit"

// CheckUserRscPermitCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CheckUserRscPermitCommon operation. The "output" return
// value will be populated with the CheckUserRscPermitCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CheckUserRscPermitCommon Request to send the API call to the service.
// the "output" return value is not valid until after CheckUserRscPermitCommon Send returns without error.
//
// See CheckUserRscPermitCommon for more information on using the CheckUserRscPermitCommon
// API call, and error handling.
//
//    // Example sending a request using the CheckUserRscPermitCommonRequest method.
//    req, resp := client.CheckUserRscPermitCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) CheckUserRscPermitCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCheckUserRscPermitCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CheckUserRscPermitCommon API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation CheckUserRscPermitCommon for usage and error information.
func (c *STORAGEEBS) CheckUserRscPermitCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CheckUserRscPermitCommonRequest(input)
	return out, req.Send()
}

// CheckUserRscPermitCommonWithContext is the same as CheckUserRscPermitCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CheckUserRscPermitCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) CheckUserRscPermitCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CheckUserRscPermitCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCheckUserRscPermit = "CheckUserRscPermit"

// CheckUserRscPermitRequest generates a "byteplus/request.Request" representing the
// client's request for the CheckUserRscPermit operation. The "output" return
// value will be populated with the CheckUserRscPermitCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CheckUserRscPermitCommon Request to send the API call to the service.
// the "output" return value is not valid until after CheckUserRscPermitCommon Send returns without error.
//
// See CheckUserRscPermit for more information on using the CheckUserRscPermit
// API call, and error handling.
//
//    // Example sending a request using the CheckUserRscPermitRequest method.
//    req, resp := client.CheckUserRscPermitRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) CheckUserRscPermitRequest(input *CheckUserRscPermitInput) (req *request.Request, output *CheckUserRscPermitOutput) {
	op := &request.Operation{
		Name:       opCheckUserRscPermit,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CheckUserRscPermitInput{}
	}

	output = &CheckUserRscPermitOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CheckUserRscPermit API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation CheckUserRscPermit for usage and error information.
func (c *STORAGEEBS) CheckUserRscPermit(input *CheckUserRscPermitInput) (*CheckUserRscPermitOutput, error) {
	req, out := c.CheckUserRscPermitRequest(input)
	return out, req.Send()
}

// CheckUserRscPermitWithContext is the same as CheckUserRscPermit with the addition of
// the ability to pass a context and additional request options.
//
// See CheckUserRscPermit for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) CheckUserRscPermitWithContext(ctx byteplus.Context, input *CheckUserRscPermitInput, opts ...request.Option) (*CheckUserRscPermitOutput, error) {
	req, out := c.CheckUserRscPermitRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CheckUserRscPermitInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`
}

// String returns the string representation
func (s CheckUserRscPermitInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckUserRscPermitInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *CheckUserRscPermitInput) SetAccountId(v string) *CheckUserRscPermitInput {
	s.AccountId = &v
	return s
}

type CheckUserRscPermitOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Permit *bool `type:"boolean"`
}

// String returns the string representation
func (s CheckUserRscPermitOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CheckUserRscPermitOutput) GoString() string {
	return s.String()
}

// SetPermit sets the Permit field's value.
func (s *CheckUserRscPermitOutput) SetPermit(v bool) *CheckUserRscPermitOutput {
	s.Permit = &v
	return s
}
