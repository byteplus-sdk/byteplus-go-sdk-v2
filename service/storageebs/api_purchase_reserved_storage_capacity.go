// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package storageebs

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opPurchaseReservedStorageCapacityCommon = "PurchaseReservedStorageCapacity"

// PurchaseReservedStorageCapacityCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the PurchaseReservedStorageCapacityCommon operation. The "output" return
// value will be populated with the PurchaseReservedStorageCapacityCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PurchaseReservedStorageCapacityCommon Request to send the API call to the service.
// the "output" return value is not valid until after PurchaseReservedStorageCapacityCommon Send returns without error.
//
// See PurchaseReservedStorageCapacityCommon for more information on using the PurchaseReservedStorageCapacityCommon
// API call, and error handling.
//
//    // Example sending a request using the PurchaseReservedStorageCapacityCommonRequest method.
//    req, resp := client.PurchaseReservedStorageCapacityCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) PurchaseReservedStorageCapacityCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opPurchaseReservedStorageCapacityCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// PurchaseReservedStorageCapacityCommon API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation PurchaseReservedStorageCapacityCommon for usage and error information.
func (c *STORAGEEBS) PurchaseReservedStorageCapacityCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.PurchaseReservedStorageCapacityCommonRequest(input)
	return out, req.Send()
}

// PurchaseReservedStorageCapacityCommonWithContext is the same as PurchaseReservedStorageCapacityCommon with the addition of
// the ability to pass a context and additional request options.
//
// See PurchaseReservedStorageCapacityCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) PurchaseReservedStorageCapacityCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.PurchaseReservedStorageCapacityCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opPurchaseReservedStorageCapacity = "PurchaseReservedStorageCapacity"

// PurchaseReservedStorageCapacityRequest generates a "byteplus/request.Request" representing the
// client's request for the PurchaseReservedStorageCapacity operation. The "output" return
// value will be populated with the PurchaseReservedStorageCapacityCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PurchaseReservedStorageCapacityCommon Request to send the API call to the service.
// the "output" return value is not valid until after PurchaseReservedStorageCapacityCommon Send returns without error.
//
// See PurchaseReservedStorageCapacity for more information on using the PurchaseReservedStorageCapacity
// API call, and error handling.
//
//    // Example sending a request using the PurchaseReservedStorageCapacityRequest method.
//    req, resp := client.PurchaseReservedStorageCapacityRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) PurchaseReservedStorageCapacityRequest(input *PurchaseReservedStorageCapacityInput) (req *request.Request, output *PurchaseReservedStorageCapacityOutput) {
	op := &request.Operation{
		Name:       opPurchaseReservedStorageCapacity,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &PurchaseReservedStorageCapacityInput{}
	}

	output = &PurchaseReservedStorageCapacityOutput{}
	req = c.newRequest(op, input, output)

	return
}

// PurchaseReservedStorageCapacity API operation for STORAGE_EBS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for STORAGE_EBS's
// API operation PurchaseReservedStorageCapacity for usage and error information.
func (c *STORAGEEBS) PurchaseReservedStorageCapacity(input *PurchaseReservedStorageCapacityInput) (*PurchaseReservedStorageCapacityOutput, error) {
	req, out := c.PurchaseReservedStorageCapacityRequest(input)
	return out, req.Send()
}

// PurchaseReservedStorageCapacityWithContext is the same as PurchaseReservedStorageCapacity with the addition of
// the ability to pass a context and additional request options.
//
// See PurchaseReservedStorageCapacity for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) PurchaseReservedStorageCapacityWithContext(ctx byteplus.Context, input *PurchaseReservedStorageCapacityInput, opts ...request.Option) (*PurchaseReservedStorageCapacityOutput, error) {
	req, out := c.PurchaseReservedStorageCapacityRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type PurchaseReservedStorageCapacityInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	EffectiveAt *string `type:"string"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`

	RSCAutoRenew *bool `type:"boolean"`

	ReservedCapacity *int32 `type:"int32"`

	ReservedStorageCapacityName *string `type:"string"`

	VolumeType *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s PurchaseReservedStorageCapacityInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s PurchaseReservedStorageCapacityInput) GoString() string {
	return s.String()
}

// SetClientToken sets the ClientToken field's value.
func (s *PurchaseReservedStorageCapacityInput) SetClientToken(v string) *PurchaseReservedStorageCapacityInput {
	s.ClientToken = &v
	return s
}

// SetEffectiveAt sets the EffectiveAt field's value.
func (s *PurchaseReservedStorageCapacityInput) SetEffectiveAt(v string) *PurchaseReservedStorageCapacityInput {
	s.EffectiveAt = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *PurchaseReservedStorageCapacityInput) SetPeriod(v int32) *PurchaseReservedStorageCapacityInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *PurchaseReservedStorageCapacityInput) SetPeriodUnit(v string) *PurchaseReservedStorageCapacityInput {
	s.PeriodUnit = &v
	return s
}

// SetRSCAutoRenew sets the RSCAutoRenew field's value.
func (s *PurchaseReservedStorageCapacityInput) SetRSCAutoRenew(v bool) *PurchaseReservedStorageCapacityInput {
	s.RSCAutoRenew = &v
	return s
}

// SetReservedCapacity sets the ReservedCapacity field's value.
func (s *PurchaseReservedStorageCapacityInput) SetReservedCapacity(v int32) *PurchaseReservedStorageCapacityInput {
	s.ReservedCapacity = &v
	return s
}

// SetReservedStorageCapacityName sets the ReservedStorageCapacityName field's value.
func (s *PurchaseReservedStorageCapacityInput) SetReservedStorageCapacityName(v string) *PurchaseReservedStorageCapacityInput {
	s.ReservedStorageCapacityName = &v
	return s
}

// SetVolumeType sets the VolumeType field's value.
func (s *PurchaseReservedStorageCapacityInput) SetVolumeType(v string) *PurchaseReservedStorageCapacityInput {
	s.VolumeType = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *PurchaseReservedStorageCapacityInput) SetZoneId(v string) *PurchaseReservedStorageCapacityInput {
	s.ZoneId = &v
	return s
}

type PurchaseReservedStorageCapacityOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	OrderNumber *string `type:"string"`

	ReservedStorageCapacityId *string `type:"string"`
}

// String returns the string representation
func (s PurchaseReservedStorageCapacityOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s PurchaseReservedStorageCapacityOutput) GoString() string {
	return s.String()
}

// SetOrderNumber sets the OrderNumber field's value.
func (s *PurchaseReservedStorageCapacityOutput) SetOrderNumber(v string) *PurchaseReservedStorageCapacityOutput {
	s.OrderNumber = &v
	return s
}

// SetReservedStorageCapacityId sets the ReservedStorageCapacityId field's value.
func (s *PurchaseReservedStorageCapacityOutput) SetReservedStorageCapacityId(v string) *PurchaseReservedStorageCapacityOutput {
	s.ReservedStorageCapacityId = &v
	return s
}
