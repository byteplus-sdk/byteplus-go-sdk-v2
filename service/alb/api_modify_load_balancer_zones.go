// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package alb

import (
	"fmt"

	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyLoadBalancerZonesCommon = "ModifyLoadBalancerZones"

// ModifyLoadBalancerZonesCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyLoadBalancerZonesCommon operation. The "output" return
// value will be populated with the ModifyLoadBalancerZonesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyLoadBalancerZonesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyLoadBalancerZonesCommon Send returns without error.
//
// See ModifyLoadBalancerZonesCommon for more information on using the ModifyLoadBalancerZonesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyLoadBalancerZonesCommonRequest method.
//    req, resp := client.ModifyLoadBalancerZonesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ALB) ModifyLoadBalancerZonesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyLoadBalancerZonesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyLoadBalancerZonesCommon API operation for ALB.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ALB's
// API operation ModifyLoadBalancerZonesCommon for usage and error information.
func (c *ALB) ModifyLoadBalancerZonesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyLoadBalancerZonesCommonRequest(input)
	return out, req.Send()
}

// ModifyLoadBalancerZonesCommonWithContext is the same as ModifyLoadBalancerZonesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyLoadBalancerZonesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ALB) ModifyLoadBalancerZonesCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyLoadBalancerZonesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyLoadBalancerZones = "ModifyLoadBalancerZones"

// ModifyLoadBalancerZonesRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyLoadBalancerZones operation. The "output" return
// value will be populated with the ModifyLoadBalancerZonesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyLoadBalancerZonesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyLoadBalancerZonesCommon Send returns without error.
//
// See ModifyLoadBalancerZones for more information on using the ModifyLoadBalancerZones
// API call, and error handling.
//
//    // Example sending a request using the ModifyLoadBalancerZonesRequest method.
//    req, resp := client.ModifyLoadBalancerZonesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ALB) ModifyLoadBalancerZonesRequest(input *ModifyLoadBalancerZonesInput) (req *request.Request, output *ModifyLoadBalancerZonesOutput) {
	op := &request.Operation{
		Name:       opModifyLoadBalancerZones,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyLoadBalancerZonesInput{}
	}

	output = &ModifyLoadBalancerZonesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyLoadBalancerZones API operation for ALB.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for ALB's
// API operation ModifyLoadBalancerZones for usage and error information.
func (c *ALB) ModifyLoadBalancerZones(input *ModifyLoadBalancerZonesInput) (*ModifyLoadBalancerZonesOutput, error) {
	req, out := c.ModifyLoadBalancerZonesRequest(input)
	return out, req.Send()
}

// ModifyLoadBalancerZonesWithContext is the same as ModifyLoadBalancerZones with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyLoadBalancerZones for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ALB) ModifyLoadBalancerZonesWithContext(ctx byteplus.Context, input *ModifyLoadBalancerZonesInput, opts ...request.Option) (*ModifyLoadBalancerZonesOutput, error) {
	req, out := c.ModifyLoadBalancerZonesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyLoadBalancerZonesInput struct {
	_ struct{} `type:"structure"`

	// LoadBalancerId is a required field
	LoadBalancerId *string `type:"string" required:"true"`

	ZoneMappings []*ZoneMappingForModifyLoadBalancerZonesInput `type:"list"`
}

// String returns the string representation
func (s ModifyLoadBalancerZonesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyLoadBalancerZonesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyLoadBalancerZonesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyLoadBalancerZonesInput"}
	if s.LoadBalancerId == nil {
		invalidParams.Add(request.NewErrParamRequired("LoadBalancerId"))
	}
	if s.ZoneMappings != nil {
		for i, v := range s.ZoneMappings {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "ZoneMappings", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *ModifyLoadBalancerZonesInput) SetLoadBalancerId(v string) *ModifyLoadBalancerZonesInput {
	s.LoadBalancerId = &v
	return s
}

// SetZoneMappings sets the ZoneMappings field's value.
func (s *ModifyLoadBalancerZonesInput) SetZoneMappings(v []*ZoneMappingForModifyLoadBalancerZonesInput) *ModifyLoadBalancerZonesInput {
	s.ZoneMappings = v
	return s
}

type ModifyLoadBalancerZonesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ModifyLoadBalancerZonesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyLoadBalancerZonesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ModifyLoadBalancerZonesOutput) SetRequestId(v string) *ModifyLoadBalancerZonesOutput {
	s.RequestId = &v
	return s
}

type ZoneMappingForModifyLoadBalancerZonesInput struct {
	_ struct{} `type:"structure"`

	AllocationId *string `type:"string"`

	// SubnetId is a required field
	SubnetId *string `type:"string" required:"true"`

	// ZoneId is a required field
	ZoneId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ZoneMappingForModifyLoadBalancerZonesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ZoneMappingForModifyLoadBalancerZonesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ZoneMappingForModifyLoadBalancerZonesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ZoneMappingForModifyLoadBalancerZonesInput"}
	if s.SubnetId == nil {
		invalidParams.Add(request.NewErrParamRequired("SubnetId"))
	}
	if s.ZoneId == nil {
		invalidParams.Add(request.NewErrParamRequired("ZoneId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAllocationId sets the AllocationId field's value.
func (s *ZoneMappingForModifyLoadBalancerZonesInput) SetAllocationId(v string) *ZoneMappingForModifyLoadBalancerZonesInput {
	s.AllocationId = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *ZoneMappingForModifyLoadBalancerZonesInput) SetSubnetId(v string) *ZoneMappingForModifyLoadBalancerZonesInput {
	s.SubnetId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *ZoneMappingForModifyLoadBalancerZonesInput) SetZoneId(v string) *ZoneMappingForModifyLoadBalancerZonesInput {
	s.ZoneId = &v
	return s
}
