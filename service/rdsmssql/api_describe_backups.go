// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmssql

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDescribeBackupsCommon = "DescribeBackups"

// DescribeBackupsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeBackupsCommon operation. The "output" return
// value will be populated with the DescribeBackupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupsCommon Send returns without error.
//
// See DescribeBackupsCommon for more information on using the DescribeBackupsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeBackupsCommonRequest method.
//    req, resp := client.DescribeBackupsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMSSQL) DescribeBackupsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeBackupsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackupsCommon API operation for RDS_MSSQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MSSQL's
// API operation DescribeBackupsCommon for usage and error information.
func (c *RDSMSSQL) DescribeBackupsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupsCommonRequest(input)
	return out, req.Send()
}

// DescribeBackupsCommonWithContext is the same as DescribeBackupsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackupsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMSSQL) DescribeBackupsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBackups = "DescribeBackups"

// DescribeBackupsRequest generates a "byteplus/request.Request" representing the
// client's request for the DescribeBackups operation. The "output" return
// value will be populated with the DescribeBackupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupsCommon Send returns without error.
//
// See DescribeBackups for more information on using the DescribeBackups
// API call, and error handling.
//
//    // Example sending a request using the DescribeBackupsRequest method.
//    req, resp := client.DescribeBackupsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMSSQL) DescribeBackupsRequest(input *DescribeBackupsInput) (req *request.Request, output *DescribeBackupsOutput) {
	op := &request.Operation{
		Name:       opDescribeBackups,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeBackupsInput{}
	}

	output = &DescribeBackupsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackups API operation for RDS_MSSQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MSSQL's
// API operation DescribeBackups for usage and error information.
func (c *RDSMSSQL) DescribeBackups(input *DescribeBackupsInput) (*DescribeBackupsOutput, error) {
	req, out := c.DescribeBackupsRequest(input)
	return out, req.Send()
}

// DescribeBackupsWithContext is the same as DescribeBackups with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackups for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMSSQL) DescribeBackupsWithContext(ctx byteplus.Context, input *DescribeBackupsInput, opts ...request.Option) (*DescribeBackupsOutput, error) {
	req, out := c.DescribeBackupsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BackupDatabaseDetailForDescribeBackupsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BackupDownloadLinkEIP *string `type:"string" json:",omitempty"`

	BackupDownloadLinkInner *string `type:"string" json:",omitempty"`

	BackupEndTime *string `type:"string" json:",omitempty"`

	BackupFileName *string `type:"string" json:",omitempty"`

	BackupFileSize *int64 `type:"int64" json:",omitempty"`

	BackupStartTime *string `type:"string" json:",omitempty"`

	BackupType *string `type:"string" json:",omitempty"`

	DatabaseName *string `type:"string" json:",omitempty"`

	DownloadProgress *int32 `type:"int32" json:",omitempty"`

	DownloadStatus *string `type:"string" json:",omitempty"`

	LinkExpiredTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s BackupDatabaseDetailForDescribeBackupsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s BackupDatabaseDetailForDescribeBackupsOutput) GoString() string {
	return s.String()
}

// SetBackupDownloadLinkEIP sets the BackupDownloadLinkEIP field's value.
func (s *BackupDatabaseDetailForDescribeBackupsOutput) SetBackupDownloadLinkEIP(v string) *BackupDatabaseDetailForDescribeBackupsOutput {
	s.BackupDownloadLinkEIP = &v
	return s
}

// SetBackupDownloadLinkInner sets the BackupDownloadLinkInner field's value.
func (s *BackupDatabaseDetailForDescribeBackupsOutput) SetBackupDownloadLinkInner(v string) *BackupDatabaseDetailForDescribeBackupsOutput {
	s.BackupDownloadLinkInner = &v
	return s
}

// SetBackupEndTime sets the BackupEndTime field's value.
func (s *BackupDatabaseDetailForDescribeBackupsOutput) SetBackupEndTime(v string) *BackupDatabaseDetailForDescribeBackupsOutput {
	s.BackupEndTime = &v
	return s
}

// SetBackupFileName sets the BackupFileName field's value.
func (s *BackupDatabaseDetailForDescribeBackupsOutput) SetBackupFileName(v string) *BackupDatabaseDetailForDescribeBackupsOutput {
	s.BackupFileName = &v
	return s
}

// SetBackupFileSize sets the BackupFileSize field's value.
func (s *BackupDatabaseDetailForDescribeBackupsOutput) SetBackupFileSize(v int64) *BackupDatabaseDetailForDescribeBackupsOutput {
	s.BackupFileSize = &v
	return s
}

// SetBackupStartTime sets the BackupStartTime field's value.
func (s *BackupDatabaseDetailForDescribeBackupsOutput) SetBackupStartTime(v string) *BackupDatabaseDetailForDescribeBackupsOutput {
	s.BackupStartTime = &v
	return s
}

// SetBackupType sets the BackupType field's value.
func (s *BackupDatabaseDetailForDescribeBackupsOutput) SetBackupType(v string) *BackupDatabaseDetailForDescribeBackupsOutput {
	s.BackupType = &v
	return s
}

// SetDatabaseName sets the DatabaseName field's value.
func (s *BackupDatabaseDetailForDescribeBackupsOutput) SetDatabaseName(v string) *BackupDatabaseDetailForDescribeBackupsOutput {
	s.DatabaseName = &v
	return s
}

// SetDownloadProgress sets the DownloadProgress field's value.
func (s *BackupDatabaseDetailForDescribeBackupsOutput) SetDownloadProgress(v int32) *BackupDatabaseDetailForDescribeBackupsOutput {
	s.DownloadProgress = &v
	return s
}

// SetDownloadStatus sets the DownloadStatus field's value.
func (s *BackupDatabaseDetailForDescribeBackupsOutput) SetDownloadStatus(v string) *BackupDatabaseDetailForDescribeBackupsOutput {
	s.DownloadStatus = &v
	return s
}

// SetLinkExpiredTime sets the LinkExpiredTime field's value.
func (s *BackupDatabaseDetailForDescribeBackupsOutput) SetLinkExpiredTime(v string) *BackupDatabaseDetailForDescribeBackupsOutput {
	s.LinkExpiredTime = &v
	return s
}

type BackupsInfoForDescribeBackupsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BackupDatabaseDetail []*BackupDatabaseDetailForDescribeBackupsOutput `type:"list" json:",omitempty"`

	BackupEndTime *string `type:"string" json:",omitempty"`

	BackupFileSize *int64 `type:"int64" json:",omitempty"`

	BackupId *string `type:"string" json:",omitempty"`

	BackupMethod *string `type:"string" json:",omitempty"`

	BackupStartTime *string `type:"string" json:",omitempty"`

	BackupStatus *string `type:"string" json:",omitempty"`

	BackupType *string `type:"string" json:",omitempty"`

	CreateType *string `type:"string" json:",omitempty"`

	DownloadProgress *int32 `type:"int32" json:",omitempty"`

	DownloadStatus *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s BackupsInfoForDescribeBackupsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s BackupsInfoForDescribeBackupsOutput) GoString() string {
	return s.String()
}

// SetBackupDatabaseDetail sets the BackupDatabaseDetail field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupDatabaseDetail(v []*BackupDatabaseDetailForDescribeBackupsOutput) *BackupsInfoForDescribeBackupsOutput {
	s.BackupDatabaseDetail = v
	return s
}

// SetBackupEndTime sets the BackupEndTime field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupEndTime(v string) *BackupsInfoForDescribeBackupsOutput {
	s.BackupEndTime = &v
	return s
}

// SetBackupFileSize sets the BackupFileSize field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupFileSize(v int64) *BackupsInfoForDescribeBackupsOutput {
	s.BackupFileSize = &v
	return s
}

// SetBackupId sets the BackupId field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupId(v string) *BackupsInfoForDescribeBackupsOutput {
	s.BackupId = &v
	return s
}

// SetBackupMethod sets the BackupMethod field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupMethod(v string) *BackupsInfoForDescribeBackupsOutput {
	s.BackupMethod = &v
	return s
}

// SetBackupStartTime sets the BackupStartTime field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupStartTime(v string) *BackupsInfoForDescribeBackupsOutput {
	s.BackupStartTime = &v
	return s
}

// SetBackupStatus sets the BackupStatus field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupStatus(v string) *BackupsInfoForDescribeBackupsOutput {
	s.BackupStatus = &v
	return s
}

// SetBackupType sets the BackupType field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupType(v string) *BackupsInfoForDescribeBackupsOutput {
	s.BackupType = &v
	return s
}

// SetCreateType sets the CreateType field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetCreateType(v string) *BackupsInfoForDescribeBackupsOutput {
	s.CreateType = &v
	return s
}

// SetDownloadProgress sets the DownloadProgress field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetDownloadProgress(v int32) *BackupsInfoForDescribeBackupsOutput {
	s.DownloadProgress = &v
	return s
}

// SetDownloadStatus sets the DownloadStatus field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetDownloadStatus(v string) *BackupsInfoForDescribeBackupsOutput {
	s.DownloadStatus = &v
	return s
}

type DescribeBackupsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BackupEndTime *string `type:"string" json:",omitempty"`

	BackupId *string `type:"string" json:",omitempty"`

	BackupStartTime *string `type:"string" json:",omitempty"`

	BackupType *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	PageNumber *int32 `type:"int32" json:",omitempty"`

	PageSize *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeBackupsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeBackupsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeBackupsInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBackupEndTime sets the BackupEndTime field's value.
func (s *DescribeBackupsInput) SetBackupEndTime(v string) *DescribeBackupsInput {
	s.BackupEndTime = &v
	return s
}

// SetBackupId sets the BackupId field's value.
func (s *DescribeBackupsInput) SetBackupId(v string) *DescribeBackupsInput {
	s.BackupId = &v
	return s
}

// SetBackupStartTime sets the BackupStartTime field's value.
func (s *DescribeBackupsInput) SetBackupStartTime(v string) *DescribeBackupsInput {
	s.BackupStartTime = &v
	return s
}

// SetBackupType sets the BackupType field's value.
func (s *DescribeBackupsInput) SetBackupType(v string) *DescribeBackupsInput {
	s.BackupType = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeBackupsInput) SetInstanceId(v string) *DescribeBackupsInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeBackupsInput) SetPageNumber(v int32) *DescribeBackupsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeBackupsInput) SetPageSize(v int32) *DescribeBackupsInput {
	s.PageSize = &v
	return s
}

type DescribeBackupsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	BackupsInfo []*BackupsInfoForDescribeBackupsOutput `type:"list" json:",omitempty"`

	Total *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s DescribeBackupsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupsOutput) GoString() string {
	return s.String()
}

// SetBackupsInfo sets the BackupsInfo field's value.
func (s *DescribeBackupsOutput) SetBackupsInfo(v []*BackupsInfoForDescribeBackupsOutput) *DescribeBackupsOutput {
	s.BackupsInfo = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeBackupsOutput) SetTotal(v int32) *DescribeBackupsOutput {
	s.Total = &v
	return s
}
