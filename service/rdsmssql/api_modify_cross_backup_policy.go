// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmssql

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyCrossBackupPolicyCommon = "ModifyCrossBackupPolicy"

// ModifyCrossBackupPolicyCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyCrossBackupPolicyCommon operation. The "output" return
// value will be populated with the ModifyCrossBackupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyCrossBackupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyCrossBackupPolicyCommon Send returns without error.
//
// See ModifyCrossBackupPolicyCommon for more information on using the ModifyCrossBackupPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyCrossBackupPolicyCommonRequest method.
//    req, resp := client.ModifyCrossBackupPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMSSQL) ModifyCrossBackupPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyCrossBackupPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyCrossBackupPolicyCommon API operation for RDS_MSSQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MSSQL's
// API operation ModifyCrossBackupPolicyCommon for usage and error information.
func (c *RDSMSSQL) ModifyCrossBackupPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyCrossBackupPolicyCommonRequest(input)
	return out, req.Send()
}

// ModifyCrossBackupPolicyCommonWithContext is the same as ModifyCrossBackupPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyCrossBackupPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMSSQL) ModifyCrossBackupPolicyCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyCrossBackupPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyCrossBackupPolicy = "ModifyCrossBackupPolicy"

// ModifyCrossBackupPolicyRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyCrossBackupPolicy operation. The "output" return
// value will be populated with the ModifyCrossBackupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyCrossBackupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyCrossBackupPolicyCommon Send returns without error.
//
// See ModifyCrossBackupPolicy for more information on using the ModifyCrossBackupPolicy
// API call, and error handling.
//
//    // Example sending a request using the ModifyCrossBackupPolicyRequest method.
//    req, resp := client.ModifyCrossBackupPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMSSQL) ModifyCrossBackupPolicyRequest(input *ModifyCrossBackupPolicyInput) (req *request.Request, output *ModifyCrossBackupPolicyOutput) {
	op := &request.Operation{
		Name:       opModifyCrossBackupPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyCrossBackupPolicyInput{}
	}

	output = &ModifyCrossBackupPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyCrossBackupPolicy API operation for RDS_MSSQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MSSQL's
// API operation ModifyCrossBackupPolicy for usage and error information.
func (c *RDSMSSQL) ModifyCrossBackupPolicy(input *ModifyCrossBackupPolicyInput) (*ModifyCrossBackupPolicyOutput, error) {
	req, out := c.ModifyCrossBackupPolicyRequest(input)
	return out, req.Send()
}

// ModifyCrossBackupPolicyWithContext is the same as ModifyCrossBackupPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyCrossBackupPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMSSQL) ModifyCrossBackupPolicyWithContext(ctx byteplus.Context, input *ModifyCrossBackupPolicyInput, opts ...request.Option) (*ModifyCrossBackupPolicyOutput, error) {
	req, out := c.ModifyCrossBackupPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyCrossBackupPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	BackupEnabled *bool `type:"boolean" json:",omitempty"`

	CrossBackupRegion *string `type:"string" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	Retention *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ModifyCrossBackupPolicyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyCrossBackupPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyCrossBackupPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyCrossBackupPolicyInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBackupEnabled sets the BackupEnabled field's value.
func (s *ModifyCrossBackupPolicyInput) SetBackupEnabled(v bool) *ModifyCrossBackupPolicyInput {
	s.BackupEnabled = &v
	return s
}

// SetCrossBackupRegion sets the CrossBackupRegion field's value.
func (s *ModifyCrossBackupPolicyInput) SetCrossBackupRegion(v string) *ModifyCrossBackupPolicyInput {
	s.CrossBackupRegion = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyCrossBackupPolicyInput) SetInstanceId(v string) *ModifyCrossBackupPolicyInput {
	s.InstanceId = &v
	return s
}

// SetRetention sets the Retention field's value.
func (s *ModifyCrossBackupPolicyInput) SetRetention(v int32) *ModifyCrossBackupPolicyInput {
	s.Retention = &v
	return s
}

type ModifyCrossBackupPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	BackupEnabled *bool `type:"boolean" json:",omitempty"`

	CrossBackupRegion *string `type:"string" json:",omitempty"`

	InstanceId *string `type:"string" json:",omitempty"`

	Retention *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ModifyCrossBackupPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyCrossBackupPolicyOutput) GoString() string {
	return s.String()
}

// SetBackupEnabled sets the BackupEnabled field's value.
func (s *ModifyCrossBackupPolicyOutput) SetBackupEnabled(v bool) *ModifyCrossBackupPolicyOutput {
	s.BackupEnabled = &v
	return s
}

// SetCrossBackupRegion sets the CrossBackupRegion field's value.
func (s *ModifyCrossBackupPolicyOutput) SetCrossBackupRegion(v string) *ModifyCrossBackupPolicyOutput {
	s.CrossBackupRegion = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyCrossBackupPolicyOutput) SetInstanceId(v string) *ModifyCrossBackupPolicyOutput {
	s.InstanceId = &v
	return s
}

// SetRetention sets the Retention field's value.
func (s *ModifyCrossBackupPolicyOutput) SetRetention(v int32) *ModifyCrossBackupPolicyOutput {
	s.Retention = &v
	return s
}
