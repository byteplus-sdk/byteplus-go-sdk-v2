// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmssql

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyBackupPolicyCommon = "ModifyBackupPolicy"

// ModifyBackupPolicyCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyBackupPolicyCommon operation. The "output" return
// value will be populated with the ModifyBackupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyBackupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyBackupPolicyCommon Send returns without error.
//
// See ModifyBackupPolicyCommon for more information on using the ModifyBackupPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyBackupPolicyCommonRequest method.
//    req, resp := client.ModifyBackupPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMSSQL) ModifyBackupPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyBackupPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyBackupPolicyCommon API operation for RDS_MSSQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MSSQL's
// API operation ModifyBackupPolicyCommon for usage and error information.
func (c *RDSMSSQL) ModifyBackupPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyBackupPolicyCommonRequest(input)
	return out, req.Send()
}

// ModifyBackupPolicyCommonWithContext is the same as ModifyBackupPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyBackupPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMSSQL) ModifyBackupPolicyCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyBackupPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyBackupPolicy = "ModifyBackupPolicy"

// ModifyBackupPolicyRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyBackupPolicy operation. The "output" return
// value will be populated with the ModifyBackupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyBackupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyBackupPolicyCommon Send returns without error.
//
// See ModifyBackupPolicy for more information on using the ModifyBackupPolicy
// API call, and error handling.
//
//    // Example sending a request using the ModifyBackupPolicyRequest method.
//    req, resp := client.ModifyBackupPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMSSQL) ModifyBackupPolicyRequest(input *ModifyBackupPolicyInput) (req *request.Request, output *ModifyBackupPolicyOutput) {
	op := &request.Operation{
		Name:       opModifyBackupPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyBackupPolicyInput{}
	}

	output = &ModifyBackupPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyBackupPolicy API operation for RDS_MSSQL.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for RDS_MSSQL's
// API operation ModifyBackupPolicy for usage and error information.
func (c *RDSMSSQL) ModifyBackupPolicy(input *ModifyBackupPolicyInput) (*ModifyBackupPolicyOutput, error) {
	req, out := c.ModifyBackupPolicyRequest(input)
	return out, req.Send()
}

// ModifyBackupPolicyWithContext is the same as ModifyBackupPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyBackupPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMSSQL) ModifyBackupPolicyWithContext(ctx byteplus.Context, input *ModifyBackupPolicyInput, opts ...request.Option) (*ModifyBackupPolicyOutput, error) {
	req, out := c.ModifyBackupPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyBackupPolicyInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// BackupRetentionPeriod is a required field
	BackupRetentionPeriod *int32 `type:"int32" json:",omitempty" required:"true"`

	// BackupTime is a required field
	BackupTime *string `type:"string" json:",omitempty" required:"true"`

	// FullBackupPeriod is a required field
	FullBackupPeriod *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	LogBackupInterval *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s ModifyBackupPolicyInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyBackupPolicyInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyBackupPolicyInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyBackupPolicyInput"}
	if s.BackupRetentionPeriod == nil {
		invalidParams.Add(request.NewErrParamRequired("BackupRetentionPeriod"))
	}
	if s.BackupTime == nil {
		invalidParams.Add(request.NewErrParamRequired("BackupTime"))
	}
	if s.FullBackupPeriod == nil {
		invalidParams.Add(request.NewErrParamRequired("FullBackupPeriod"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBackupRetentionPeriod sets the BackupRetentionPeriod field's value.
func (s *ModifyBackupPolicyInput) SetBackupRetentionPeriod(v int32) *ModifyBackupPolicyInput {
	s.BackupRetentionPeriod = &v
	return s
}

// SetBackupTime sets the BackupTime field's value.
func (s *ModifyBackupPolicyInput) SetBackupTime(v string) *ModifyBackupPolicyInput {
	s.BackupTime = &v
	return s
}

// SetFullBackupPeriod sets the FullBackupPeriod field's value.
func (s *ModifyBackupPolicyInput) SetFullBackupPeriod(v string) *ModifyBackupPolicyInput {
	s.FullBackupPeriod = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyBackupPolicyInput) SetInstanceId(v string) *ModifyBackupPolicyInput {
	s.InstanceId = &v
	return s
}

// SetLogBackupInterval sets the LogBackupInterval field's value.
func (s *ModifyBackupPolicyInput) SetLogBackupInterval(v int32) *ModifyBackupPolicyInput {
	s.LogBackupInterval = &v
	return s
}

type ModifyBackupPolicyOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	InstanceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ModifyBackupPolicyOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyBackupPolicyOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyBackupPolicyOutput) SetInstanceId(v string) *ModifyBackupPolicyOutput {
	s.InstanceId = &v
	return s
}
