// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGetFunctionInstanceLogsCommon = "GetFunctionInstanceLogs"

// GetFunctionInstanceLogsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GetFunctionInstanceLogsCommon operation. The "output" return
// value will be populated with the GetFunctionInstanceLogsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetFunctionInstanceLogsCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetFunctionInstanceLogsCommon Send returns without error.
//
// See GetFunctionInstanceLogsCommon for more information on using the GetFunctionInstanceLogsCommon
// API call, and error handling.
//
//    // Example sending a request using the GetFunctionInstanceLogsCommonRequest method.
//    req, resp := client.GetFunctionInstanceLogsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) GetFunctionInstanceLogsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetFunctionInstanceLogsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetFunctionInstanceLogsCommon API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation GetFunctionInstanceLogsCommon for usage and error information.
func (c *VEFAAS) GetFunctionInstanceLogsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetFunctionInstanceLogsCommonRequest(input)
	return out, req.Send()
}

// GetFunctionInstanceLogsCommonWithContext is the same as GetFunctionInstanceLogsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetFunctionInstanceLogsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) GetFunctionInstanceLogsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetFunctionInstanceLogsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetFunctionInstanceLogs = "GetFunctionInstanceLogs"

// GetFunctionInstanceLogsRequest generates a "byteplus/request.Request" representing the
// client's request for the GetFunctionInstanceLogs operation. The "output" return
// value will be populated with the GetFunctionInstanceLogsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetFunctionInstanceLogsCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetFunctionInstanceLogsCommon Send returns without error.
//
// See GetFunctionInstanceLogs for more information on using the GetFunctionInstanceLogs
// API call, and error handling.
//
//    // Example sending a request using the GetFunctionInstanceLogsRequest method.
//    req, resp := client.GetFunctionInstanceLogsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) GetFunctionInstanceLogsRequest(input *GetFunctionInstanceLogsInput) (req *request.Request, output *GetFunctionInstanceLogsOutput) {
	op := &request.Operation{
		Name:       opGetFunctionInstanceLogs,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetFunctionInstanceLogsInput{}
	}

	output = &GetFunctionInstanceLogsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetFunctionInstanceLogs API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation GetFunctionInstanceLogs for usage and error information.
func (c *VEFAAS) GetFunctionInstanceLogs(input *GetFunctionInstanceLogsInput) (*GetFunctionInstanceLogsOutput, error) {
	req, out := c.GetFunctionInstanceLogsRequest(input)
	return out, req.Send()
}

// GetFunctionInstanceLogsWithContext is the same as GetFunctionInstanceLogs with the addition of
// the ability to pass a context and additional request options.
//
// See GetFunctionInstanceLogs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) GetFunctionInstanceLogsWithContext(ctx byteplus.Context, input *GetFunctionInstanceLogsInput, opts ...request.Option) (*GetFunctionInstanceLogsOutput, error) {
	req, out := c.GetFunctionInstanceLogsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetFunctionInstanceLogsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`

	Limit *int64 `type:"int64" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetFunctionInstanceLogsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFunctionInstanceLogsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetFunctionInstanceLogsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetFunctionInstanceLogsInput"}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionId sets the FunctionId field's value.
func (s *GetFunctionInstanceLogsInput) SetFunctionId(v string) *GetFunctionInstanceLogsInput {
	s.FunctionId = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *GetFunctionInstanceLogsInput) SetLimit(v int64) *GetFunctionInstanceLogsInput {
	s.Limit = &v
	return s
}

// SetName sets the Name field's value.
func (s *GetFunctionInstanceLogsInput) SetName(v string) *GetFunctionInstanceLogsInput {
	s.Name = &v
	return s
}

type GetFunctionInstanceLogsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Logs *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetFunctionInstanceLogsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFunctionInstanceLogsOutput) GoString() string {
	return s.String()
}

// SetLogs sets the Logs field's value.
func (s *GetFunctionInstanceLogsOutput) SetLogs(v string) *GetFunctionInstanceLogsOutput {
	s.Logs = &v
	return s
}
