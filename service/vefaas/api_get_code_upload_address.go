// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGetCodeUploadAddressCommon = "GetCodeUploadAddress"

// GetCodeUploadAddressCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GetCodeUploadAddressCommon operation. The "output" return
// value will be populated with the GetCodeUploadAddressCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetCodeUploadAddressCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetCodeUploadAddressCommon Send returns without error.
//
// See GetCodeUploadAddressCommon for more information on using the GetCodeUploadAddressCommon
// API call, and error handling.
//
//    // Example sending a request using the GetCodeUploadAddressCommonRequest method.
//    req, resp := client.GetCodeUploadAddressCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) GetCodeUploadAddressCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetCodeUploadAddressCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetCodeUploadAddressCommon API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation GetCodeUploadAddressCommon for usage and error information.
func (c *VEFAAS) GetCodeUploadAddressCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetCodeUploadAddressCommonRequest(input)
	return out, req.Send()
}

// GetCodeUploadAddressCommonWithContext is the same as GetCodeUploadAddressCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetCodeUploadAddressCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) GetCodeUploadAddressCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetCodeUploadAddressCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetCodeUploadAddress = "GetCodeUploadAddress"

// GetCodeUploadAddressRequest generates a "byteplus/request.Request" representing the
// client's request for the GetCodeUploadAddress operation. The "output" return
// value will be populated with the GetCodeUploadAddressCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetCodeUploadAddressCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetCodeUploadAddressCommon Send returns without error.
//
// See GetCodeUploadAddress for more information on using the GetCodeUploadAddress
// API call, and error handling.
//
//    // Example sending a request using the GetCodeUploadAddressRequest method.
//    req, resp := client.GetCodeUploadAddressRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) GetCodeUploadAddressRequest(input *GetCodeUploadAddressInput) (req *request.Request, output *GetCodeUploadAddressOutput) {
	op := &request.Operation{
		Name:       opGetCodeUploadAddress,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetCodeUploadAddressInput{}
	}

	output = &GetCodeUploadAddressOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetCodeUploadAddress API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation GetCodeUploadAddress for usage and error information.
func (c *VEFAAS) GetCodeUploadAddress(input *GetCodeUploadAddressInput) (*GetCodeUploadAddressOutput, error) {
	req, out := c.GetCodeUploadAddressRequest(input)
	return out, req.Send()
}

// GetCodeUploadAddressWithContext is the same as GetCodeUploadAddress with the addition of
// the ability to pass a context and additional request options.
//
// See GetCodeUploadAddress for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) GetCodeUploadAddressWithContext(ctx byteplus.Context, input *GetCodeUploadAddressInput, opts ...request.Option) (*GetCodeUploadAddressOutput, error) {
	req, out := c.GetCodeUploadAddressRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetCodeUploadAddressInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// ContentLength is a required field
	ContentLength *int64 `type:"int64" json:",omitempty" required:"true"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetCodeUploadAddressInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetCodeUploadAddressInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetCodeUploadAddressInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetCodeUploadAddressInput"}
	if s.ContentLength == nil {
		invalidParams.Add(request.NewErrParamRequired("ContentLength"))
	}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetContentLength sets the ContentLength field's value.
func (s *GetCodeUploadAddressInput) SetContentLength(v int64) *GetCodeUploadAddressInput {
	s.ContentLength = &v
	return s
}

// SetFunctionId sets the FunctionId field's value.
func (s *GetCodeUploadAddressInput) SetFunctionId(v string) *GetCodeUploadAddressInput {
	s.FunctionId = &v
	return s
}

type GetCodeUploadAddressOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	UploadAddress *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetCodeUploadAddressOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetCodeUploadAddressOutput) GoString() string {
	return s.String()
}

// SetUploadAddress sets the UploadAddress field's value.
func (s *GetCodeUploadAddressOutput) SetUploadAddress(v string) *GetCodeUploadAddressOutput {
	s.UploadAddress = &v
	return s
}
