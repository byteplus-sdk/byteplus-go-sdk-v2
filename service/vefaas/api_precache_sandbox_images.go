// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opPrecacheSandboxImagesCommon = "PrecacheSandboxImages"

// PrecacheSandboxImagesCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the PrecacheSandboxImagesCommon operation. The "output" return
// value will be populated with the PrecacheSandboxImagesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PrecacheSandboxImagesCommon Request to send the API call to the service.
// the "output" return value is not valid until after PrecacheSandboxImagesCommon Send returns without error.
//
// See PrecacheSandboxImagesCommon for more information on using the PrecacheSandboxImagesCommon
// API call, and error handling.
//
//    // Example sending a request using the PrecacheSandboxImagesCommonRequest method.
//    req, resp := client.PrecacheSandboxImagesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) PrecacheSandboxImagesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opPrecacheSandboxImagesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// PrecacheSandboxImagesCommon API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation PrecacheSandboxImagesCommon for usage and error information.
func (c *VEFAAS) PrecacheSandboxImagesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.PrecacheSandboxImagesCommonRequest(input)
	return out, req.Send()
}

// PrecacheSandboxImagesCommonWithContext is the same as PrecacheSandboxImagesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See PrecacheSandboxImagesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) PrecacheSandboxImagesCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.PrecacheSandboxImagesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opPrecacheSandboxImages = "PrecacheSandboxImages"

// PrecacheSandboxImagesRequest generates a "byteplus/request.Request" representing the
// client's request for the PrecacheSandboxImages operation. The "output" return
// value will be populated with the PrecacheSandboxImagesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PrecacheSandboxImagesCommon Request to send the API call to the service.
// the "output" return value is not valid until after PrecacheSandboxImagesCommon Send returns without error.
//
// See PrecacheSandboxImages for more information on using the PrecacheSandboxImages
// API call, and error handling.
//
//    // Example sending a request using the PrecacheSandboxImagesRequest method.
//    req, resp := client.PrecacheSandboxImagesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) PrecacheSandboxImagesRequest(input *PrecacheSandboxImagesInput) (req *request.Request, output *PrecacheSandboxImagesOutput) {
	op := &request.Operation{
		Name:       opPrecacheSandboxImages,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &PrecacheSandboxImagesInput{}
	}

	output = &PrecacheSandboxImagesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// PrecacheSandboxImages API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation PrecacheSandboxImages for usage and error information.
func (c *VEFAAS) PrecacheSandboxImages(input *PrecacheSandboxImagesInput) (*PrecacheSandboxImagesOutput, error) {
	req, out := c.PrecacheSandboxImagesRequest(input)
	return out, req.Send()
}

// PrecacheSandboxImagesWithContext is the same as PrecacheSandboxImages with the addition of
// the ability to pass a context and additional request options.
//
// See PrecacheSandboxImages for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) PrecacheSandboxImagesWithContext(ctx byteplus.Context, input *PrecacheSandboxImagesInput, opts ...request.Option) (*PrecacheSandboxImagesOutput, error) {
	req, out := c.PrecacheSandboxImagesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type PrecacheSandboxImagesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ImageUrls []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s PrecacheSandboxImagesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s PrecacheSandboxImagesInput) GoString() string {
	return s.String()
}

// SetImageUrls sets the ImageUrls field's value.
func (s *PrecacheSandboxImagesInput) SetImageUrls(v []*string) *PrecacheSandboxImagesInput {
	s.ImageUrls = v
	return s
}

type PrecacheSandboxImagesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	TicketId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s PrecacheSandboxImagesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s PrecacheSandboxImagesOutput) GoString() string {
	return s.String()
}

// SetTicketId sets the TicketId field's value.
func (s *PrecacheSandboxImagesOutput) SetTicketId(v string) *PrecacheSandboxImagesOutput {
	s.TicketId = &v
	return s
}
