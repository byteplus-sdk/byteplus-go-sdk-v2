// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opTerminateAsyncTaskCommon = "TerminateAsyncTask"

// TerminateAsyncTaskCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the TerminateAsyncTaskCommon operation. The "output" return
// value will be populated with the TerminateAsyncTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TerminateAsyncTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after TerminateAsyncTaskCommon Send returns without error.
//
// See TerminateAsyncTaskCommon for more information on using the TerminateAsyncTaskCommon
// API call, and error handling.
//
//    // Example sending a request using the TerminateAsyncTaskCommonRequest method.
//    req, resp := client.TerminateAsyncTaskCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) TerminateAsyncTaskCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opTerminateAsyncTaskCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TerminateAsyncTaskCommon API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation TerminateAsyncTaskCommon for usage and error information.
func (c *VEFAAS) TerminateAsyncTaskCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.TerminateAsyncTaskCommonRequest(input)
	return out, req.Send()
}

// TerminateAsyncTaskCommonWithContext is the same as TerminateAsyncTaskCommon with the addition of
// the ability to pass a context and additional request options.
//
// See TerminateAsyncTaskCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) TerminateAsyncTaskCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.TerminateAsyncTaskCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opTerminateAsyncTask = "TerminateAsyncTask"

// TerminateAsyncTaskRequest generates a "byteplus/request.Request" representing the
// client's request for the TerminateAsyncTask operation. The "output" return
// value will be populated with the TerminateAsyncTaskCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TerminateAsyncTaskCommon Request to send the API call to the service.
// the "output" return value is not valid until after TerminateAsyncTaskCommon Send returns without error.
//
// See TerminateAsyncTask for more information on using the TerminateAsyncTask
// API call, and error handling.
//
//    // Example sending a request using the TerminateAsyncTaskRequest method.
//    req, resp := client.TerminateAsyncTaskRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) TerminateAsyncTaskRequest(input *TerminateAsyncTaskInput) (req *request.Request, output *TerminateAsyncTaskOutput) {
	op := &request.Operation{
		Name:       opTerminateAsyncTask,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TerminateAsyncTaskInput{}
	}

	output = &TerminateAsyncTaskOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// TerminateAsyncTask API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation TerminateAsyncTask for usage and error information.
func (c *VEFAAS) TerminateAsyncTask(input *TerminateAsyncTaskInput) (*TerminateAsyncTaskOutput, error) {
	req, out := c.TerminateAsyncTaskRequest(input)
	return out, req.Send()
}

// TerminateAsyncTaskWithContext is the same as TerminateAsyncTask with the addition of
// the ability to pass a context and additional request options.
//
// See TerminateAsyncTask for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) TerminateAsyncTaskWithContext(ctx byteplus.Context, input *TerminateAsyncTaskInput, opts ...request.Option) (*TerminateAsyncTaskOutput, error) {
	req, out := c.TerminateAsyncTaskRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type TerminateAsyncTaskInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`

	// RequestId is a required field
	RequestId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s TerminateAsyncTaskInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TerminateAsyncTaskInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TerminateAsyncTaskInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "TerminateAsyncTaskInput"}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}
	if s.RequestId == nil {
		invalidParams.Add(request.NewErrParamRequired("RequestId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionId sets the FunctionId field's value.
func (s *TerminateAsyncTaskInput) SetFunctionId(v string) *TerminateAsyncTaskInput {
	s.FunctionId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *TerminateAsyncTaskInput) SetRequestId(v string) *TerminateAsyncTaskInput {
	s.RequestId = &v
	return s
}

type TerminateAsyncTaskOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s TerminateAsyncTaskOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s TerminateAsyncTaskOutput) GoString() string {
	return s.String()
}
