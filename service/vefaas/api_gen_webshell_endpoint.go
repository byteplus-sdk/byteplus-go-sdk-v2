// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGenWebshellEndpointCommon = "GenWebshellEndpoint"

// GenWebshellEndpointCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GenWebshellEndpointCommon operation. The "output" return
// value will be populated with the GenWebshellEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GenWebshellEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after GenWebshellEndpointCommon Send returns without error.
//
// See GenWebshellEndpointCommon for more information on using the GenWebshellEndpointCommon
// API call, and error handling.
//
//    // Example sending a request using the GenWebshellEndpointCommonRequest method.
//    req, resp := client.GenWebshellEndpointCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) GenWebshellEndpointCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGenWebshellEndpointCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GenWebshellEndpointCommon API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation GenWebshellEndpointCommon for usage and error information.
func (c *VEFAAS) GenWebshellEndpointCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GenWebshellEndpointCommonRequest(input)
	return out, req.Send()
}

// GenWebshellEndpointCommonWithContext is the same as GenWebshellEndpointCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GenWebshellEndpointCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) GenWebshellEndpointCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GenWebshellEndpointCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGenWebshellEndpoint = "GenWebshellEndpoint"

// GenWebshellEndpointRequest generates a "byteplus/request.Request" representing the
// client's request for the GenWebshellEndpoint operation. The "output" return
// value will be populated with the GenWebshellEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GenWebshellEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after GenWebshellEndpointCommon Send returns without error.
//
// See GenWebshellEndpoint for more information on using the GenWebshellEndpoint
// API call, and error handling.
//
//    // Example sending a request using the GenWebshellEndpointRequest method.
//    req, resp := client.GenWebshellEndpointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) GenWebshellEndpointRequest(input *GenWebshellEndpointInput) (req *request.Request, output *GenWebshellEndpointOutput) {
	op := &request.Operation{
		Name:       opGenWebshellEndpoint,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GenWebshellEndpointInput{}
	}

	output = &GenWebshellEndpointOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GenWebshellEndpoint API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation GenWebshellEndpoint for usage and error information.
func (c *VEFAAS) GenWebshellEndpoint(input *GenWebshellEndpointInput) (*GenWebshellEndpointOutput, error) {
	req, out := c.GenWebshellEndpointRequest(input)
	return out, req.Send()
}

// GenWebshellEndpointWithContext is the same as GenWebshellEndpoint with the addition of
// the ability to pass a context and additional request options.
//
// See GenWebshellEndpoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) GenWebshellEndpointWithContext(ctx byteplus.Context, input *GenWebshellEndpointInput, opts ...request.Option) (*GenWebshellEndpointOutput, error) {
	req, out := c.GenWebshellEndpointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GenWebshellEndpointInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`

	// InstanceName is a required field
	InstanceName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GenWebshellEndpointInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GenWebshellEndpointInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GenWebshellEndpointInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GenWebshellEndpointInput"}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}
	if s.InstanceName == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionId sets the FunctionId field's value.
func (s *GenWebshellEndpointInput) SetFunctionId(v string) *GenWebshellEndpointInput {
	s.FunctionId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *GenWebshellEndpointInput) SetInstanceName(v string) *GenWebshellEndpointInput {
	s.InstanceName = &v
	return s
}

type GenWebshellEndpointOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Endpoint *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GenWebshellEndpointOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GenWebshellEndpointOutput) GoString() string {
	return s.String()
}

// SetEndpoint sets the Endpoint field's value.
func (s *GenWebshellEndpointOutput) SetEndpoint(v string) *GenWebshellEndpointOutput {
	s.Endpoint = &v
	return s
}
