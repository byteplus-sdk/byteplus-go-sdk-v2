// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUpdateFunctionResourceCommon = "UpdateFunctionResource"

// UpdateFunctionResourceCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateFunctionResourceCommon operation. The "output" return
// value will be populated with the UpdateFunctionResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateFunctionResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateFunctionResourceCommon Send returns without error.
//
// See UpdateFunctionResourceCommon for more information on using the UpdateFunctionResourceCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateFunctionResourceCommonRequest method.
//    req, resp := client.UpdateFunctionResourceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) UpdateFunctionResourceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateFunctionResourceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateFunctionResourceCommon API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation UpdateFunctionResourceCommon for usage and error information.
func (c *VEFAAS) UpdateFunctionResourceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateFunctionResourceCommonRequest(input)
	return out, req.Send()
}

// UpdateFunctionResourceCommonWithContext is the same as UpdateFunctionResourceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateFunctionResourceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) UpdateFunctionResourceCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateFunctionResourceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateFunctionResource = "UpdateFunctionResource"

// UpdateFunctionResourceRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateFunctionResource operation. The "output" return
// value will be populated with the UpdateFunctionResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateFunctionResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateFunctionResourceCommon Send returns without error.
//
// See UpdateFunctionResource for more information on using the UpdateFunctionResource
// API call, and error handling.
//
//    // Example sending a request using the UpdateFunctionResourceRequest method.
//    req, resp := client.UpdateFunctionResourceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) UpdateFunctionResourceRequest(input *UpdateFunctionResourceInput) (req *request.Request, output *UpdateFunctionResourceOutput) {
	op := &request.Operation{
		Name:       opUpdateFunctionResource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateFunctionResourceInput{}
	}

	output = &UpdateFunctionResourceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateFunctionResource API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation UpdateFunctionResource for usage and error information.
func (c *VEFAAS) UpdateFunctionResource(input *UpdateFunctionResourceInput) (*UpdateFunctionResourceOutput, error) {
	req, out := c.UpdateFunctionResourceRequest(input)
	return out, req.Send()
}

// UpdateFunctionResourceWithContext is the same as UpdateFunctionResource with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateFunctionResource for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) UpdateFunctionResourceWithContext(ctx byteplus.Context, input *UpdateFunctionResourceInput, opts ...request.Option) (*UpdateFunctionResourceOutput, error) {
	req, out := c.UpdateFunctionResourceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateFunctionResourceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`

	MaxInstance *int32 `type:"int32" json:",omitempty"`

	MinInstance *int32 `type:"int32" json:",omitempty"`

	ReservedFrozenInstance *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s UpdateFunctionResourceInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateFunctionResourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateFunctionResourceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateFunctionResourceInput"}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionId sets the FunctionId field's value.
func (s *UpdateFunctionResourceInput) SetFunctionId(v string) *UpdateFunctionResourceInput {
	s.FunctionId = &v
	return s
}

// SetMaxInstance sets the MaxInstance field's value.
func (s *UpdateFunctionResourceInput) SetMaxInstance(v int32) *UpdateFunctionResourceInput {
	s.MaxInstance = &v
	return s
}

// SetMinInstance sets the MinInstance field's value.
func (s *UpdateFunctionResourceInput) SetMinInstance(v int32) *UpdateFunctionResourceInput {
	s.MinInstance = &v
	return s
}

// SetReservedFrozenInstance sets the ReservedFrozenInstance field's value.
func (s *UpdateFunctionResourceInput) SetReservedFrozenInstance(v int32) *UpdateFunctionResourceInput {
	s.ReservedFrozenInstance = &v
	return s
}

type UpdateFunctionResourceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`

	MaxInstance *int32 `type:"int32" json:",omitempty"`

	MinInstance *int32 `type:"int32" json:",omitempty"`

	ReservedFrozenInstance *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s UpdateFunctionResourceOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateFunctionResourceOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *UpdateFunctionResourceOutput) SetId(v string) *UpdateFunctionResourceOutput {
	s.Id = &v
	return s
}

// SetMaxInstance sets the MaxInstance field's value.
func (s *UpdateFunctionResourceOutput) SetMaxInstance(v int32) *UpdateFunctionResourceOutput {
	s.MaxInstance = &v
	return s
}

// SetMinInstance sets the MinInstance field's value.
func (s *UpdateFunctionResourceOutput) SetMinInstance(v int32) *UpdateFunctionResourceOutput {
	s.MinInstance = &v
	return s
}

// SetReservedFrozenInstance sets the ReservedFrozenInstance field's value.
func (s *UpdateFunctionResourceOutput) SetReservedFrozenInstance(v int32) *UpdateFunctionResourceOutput {
	s.ReservedFrozenInstance = &v
	return s
}
