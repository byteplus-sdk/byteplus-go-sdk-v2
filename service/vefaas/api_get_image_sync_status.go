// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGetImageSyncStatusCommon = "GetImageSyncStatus"

// GetImageSyncStatusCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GetImageSyncStatusCommon operation. The "output" return
// value will be populated with the GetImageSyncStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetImageSyncStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetImageSyncStatusCommon Send returns without error.
//
// See GetImageSyncStatusCommon for more information on using the GetImageSyncStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the GetImageSyncStatusCommonRequest method.
//    req, resp := client.GetImageSyncStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) GetImageSyncStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetImageSyncStatusCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetImageSyncStatusCommon API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation GetImageSyncStatusCommon for usage and error information.
func (c *VEFAAS) GetImageSyncStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetImageSyncStatusCommonRequest(input)
	return out, req.Send()
}

// GetImageSyncStatusCommonWithContext is the same as GetImageSyncStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetImageSyncStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) GetImageSyncStatusCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetImageSyncStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetImageSyncStatus = "GetImageSyncStatus"

// GetImageSyncStatusRequest generates a "byteplus/request.Request" representing the
// client's request for the GetImageSyncStatus operation. The "output" return
// value will be populated with the GetImageSyncStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetImageSyncStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetImageSyncStatusCommon Send returns without error.
//
// See GetImageSyncStatus for more information on using the GetImageSyncStatus
// API call, and error handling.
//
//    // Example sending a request using the GetImageSyncStatusRequest method.
//    req, resp := client.GetImageSyncStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) GetImageSyncStatusRequest(input *GetImageSyncStatusInput) (req *request.Request, output *GetImageSyncStatusOutput) {
	op := &request.Operation{
		Name:       opGetImageSyncStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetImageSyncStatusInput{}
	}

	output = &GetImageSyncStatusOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetImageSyncStatus API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation GetImageSyncStatus for usage and error information.
func (c *VEFAAS) GetImageSyncStatus(input *GetImageSyncStatusInput) (*GetImageSyncStatusOutput, error) {
	req, out := c.GetImageSyncStatusRequest(input)
	return out, req.Send()
}

// GetImageSyncStatusWithContext is the same as GetImageSyncStatus with the addition of
// the ability to pass a context and additional request options.
//
// See GetImageSyncStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) GetImageSyncStatusWithContext(ctx byteplus.Context, input *GetImageSyncStatusInput, opts ...request.Option) (*GetImageSyncStatusOutput, error) {
	req, out := c.GetImageSyncStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetImageSyncStatusInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`

	// Source is a required field
	Source *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetImageSyncStatusInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetImageSyncStatusInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetImageSyncStatusInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetImageSyncStatusInput"}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}
	if s.Source == nil {
		invalidParams.Add(request.NewErrParamRequired("Source"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionId sets the FunctionId field's value.
func (s *GetImageSyncStatusInput) SetFunctionId(v string) *GetImageSyncStatusInput {
	s.FunctionId = &v
	return s
}

// SetSource sets the Source field's value.
func (s *GetImageSyncStatusInput) SetSource(v string) *GetImageSyncStatusInput {
	s.Source = &v
	return s
}

type GetImageSyncStatusOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Description *string `type:"string" json:",omitempty"`

	EndTime *string `type:"string" json:",omitempty"`

	ImageCacheDescription *string `type:"string" json:",omitempty"`

	ImageCacheEnabled *bool `type:"boolean" json:",omitempty"`

	ImageCacheExpireDateTime *string `type:"string" json:",omitempty"`

	ImageCacheStatus *string `type:"string" json:",omitempty"`

	ImagePreloadEnabled *bool `type:"boolean" json:",omitempty"`

	ImagePreloadStatus *string `type:"string" json:",omitempty"`

	StartTime *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetImageSyncStatusOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetImageSyncStatusOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *GetImageSyncStatusOutput) SetDescription(v string) *GetImageSyncStatusOutput {
	s.Description = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *GetImageSyncStatusOutput) SetEndTime(v string) *GetImageSyncStatusOutput {
	s.EndTime = &v
	return s
}

// SetImageCacheDescription sets the ImageCacheDescription field's value.
func (s *GetImageSyncStatusOutput) SetImageCacheDescription(v string) *GetImageSyncStatusOutput {
	s.ImageCacheDescription = &v
	return s
}

// SetImageCacheEnabled sets the ImageCacheEnabled field's value.
func (s *GetImageSyncStatusOutput) SetImageCacheEnabled(v bool) *GetImageSyncStatusOutput {
	s.ImageCacheEnabled = &v
	return s
}

// SetImageCacheExpireDateTime sets the ImageCacheExpireDateTime field's value.
func (s *GetImageSyncStatusOutput) SetImageCacheExpireDateTime(v string) *GetImageSyncStatusOutput {
	s.ImageCacheExpireDateTime = &v
	return s
}

// SetImageCacheStatus sets the ImageCacheStatus field's value.
func (s *GetImageSyncStatusOutput) SetImageCacheStatus(v string) *GetImageSyncStatusOutput {
	s.ImageCacheStatus = &v
	return s
}

// SetImagePreloadEnabled sets the ImagePreloadEnabled field's value.
func (s *GetImageSyncStatusOutput) SetImagePreloadEnabled(v bool) *GetImageSyncStatusOutput {
	s.ImagePreloadEnabled = &v
	return s
}

// SetImagePreloadStatus sets the ImagePreloadStatus field's value.
func (s *GetImageSyncStatusOutput) SetImagePreloadStatus(v string) *GetImageSyncStatusOutput {
	s.ImagePreloadStatus = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *GetImageSyncStatusOutput) SetStartTime(v string) *GetImageSyncStatusOutput {
	s.StartTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *GetImageSyncStatusOutput) SetStatus(v string) *GetImageSyncStatusOutput {
	s.Status = &v
	return s
}
