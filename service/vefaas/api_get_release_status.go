// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGetReleaseStatusCommon = "GetReleaseStatus"

// GetReleaseStatusCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GetReleaseStatusCommon operation. The "output" return
// value will be populated with the GetReleaseStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetReleaseStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetReleaseStatusCommon Send returns without error.
//
// See GetReleaseStatusCommon for more information on using the GetReleaseStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the GetReleaseStatusCommonRequest method.
//    req, resp := client.GetReleaseStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) GetReleaseStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetReleaseStatusCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetReleaseStatusCommon API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation GetReleaseStatusCommon for usage and error information.
func (c *VEFAAS) GetReleaseStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetReleaseStatusCommonRequest(input)
	return out, req.Send()
}

// GetReleaseStatusCommonWithContext is the same as GetReleaseStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetReleaseStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) GetReleaseStatusCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetReleaseStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetReleaseStatus = "GetReleaseStatus"

// GetReleaseStatusRequest generates a "byteplus/request.Request" representing the
// client's request for the GetReleaseStatus operation. The "output" return
// value will be populated with the GetReleaseStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetReleaseStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetReleaseStatusCommon Send returns without error.
//
// See GetReleaseStatus for more information on using the GetReleaseStatus
// API call, and error handling.
//
//    // Example sending a request using the GetReleaseStatusRequest method.
//    req, resp := client.GetReleaseStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) GetReleaseStatusRequest(input *GetReleaseStatusInput) (req *request.Request, output *GetReleaseStatusOutput) {
	op := &request.Operation{
		Name:       opGetReleaseStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetReleaseStatusInput{}
	}

	output = &GetReleaseStatusOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetReleaseStatus API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation GetReleaseStatus for usage and error information.
func (c *VEFAAS) GetReleaseStatus(input *GetReleaseStatusInput) (*GetReleaseStatusOutput, error) {
	req, out := c.GetReleaseStatusRequest(input)
	return out, req.Send()
}

// GetReleaseStatusWithContext is the same as GetReleaseStatus with the addition of
// the ability to pass a context and additional request options.
//
// See GetReleaseStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) GetReleaseStatusWithContext(ctx byteplus.Context, input *GetReleaseStatusInput, opts ...request.Option) (*GetReleaseStatusOutput, error) {
	req, out := c.GetReleaseStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetReleaseStatusInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetReleaseStatusInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetReleaseStatusInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetReleaseStatusInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetReleaseStatusInput"}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionId sets the FunctionId field's value.
func (s *GetReleaseStatusInput) SetFunctionId(v string) *GetReleaseStatusInput {
	s.FunctionId = &v
	return s
}

type GetReleaseStatusOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CurrentTrafficWeight *int32 `type:"int32" json:",omitempty"`

	ErrorCode *string `type:"string" json:",omitempty"`

	FailedInstanceLogs *string `type:"string" json:",omitempty"`

	FunctionId *string `type:"string" json:",omitempty"`

	NewRevisionNumber *int32 `type:"int32" json:",omitempty"`

	OldRevisionNumber *int32 `type:"int32" json:",omitempty"`

	ReleaseRecordId *string `type:"string" json:",omitempty"`

	StableRevisionNumber *int32 `type:"int32" json:",omitempty"`

	StartTime *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`

	StatusMessage *string `type:"string" json:",omitempty"`

	TargetTrafficWeight *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s GetReleaseStatusOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetReleaseStatusOutput) GoString() string {
	return s.String()
}

// SetCurrentTrafficWeight sets the CurrentTrafficWeight field's value.
func (s *GetReleaseStatusOutput) SetCurrentTrafficWeight(v int32) *GetReleaseStatusOutput {
	s.CurrentTrafficWeight = &v
	return s
}

// SetErrorCode sets the ErrorCode field's value.
func (s *GetReleaseStatusOutput) SetErrorCode(v string) *GetReleaseStatusOutput {
	s.ErrorCode = &v
	return s
}

// SetFailedInstanceLogs sets the FailedInstanceLogs field's value.
func (s *GetReleaseStatusOutput) SetFailedInstanceLogs(v string) *GetReleaseStatusOutput {
	s.FailedInstanceLogs = &v
	return s
}

// SetFunctionId sets the FunctionId field's value.
func (s *GetReleaseStatusOutput) SetFunctionId(v string) *GetReleaseStatusOutput {
	s.FunctionId = &v
	return s
}

// SetNewRevisionNumber sets the NewRevisionNumber field's value.
func (s *GetReleaseStatusOutput) SetNewRevisionNumber(v int32) *GetReleaseStatusOutput {
	s.NewRevisionNumber = &v
	return s
}

// SetOldRevisionNumber sets the OldRevisionNumber field's value.
func (s *GetReleaseStatusOutput) SetOldRevisionNumber(v int32) *GetReleaseStatusOutput {
	s.OldRevisionNumber = &v
	return s
}

// SetReleaseRecordId sets the ReleaseRecordId field's value.
func (s *GetReleaseStatusOutput) SetReleaseRecordId(v string) *GetReleaseStatusOutput {
	s.ReleaseRecordId = &v
	return s
}

// SetStableRevisionNumber sets the StableRevisionNumber field's value.
func (s *GetReleaseStatusOutput) SetStableRevisionNumber(v int32) *GetReleaseStatusOutput {
	s.StableRevisionNumber = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *GetReleaseStatusOutput) SetStartTime(v string) *GetReleaseStatusOutput {
	s.StartTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *GetReleaseStatusOutput) SetStatus(v string) *GetReleaseStatusOutput {
	s.Status = &v
	return s
}

// SetStatusMessage sets the StatusMessage field's value.
func (s *GetReleaseStatusOutput) SetStatusMessage(v string) *GetReleaseStatusOutput {
	s.StatusMessage = &v
	return s
}

// SetTargetTrafficWeight sets the TargetTrafficWeight field's value.
func (s *GetReleaseStatusOutput) SetTargetTrafficWeight(v int32) *GetReleaseStatusOutput {
	s.TargetTrafficWeight = &v
	return s
}
