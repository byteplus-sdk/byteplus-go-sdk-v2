// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opRunCodeCommon = "RunCode"

// RunCodeCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the RunCodeCommon operation. The "output" return
// value will be populated with the RunCodeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RunCodeCommon Request to send the API call to the service.
// the "output" return value is not valid until after RunCodeCommon Send returns without error.
//
// See RunCodeCommon for more information on using the RunCodeCommon
// API call, and error handling.
//
//    // Example sending a request using the RunCodeCommonRequest method.
//    req, resp := client.RunCodeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) RunCodeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRunCodeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RunCodeCommon API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation RunCodeCommon for usage and error information.
func (c *VEFAAS) RunCodeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RunCodeCommonRequest(input)
	return out, req.Send()
}

// RunCodeCommonWithContext is the same as RunCodeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RunCodeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) RunCodeCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RunCodeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRunCode = "RunCode"

// RunCodeRequest generates a "byteplus/request.Request" representing the
// client's request for the RunCode operation. The "output" return
// value will be populated with the RunCodeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RunCodeCommon Request to send the API call to the service.
// the "output" return value is not valid until after RunCodeCommon Send returns without error.
//
// See RunCode for more information on using the RunCode
// API call, and error handling.
//
//    // Example sending a request using the RunCodeRequest method.
//    req, resp := client.RunCodeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) RunCodeRequest(input *RunCodeInput) (req *request.Request, output *RunCodeOutput) {
	op := &request.Operation{
		Name:       opRunCode,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RunCodeInput{}
	}

	output = &RunCodeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RunCode API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation RunCode for usage and error information.
func (c *VEFAAS) RunCode(input *RunCodeInput) (*RunCodeOutput, error) {
	req, out := c.RunCodeRequest(input)
	return out, req.Send()
}

// RunCodeWithContext is the same as RunCode with the addition of
// the ability to pass a context and additional request options.
//
// See RunCode for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) RunCodeWithContext(ctx byteplus.Context, input *RunCodeInput, opts ...request.Option) (*RunCodeOutput, error) {
	req, out := c.RunCodeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RunCodeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Data is a required field
	Data *string `type:"string" json:",omitempty" required:"true"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`

	SandboxId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RunCodeInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s RunCodeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RunCodeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RunCodeInput"}
	if s.Data == nil {
		invalidParams.Add(request.NewErrParamRequired("Data"))
	}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetData sets the Data field's value.
func (s *RunCodeInput) SetData(v string) *RunCodeInput {
	s.Data = &v
	return s
}

// SetFunctionId sets the FunctionId field's value.
func (s *RunCodeInput) SetFunctionId(v string) *RunCodeInput {
	s.FunctionId = &v
	return s
}

// SetSandboxId sets the SandboxId field's value.
func (s *RunCodeInput) SetSandboxId(v string) *RunCodeInput {
	s.SandboxId = &v
	return s
}

type RunCodeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Result *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RunCodeOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s RunCodeOutput) GoString() string {
	return s.String()
}

// SetResult sets the Result field's value.
func (s *RunCodeOutput) SetResult(v string) *RunCodeOutput {
	s.Result = &v
	return s
}
