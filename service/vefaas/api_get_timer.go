// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vefaas

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGetTimerCommon = "GetTimer"

// GetTimerCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GetTimerCommon operation. The "output" return
// value will be populated with the GetTimerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetTimerCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetTimerCommon Send returns without error.
//
// See GetTimerCommon for more information on using the GetTimerCommon
// API call, and error handling.
//
//    // Example sending a request using the GetTimerCommonRequest method.
//    req, resp := client.GetTimerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) GetTimerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetTimerCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetTimerCommon API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation GetTimerCommon for usage and error information.
func (c *VEFAAS) GetTimerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetTimerCommonRequest(input)
	return out, req.Send()
}

// GetTimerCommonWithContext is the same as GetTimerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetTimerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) GetTimerCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetTimerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetTimer = "GetTimer"

// GetTimerRequest generates a "byteplus/request.Request" representing the
// client's request for the GetTimer operation. The "output" return
// value will be populated with the GetTimerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetTimerCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetTimerCommon Send returns without error.
//
// See GetTimer for more information on using the GetTimer
// API call, and error handling.
//
//    // Example sending a request using the GetTimerRequest method.
//    req, resp := client.GetTimerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VEFAAS) GetTimerRequest(input *GetTimerInput) (req *request.Request, output *GetTimerOutput) {
	op := &request.Operation{
		Name:       opGetTimer,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetTimerInput{}
	}

	output = &GetTimerOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetTimer API operation for VEFAAS.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VEFAAS's
// API operation GetTimer for usage and error information.
func (c *VEFAAS) GetTimer(input *GetTimerInput) (*GetTimerOutput, error) {
	req, out := c.GetTimerRequest(input)
	return out, req.Send()
}

// GetTimerWithContext is the same as GetTimer with the addition of
// the ability to pass a context and additional request options.
//
// See GetTimer for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VEFAAS) GetTimerWithContext(ctx byteplus.Context, input *GetTimerInput, opts ...request.Option) (*GetTimerOutput, error) {
	req, out := c.GetTimerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetTimerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// FunctionId is a required field
	FunctionId *string `type:"string" json:",omitempty" required:"true"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetTimerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTimerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetTimerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetTimerInput"}
	if s.FunctionId == nil {
		invalidParams.Add(request.NewErrParamRequired("FunctionId"))
	}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFunctionId sets the FunctionId field's value.
func (s *GetTimerInput) SetFunctionId(v string) *GetTimerInput {
	s.FunctionId = &v
	return s
}

// SetId sets the Id field's value.
func (s *GetTimerInput) SetId(v string) *GetTimerInput {
	s.Id = &v
	return s
}

type GetTimerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	CreationTime *string `type:"string" json:",omitempty"`

	Crontab *string `type:"string" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	EnableConcurrency *bool `type:"boolean" json:",omitempty"`

	Enabled *bool `type:"boolean" json:",omitempty"`

	FunctionId *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	LastUpdateTime *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Payload *string `type:"string" json:",omitempty"`

	Retries *int32 `type:"int32" json:",omitempty"`
}

// String returns the string representation
func (s GetTimerOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTimerOutput) GoString() string {
	return s.String()
}

// SetCreationTime sets the CreationTime field's value.
func (s *GetTimerOutput) SetCreationTime(v string) *GetTimerOutput {
	s.CreationTime = &v
	return s
}

// SetCrontab sets the Crontab field's value.
func (s *GetTimerOutput) SetCrontab(v string) *GetTimerOutput {
	s.Crontab = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *GetTimerOutput) SetDescription(v string) *GetTimerOutput {
	s.Description = &v
	return s
}

// SetEnableConcurrency sets the EnableConcurrency field's value.
func (s *GetTimerOutput) SetEnableConcurrency(v bool) *GetTimerOutput {
	s.EnableConcurrency = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *GetTimerOutput) SetEnabled(v bool) *GetTimerOutput {
	s.Enabled = &v
	return s
}

// SetFunctionId sets the FunctionId field's value.
func (s *GetTimerOutput) SetFunctionId(v string) *GetTimerOutput {
	s.FunctionId = &v
	return s
}

// SetId sets the Id field's value.
func (s *GetTimerOutput) SetId(v string) *GetTimerOutput {
	s.Id = &v
	return s
}

// SetLastUpdateTime sets the LastUpdateTime field's value.
func (s *GetTimerOutput) SetLastUpdateTime(v string) *GetTimerOutput {
	s.LastUpdateTime = &v
	return s
}

// SetName sets the Name field's value.
func (s *GetTimerOutput) SetName(v string) *GetTimerOutput {
	s.Name = &v
	return s
}

// SetPayload sets the Payload field's value.
func (s *GetTimerOutput) SetPayload(v string) *GetTimerOutput {
	s.Payload = &v
	return s
}

// SetRetries sets the Retries field's value.
func (s *GetTimerOutput) SetRetries(v int32) *GetTimerOutput {
	s.Retries = &v
	return s
}
