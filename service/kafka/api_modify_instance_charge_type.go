// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package kafka

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyInstanceChargeTypeCommon = "ModifyInstanceChargeType"

// ModifyInstanceChargeTypeCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyInstanceChargeTypeCommon operation. The "output" return
// value will be populated with the ModifyInstanceChargeTypeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstanceChargeTypeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstanceChargeTypeCommon Send returns without error.
//
// See ModifyInstanceChargeTypeCommon for more information on using the ModifyInstanceChargeTypeCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstanceChargeTypeCommonRequest method.
//    req, resp := client.ModifyInstanceChargeTypeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KAFKA) ModifyInstanceChargeTypeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceChargeTypeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyInstanceChargeTypeCommon API operation for KAFKA.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KAFKA's
// API operation ModifyInstanceChargeTypeCommon for usage and error information.
func (c *KAFKA) ModifyInstanceChargeTypeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceChargeTypeCommonRequest(input)
	return out, req.Send()
}

// ModifyInstanceChargeTypeCommonWithContext is the same as ModifyInstanceChargeTypeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceChargeTypeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KAFKA) ModifyInstanceChargeTypeCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceChargeTypeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceChargeType = "ModifyInstanceChargeType"

// ModifyInstanceChargeTypeRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyInstanceChargeType operation. The "output" return
// value will be populated with the ModifyInstanceChargeTypeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstanceChargeTypeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstanceChargeTypeCommon Send returns without error.
//
// See ModifyInstanceChargeType for more information on using the ModifyInstanceChargeType
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstanceChargeTypeRequest method.
//    req, resp := client.ModifyInstanceChargeTypeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KAFKA) ModifyInstanceChargeTypeRequest(input *ModifyInstanceChargeTypeInput) (req *request.Request, output *ModifyInstanceChargeTypeOutput) {
	op := &request.Operation{
		Name:       opModifyInstanceChargeType,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstanceChargeTypeInput{}
	}

	output = &ModifyInstanceChargeTypeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyInstanceChargeType API operation for KAFKA.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KAFKA's
// API operation ModifyInstanceChargeType for usage and error information.
func (c *KAFKA) ModifyInstanceChargeType(input *ModifyInstanceChargeTypeInput) (*ModifyInstanceChargeTypeOutput, error) {
	req, out := c.ModifyInstanceChargeTypeRequest(input)
	return out, req.Send()
}

// ModifyInstanceChargeTypeWithContext is the same as ModifyInstanceChargeType with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceChargeType for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KAFKA) ModifyInstanceChargeTypeWithContext(ctx byteplus.Context, input *ModifyInstanceChargeTypeInput, opts ...request.Option) (*ModifyInstanceChargeTypeOutput, error) {
	req, out := c.ModifyInstanceChargeTypeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ChargeInfoForModifyInstanceChargeTypeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AutoRenew *bool `type:"boolean" json:",omitempty"`

	ChargeType *string `type:"string" json:",omitempty"`

	Period *int32 `type:"int32" json:",omitempty"`

	PeriodUnit *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ChargeInfoForModifyInstanceChargeTypeInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ChargeInfoForModifyInstanceChargeTypeInput) GoString() string {
	return s.String()
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *ChargeInfoForModifyInstanceChargeTypeInput) SetAutoRenew(v bool) *ChargeInfoForModifyInstanceChargeTypeInput {
	s.AutoRenew = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *ChargeInfoForModifyInstanceChargeTypeInput) SetChargeType(v string) *ChargeInfoForModifyInstanceChargeTypeInput {
	s.ChargeType = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *ChargeInfoForModifyInstanceChargeTypeInput) SetPeriod(v int32) *ChargeInfoForModifyInstanceChargeTypeInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *ChargeInfoForModifyInstanceChargeTypeInput) SetPeriodUnit(v string) *ChargeInfoForModifyInstanceChargeTypeInput {
	s.PeriodUnit = &v
	return s
}

type ModifyInstanceChargeTypeInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ChargeInfo *ChargeInfoForModifyInstanceChargeTypeInput `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyInstanceChargeTypeInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceChargeTypeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyInstanceChargeTypeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyInstanceChargeTypeInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetChargeInfo sets the ChargeInfo field's value.
func (s *ModifyInstanceChargeTypeInput) SetChargeInfo(v *ChargeInfoForModifyInstanceChargeTypeInput) *ModifyInstanceChargeTypeInput {
	s.ChargeInfo = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyInstanceChargeTypeInput) SetInstanceId(v string) *ModifyInstanceChargeTypeInput {
	s.InstanceId = &v
	return s
}

type ModifyInstanceChargeTypeOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	OrderId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ModifyInstanceChargeTypeOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceChargeTypeOutput) GoString() string {
	return s.String()
}

// SetOrderId sets the OrderId field's value.
func (s *ModifyInstanceChargeTypeOutput) SetOrderId(v string) *ModifyInstanceChargeTypeOutput {
	s.OrderId = &v
	return s
}
