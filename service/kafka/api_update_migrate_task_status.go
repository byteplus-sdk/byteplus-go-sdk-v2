// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package kafka

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUpdateMigrateTaskStatusCommon = "UpdateMigrateTaskStatus"

// UpdateMigrateTaskStatusCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateMigrateTaskStatusCommon operation. The "output" return
// value will be populated with the UpdateMigrateTaskStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateMigrateTaskStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateMigrateTaskStatusCommon Send returns without error.
//
// See UpdateMigrateTaskStatusCommon for more information on using the UpdateMigrateTaskStatusCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateMigrateTaskStatusCommonRequest method.
//    req, resp := client.UpdateMigrateTaskStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KAFKA) UpdateMigrateTaskStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateMigrateTaskStatusCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateMigrateTaskStatusCommon API operation for KAFKA.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KAFKA's
// API operation UpdateMigrateTaskStatusCommon for usage and error information.
func (c *KAFKA) UpdateMigrateTaskStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateMigrateTaskStatusCommonRequest(input)
	return out, req.Send()
}

// UpdateMigrateTaskStatusCommonWithContext is the same as UpdateMigrateTaskStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateMigrateTaskStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KAFKA) UpdateMigrateTaskStatusCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateMigrateTaskStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateMigrateTaskStatus = "UpdateMigrateTaskStatus"

// UpdateMigrateTaskStatusRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateMigrateTaskStatus operation. The "output" return
// value will be populated with the UpdateMigrateTaskStatusCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateMigrateTaskStatusCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateMigrateTaskStatusCommon Send returns without error.
//
// See UpdateMigrateTaskStatus for more information on using the UpdateMigrateTaskStatus
// API call, and error handling.
//
//    // Example sending a request using the UpdateMigrateTaskStatusRequest method.
//    req, resp := client.UpdateMigrateTaskStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KAFKA) UpdateMigrateTaskStatusRequest(input *UpdateMigrateTaskStatusInput) (req *request.Request, output *UpdateMigrateTaskStatusOutput) {
	op := &request.Operation{
		Name:       opUpdateMigrateTaskStatus,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateMigrateTaskStatusInput{}
	}

	output = &UpdateMigrateTaskStatusOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateMigrateTaskStatus API operation for KAFKA.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KAFKA's
// API operation UpdateMigrateTaskStatus for usage and error information.
func (c *KAFKA) UpdateMigrateTaskStatus(input *UpdateMigrateTaskStatusInput) (*UpdateMigrateTaskStatusOutput, error) {
	req, out := c.UpdateMigrateTaskStatusRequest(input)
	return out, req.Send()
}

// UpdateMigrateTaskStatusWithContext is the same as UpdateMigrateTaskStatus with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateMigrateTaskStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KAFKA) UpdateMigrateTaskStatusWithContext(ctx byteplus.Context, input *UpdateMigrateTaskStatusInput, opts ...request.Option) (*UpdateMigrateTaskStatusOutput, error) {
	req, out := c.UpdateMigrateTaskStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateMigrateTaskStatusInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Status is a required field
	Status *string `type:"string" json:",omitempty" required:"true"`

	// TaskId is a required field
	TaskId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateMigrateTaskStatusInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateMigrateTaskStatusInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateMigrateTaskStatusInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateMigrateTaskStatusInput"}
	if s.Status == nil {
		invalidParams.Add(request.NewErrParamRequired("Status"))
	}
	if s.TaskId == nil {
		invalidParams.Add(request.NewErrParamRequired("TaskId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetStatus sets the Status field's value.
func (s *UpdateMigrateTaskStatusInput) SetStatus(v string) *UpdateMigrateTaskStatusInput {
	s.Status = &v
	return s
}

// SetTaskId sets the TaskId field's value.
func (s *UpdateMigrateTaskStatusInput) SetTaskId(v string) *UpdateMigrateTaskStatusInput {
	s.TaskId = &v
	return s
}

type UpdateMigrateTaskStatusOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateMigrateTaskStatusOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateMigrateTaskStatusOutput) GoString() string {
	return s.String()
}
