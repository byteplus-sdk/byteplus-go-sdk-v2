// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package kafka

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyInstanceParametersCommon = "ModifyInstanceParameters"

// ModifyInstanceParametersCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyInstanceParametersCommon operation. The "output" return
// value will be populated with the ModifyInstanceParametersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstanceParametersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstanceParametersCommon Send returns without error.
//
// See ModifyInstanceParametersCommon for more information on using the ModifyInstanceParametersCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstanceParametersCommonRequest method.
//    req, resp := client.ModifyInstanceParametersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KAFKA) ModifyInstanceParametersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceParametersCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyInstanceParametersCommon API operation for KAFKA.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KAFKA's
// API operation ModifyInstanceParametersCommon for usage and error information.
func (c *KAFKA) ModifyInstanceParametersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceParametersCommonRequest(input)
	return out, req.Send()
}

// ModifyInstanceParametersCommonWithContext is the same as ModifyInstanceParametersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceParametersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KAFKA) ModifyInstanceParametersCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceParametersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceParameters = "ModifyInstanceParameters"

// ModifyInstanceParametersRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyInstanceParameters operation. The "output" return
// value will be populated with the ModifyInstanceParametersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstanceParametersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstanceParametersCommon Send returns without error.
//
// See ModifyInstanceParameters for more information on using the ModifyInstanceParameters
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstanceParametersRequest method.
//    req, resp := client.ModifyInstanceParametersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KAFKA) ModifyInstanceParametersRequest(input *ModifyInstanceParametersInput) (req *request.Request, output *ModifyInstanceParametersOutput) {
	op := &request.Operation{
		Name:       opModifyInstanceParameters,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstanceParametersInput{}
	}

	output = &ModifyInstanceParametersOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyInstanceParameters API operation for KAFKA.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KAFKA's
// API operation ModifyInstanceParameters for usage and error information.
func (c *KAFKA) ModifyInstanceParameters(input *ModifyInstanceParametersInput) (*ModifyInstanceParametersOutput, error) {
	req, out := c.ModifyInstanceParametersRequest(input)
	return out, req.Send()
}

// ModifyInstanceParametersWithContext is the same as ModifyInstanceParameters with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceParameters for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KAFKA) ModifyInstanceParametersWithContext(ctx byteplus.Context, input *ModifyInstanceParametersInput, opts ...request.Option) (*ModifyInstanceParametersOutput, error) {
	req, out := c.ModifyInstanceParametersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyInstanceParametersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// Parameters is a required field
	Parameters *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyInstanceParametersInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceParametersInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyInstanceParametersInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyInstanceParametersInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.Parameters == nil {
		invalidParams.Add(request.NewErrParamRequired("Parameters"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyInstanceParametersInput) SetInstanceId(v string) *ModifyInstanceParametersInput {
	s.InstanceId = &v
	return s
}

// SetParameters sets the Parameters field's value.
func (s *ModifyInstanceParametersInput) SetParameters(v string) *ModifyInstanceParametersInput {
	s.Parameters = &v
	return s
}

type ModifyInstanceParametersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyInstanceParametersOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceParametersOutput) GoString() string {
	return s.String()
}
