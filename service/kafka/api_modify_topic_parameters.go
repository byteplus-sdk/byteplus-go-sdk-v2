// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package kafka

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyTopicParametersCommon = "ModifyTopicParameters"

// ModifyTopicParametersCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyTopicParametersCommon operation. The "output" return
// value will be populated with the ModifyTopicParametersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyTopicParametersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyTopicParametersCommon Send returns without error.
//
// See ModifyTopicParametersCommon for more information on using the ModifyTopicParametersCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyTopicParametersCommonRequest method.
//    req, resp := client.ModifyTopicParametersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KAFKA) ModifyTopicParametersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyTopicParametersCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyTopicParametersCommon API operation for KAFKA.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KAFKA's
// API operation ModifyTopicParametersCommon for usage and error information.
func (c *KAFKA) ModifyTopicParametersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyTopicParametersCommonRequest(input)
	return out, req.Send()
}

// ModifyTopicParametersCommonWithContext is the same as ModifyTopicParametersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyTopicParametersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KAFKA) ModifyTopicParametersCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyTopicParametersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyTopicParameters = "ModifyTopicParameters"

// ModifyTopicParametersRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyTopicParameters operation. The "output" return
// value will be populated with the ModifyTopicParametersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyTopicParametersCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyTopicParametersCommon Send returns without error.
//
// See ModifyTopicParameters for more information on using the ModifyTopicParameters
// API call, and error handling.
//
//    // Example sending a request using the ModifyTopicParametersRequest method.
//    req, resp := client.ModifyTopicParametersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KAFKA) ModifyTopicParametersRequest(input *ModifyTopicParametersInput) (req *request.Request, output *ModifyTopicParametersOutput) {
	op := &request.Operation{
		Name:       opModifyTopicParameters,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyTopicParametersInput{}
	}

	output = &ModifyTopicParametersOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyTopicParameters API operation for KAFKA.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KAFKA's
// API operation ModifyTopicParameters for usage and error information.
func (c *KAFKA) ModifyTopicParameters(input *ModifyTopicParametersInput) (*ModifyTopicParametersOutput, error) {
	req, out := c.ModifyTopicParametersRequest(input)
	return out, req.Send()
}

// ModifyTopicParametersWithContext is the same as ModifyTopicParameters with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyTopicParameters for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KAFKA) ModifyTopicParametersWithContext(ctx byteplus.Context, input *ModifyTopicParametersInput, opts ...request.Option) (*ModifyTopicParametersOutput, error) {
	req, out := c.ModifyTopicParametersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyTopicParametersInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CleanupPolicy []*string `type:"list" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// Parameters is a required field
	Parameters *string `type:"string" json:",omitempty" required:"true"`

	PartitionNumber *int32 `type:"int32" json:",omitempty"`

	ReplicaNumber *int32 `type:"int32" json:",omitempty"`

	// TopicName is a required field
	TopicName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyTopicParametersInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyTopicParametersInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyTopicParametersInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyTopicParametersInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.Parameters == nil {
		invalidParams.Add(request.NewErrParamRequired("Parameters"))
	}
	if s.TopicName == nil {
		invalidParams.Add(request.NewErrParamRequired("TopicName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCleanupPolicy sets the CleanupPolicy field's value.
func (s *ModifyTopicParametersInput) SetCleanupPolicy(v []*string) *ModifyTopicParametersInput {
	s.CleanupPolicy = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyTopicParametersInput) SetInstanceId(v string) *ModifyTopicParametersInput {
	s.InstanceId = &v
	return s
}

// SetParameters sets the Parameters field's value.
func (s *ModifyTopicParametersInput) SetParameters(v string) *ModifyTopicParametersInput {
	s.Parameters = &v
	return s
}

// SetPartitionNumber sets the PartitionNumber field's value.
func (s *ModifyTopicParametersInput) SetPartitionNumber(v int32) *ModifyTopicParametersInput {
	s.PartitionNumber = &v
	return s
}

// SetReplicaNumber sets the ReplicaNumber field's value.
func (s *ModifyTopicParametersInput) SetReplicaNumber(v int32) *ModifyTopicParametersInput {
	s.ReplicaNumber = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *ModifyTopicParametersInput) SetTopicName(v string) *ModifyTopicParametersInput {
	s.TopicName = &v
	return s
}

type ModifyTopicParametersOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyTopicParametersOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyTopicParametersOutput) GoString() string {
	return s.String()
}
