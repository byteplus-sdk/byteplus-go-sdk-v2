// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package kafka

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opModifyGroupCommon = "ModifyGroup"

// ModifyGroupCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyGroupCommon operation. The "output" return
// value will be populated with the ModifyGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyGroupCommon Send returns without error.
//
// See ModifyGroupCommon for more information on using the ModifyGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyGroupCommonRequest method.
//    req, resp := client.ModifyGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KAFKA) ModifyGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyGroupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyGroupCommon API operation for KAFKA.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KAFKA's
// API operation ModifyGroupCommon for usage and error information.
func (c *KAFKA) ModifyGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyGroupCommonRequest(input)
	return out, req.Send()
}

// ModifyGroupCommonWithContext is the same as ModifyGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KAFKA) ModifyGroupCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyGroup = "ModifyGroup"

// ModifyGroupRequest generates a "byteplus/request.Request" representing the
// client's request for the ModifyGroup operation. The "output" return
// value will be populated with the ModifyGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyGroupCommon Send returns without error.
//
// See ModifyGroup for more information on using the ModifyGroup
// API call, and error handling.
//
//    // Example sending a request using the ModifyGroupRequest method.
//    req, resp := client.ModifyGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KAFKA) ModifyGroupRequest(input *ModifyGroupInput) (req *request.Request, output *ModifyGroupOutput) {
	op := &request.Operation{
		Name:       opModifyGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyGroupInput{}
	}

	output = &ModifyGroupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyGroup API operation for KAFKA.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KAFKA's
// API operation ModifyGroup for usage and error information.
func (c *KAFKA) ModifyGroup(input *ModifyGroupInput) (*ModifyGroupOutput, error) {
	req, out := c.ModifyGroupRequest(input)
	return out, req.Send()
}

// ModifyGroupWithContext is the same as ModifyGroup with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KAFKA) ModifyGroupWithContext(ctx byteplus.Context, input *ModifyGroupInput, opts ...request.Option) (*ModifyGroupOutput, error) {
	req, out := c.ModifyGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyGroupInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Description is a required field
	Description *string `type:"string" json:",omitempty" required:"true"`

	// GroupId is a required field
	GroupId *string `type:"string" json:",omitempty" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ModifyGroupInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyGroupInput"}
	if s.Description == nil {
		invalidParams.Add(request.NewErrParamRequired("Description"))
	}
	if s.GroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("GroupId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *ModifyGroupInput) SetDescription(v string) *ModifyGroupInput {
	s.Description = &v
	return s
}

// SetGroupId sets the GroupId field's value.
func (s *ModifyGroupInput) SetGroupId(v string) *ModifyGroupInput {
	s.GroupId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyGroupInput) SetInstanceId(v string) *ModifyGroupInput {
	s.InstanceId = &v
	return s
}

type ModifyGroupOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyGroupOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyGroupOutput) GoString() string {
	return s.String()
}
