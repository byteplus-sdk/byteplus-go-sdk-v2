// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package kafka

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opQueryMessageByTimestampCommon = "QueryMessageByTimestamp"

// QueryMessageByTimestampCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the QueryMessageByTimestampCommon operation. The "output" return
// value will be populated with the QueryMessageByTimestampCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryMessageByTimestampCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryMessageByTimestampCommon Send returns without error.
//
// See QueryMessageByTimestampCommon for more information on using the QueryMessageByTimestampCommon
// API call, and error handling.
//
//    // Example sending a request using the QueryMessageByTimestampCommonRequest method.
//    req, resp := client.QueryMessageByTimestampCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KAFKA) QueryMessageByTimestampCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryMessageByTimestampCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryMessageByTimestampCommon API operation for KAFKA.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KAFKA's
// API operation QueryMessageByTimestampCommon for usage and error information.
func (c *KAFKA) QueryMessageByTimestampCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryMessageByTimestampCommonRequest(input)
	return out, req.Send()
}

// QueryMessageByTimestampCommonWithContext is the same as QueryMessageByTimestampCommon with the addition of
// the ability to pass a context and additional request options.
//
// See QueryMessageByTimestampCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KAFKA) QueryMessageByTimestampCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryMessageByTimestampCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryMessageByTimestamp = "QueryMessageByTimestamp"

// QueryMessageByTimestampRequest generates a "byteplus/request.Request" representing the
// client's request for the QueryMessageByTimestamp operation. The "output" return
// value will be populated with the QueryMessageByTimestampCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned QueryMessageByTimestampCommon Request to send the API call to the service.
// the "output" return value is not valid until after QueryMessageByTimestampCommon Send returns without error.
//
// See QueryMessageByTimestamp for more information on using the QueryMessageByTimestamp
// API call, and error handling.
//
//    // Example sending a request using the QueryMessageByTimestampRequest method.
//    req, resp := client.QueryMessageByTimestampRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *KAFKA) QueryMessageByTimestampRequest(input *QueryMessageByTimestampInput) (req *request.Request, output *QueryMessageByTimestampOutput) {
	op := &request.Operation{
		Name:       opQueryMessageByTimestamp,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &QueryMessageByTimestampInput{}
	}

	output = &QueryMessageByTimestampOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// QueryMessageByTimestamp API operation for KAFKA.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for KAFKA's
// API operation QueryMessageByTimestamp for usage and error information.
func (c *KAFKA) QueryMessageByTimestamp(input *QueryMessageByTimestampInput) (*QueryMessageByTimestampOutput, error) {
	req, out := c.QueryMessageByTimestampRequest(input)
	return out, req.Send()
}

// QueryMessageByTimestampWithContext is the same as QueryMessageByTimestamp with the addition of
// the ability to pass a context and additional request options.
//
// See QueryMessageByTimestamp for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *KAFKA) QueryMessageByTimestampWithContext(ctx byteplus.Context, input *QueryMessageByTimestampInput, opts ...request.Option) (*QueryMessageByTimestampOutput, error) {
	req, out := c.QueryMessageByTimestampRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type MessageListForQueryMessageByTimestampOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreateTime *int64 `type:"int64" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`

	MessageOffset *int64 `type:"int64" json:",omitempty"`

	MessageSize *int32 `type:"int32" json:",omitempty"`

	PartitionId *int32 `type:"int32" json:",omitempty"`

	TopicName *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s MessageListForQueryMessageByTimestampOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s MessageListForQueryMessageByTimestampOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *MessageListForQueryMessageByTimestampOutput) SetCreateTime(v int64) *MessageListForQueryMessageByTimestampOutput {
	s.CreateTime = &v
	return s
}

// SetKey sets the Key field's value.
func (s *MessageListForQueryMessageByTimestampOutput) SetKey(v string) *MessageListForQueryMessageByTimestampOutput {
	s.Key = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *MessageListForQueryMessageByTimestampOutput) SetMessage(v string) *MessageListForQueryMessageByTimestampOutput {
	s.Message = &v
	return s
}

// SetMessageOffset sets the MessageOffset field's value.
func (s *MessageListForQueryMessageByTimestampOutput) SetMessageOffset(v int64) *MessageListForQueryMessageByTimestampOutput {
	s.MessageOffset = &v
	return s
}

// SetMessageSize sets the MessageSize field's value.
func (s *MessageListForQueryMessageByTimestampOutput) SetMessageSize(v int32) *MessageListForQueryMessageByTimestampOutput {
	s.MessageSize = &v
	return s
}

// SetPartitionId sets the PartitionId field's value.
func (s *MessageListForQueryMessageByTimestampOutput) SetPartitionId(v int32) *MessageListForQueryMessageByTimestampOutput {
	s.PartitionId = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *MessageListForQueryMessageByTimestampOutput) SetTopicName(v string) *MessageListForQueryMessageByTimestampOutput {
	s.TopicName = &v
	return s
}

type QueryMessageByTimestampInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	// PageNumber is a required field
	PageNumber *int32 `type:"int32" json:",omitempty" required:"true"`

	// PageSize is a required field
	PageSize *int32 `type:"int32" json:",omitempty" required:"true"`

	// PartitionId is a required field
	PartitionId *int32 `type:"int32" json:",omitempty" required:"true"`

	// QueryEndTimestamp is a required field
	QueryEndTimestamp *int64 `type:"int64" json:",omitempty" required:"true"`

	// QueryStartTimestamp is a required field
	QueryStartTimestamp *int64 `type:"int64" json:",omitempty" required:"true"`

	Refresh *bool `type:"boolean" json:",omitempty"`

	SortOrder *string `type:"string" json:",omitempty"`

	// TopicName is a required field
	TopicName *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s QueryMessageByTimestampInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryMessageByTimestampInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *QueryMessageByTimestampInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "QueryMessageByTimestampInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.PageNumber == nil {
		invalidParams.Add(request.NewErrParamRequired("PageNumber"))
	}
	if s.PageSize == nil {
		invalidParams.Add(request.NewErrParamRequired("PageSize"))
	}
	if s.PartitionId == nil {
		invalidParams.Add(request.NewErrParamRequired("PartitionId"))
	}
	if s.QueryEndTimestamp == nil {
		invalidParams.Add(request.NewErrParamRequired("QueryEndTimestamp"))
	}
	if s.QueryStartTimestamp == nil {
		invalidParams.Add(request.NewErrParamRequired("QueryStartTimestamp"))
	}
	if s.TopicName == nil {
		invalidParams.Add(request.NewErrParamRequired("TopicName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *QueryMessageByTimestampInput) SetInstanceId(v string) *QueryMessageByTimestampInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *QueryMessageByTimestampInput) SetPageNumber(v int32) *QueryMessageByTimestampInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *QueryMessageByTimestampInput) SetPageSize(v int32) *QueryMessageByTimestampInput {
	s.PageSize = &v
	return s
}

// SetPartitionId sets the PartitionId field's value.
func (s *QueryMessageByTimestampInput) SetPartitionId(v int32) *QueryMessageByTimestampInput {
	s.PartitionId = &v
	return s
}

// SetQueryEndTimestamp sets the QueryEndTimestamp field's value.
func (s *QueryMessageByTimestampInput) SetQueryEndTimestamp(v int64) *QueryMessageByTimestampInput {
	s.QueryEndTimestamp = &v
	return s
}

// SetQueryStartTimestamp sets the QueryStartTimestamp field's value.
func (s *QueryMessageByTimestampInput) SetQueryStartTimestamp(v int64) *QueryMessageByTimestampInput {
	s.QueryStartTimestamp = &v
	return s
}

// SetRefresh sets the Refresh field's value.
func (s *QueryMessageByTimestampInput) SetRefresh(v bool) *QueryMessageByTimestampInput {
	s.Refresh = &v
	return s
}

// SetSortOrder sets the SortOrder field's value.
func (s *QueryMessageByTimestampInput) SetSortOrder(v string) *QueryMessageByTimestampInput {
	s.SortOrder = &v
	return s
}

// SetTopicName sets the TopicName field's value.
func (s *QueryMessageByTimestampInput) SetTopicName(v string) *QueryMessageByTimestampInput {
	s.TopicName = &v
	return s
}

type QueryMessageByTimestampOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	HasMoreMessage *bool `type:"boolean" json:",omitempty"`

	MessageList []*MessageListForQueryMessageByTimestampOutput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s QueryMessageByTimestampOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s QueryMessageByTimestampOutput) GoString() string {
	return s.String()
}

// SetHasMoreMessage sets the HasMoreMessage field's value.
func (s *QueryMessageByTimestampOutput) SetHasMoreMessage(v bool) *QueryMessageByTimestampOutput {
	s.HasMoreMessage = &v
	return s
}

// SetMessageList sets the MessageList field's value.
func (s *QueryMessageByTimestampOutput) SetMessageList(v []*MessageListForQueryMessageByTimestampOutput) *QueryMessageByTimestampOutput {
	s.MessageList = v
	return s
}
