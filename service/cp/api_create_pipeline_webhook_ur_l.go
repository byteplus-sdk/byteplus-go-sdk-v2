// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreatePipelineWebhookURLCommon = "CreatePipelineWebhookURL"

// CreatePipelineWebhookURLCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreatePipelineWebhookURLCommon operation. The "output" return
// value will be populated with the CreatePipelineWebhookURLCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreatePipelineWebhookURLCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreatePipelineWebhookURLCommon Send returns without error.
//
// See CreatePipelineWebhookURLCommon for more information on using the CreatePipelineWebhookURLCommon
// API call, and error handling.
//
//    // Example sending a request using the CreatePipelineWebhookURLCommonRequest method.
//    req, resp := client.CreatePipelineWebhookURLCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) CreatePipelineWebhookURLCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreatePipelineWebhookURLCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreatePipelineWebhookURLCommon API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation CreatePipelineWebhookURLCommon for usage and error information.
func (c *CP) CreatePipelineWebhookURLCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreatePipelineWebhookURLCommonRequest(input)
	return out, req.Send()
}

// CreatePipelineWebhookURLCommonWithContext is the same as CreatePipelineWebhookURLCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreatePipelineWebhookURLCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) CreatePipelineWebhookURLCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreatePipelineWebhookURLCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreatePipelineWebhookURL = "CreatePipelineWebhookURL"

// CreatePipelineWebhookURLRequest generates a "byteplus/request.Request" representing the
// client's request for the CreatePipelineWebhookURL operation. The "output" return
// value will be populated with the CreatePipelineWebhookURLCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreatePipelineWebhookURLCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreatePipelineWebhookURLCommon Send returns without error.
//
// See CreatePipelineWebhookURL for more information on using the CreatePipelineWebhookURL
// API call, and error handling.
//
//    // Example sending a request using the CreatePipelineWebhookURLRequest method.
//    req, resp := client.CreatePipelineWebhookURLRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) CreatePipelineWebhookURLRequest(input *CreatePipelineWebhookURLInput) (req *request.Request, output *CreatePipelineWebhookURLOutput) {
	op := &request.Operation{
		Name:       opCreatePipelineWebhookURL,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreatePipelineWebhookURLInput{}
	}

	output = &CreatePipelineWebhookURLOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreatePipelineWebhookURL API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation CreatePipelineWebhookURL for usage and error information.
func (c *CP) CreatePipelineWebhookURL(input *CreatePipelineWebhookURLInput) (*CreatePipelineWebhookURLOutput, error) {
	req, out := c.CreatePipelineWebhookURLRequest(input)
	return out, req.Send()
}

// CreatePipelineWebhookURLWithContext is the same as CreatePipelineWebhookURL with the addition of
// the ability to pass a context and additional request options.
//
// See CreatePipelineWebhookURL for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) CreatePipelineWebhookURLWithContext(ctx byteplus.Context, input *CreatePipelineWebhookURLInput, opts ...request.Option) (*CreatePipelineWebhookURLOutput, error) {
	req, out := c.CreatePipelineWebhookURLRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreatePipelineWebhookURLInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// PipelineId is a required field
	PipelineId *string `type:"string" json:",omitempty" required:"true"`

	ResourceId *string `type:"string" json:",omitempty"`

	Type *string `type:"string" json:",omitempty" enum:"EnumOfTypeForCreatePipelineWebhookURLInput"`

	// WorkspaceId is a required field
	WorkspaceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreatePipelineWebhookURLInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreatePipelineWebhookURLInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreatePipelineWebhookURLInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreatePipelineWebhookURLInput"}
	if s.PipelineId == nil {
		invalidParams.Add(request.NewErrParamRequired("PipelineId"))
	}
	if s.WorkspaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPipelineId sets the PipelineId field's value.
func (s *CreatePipelineWebhookURLInput) SetPipelineId(v string) *CreatePipelineWebhookURLInput {
	s.PipelineId = &v
	return s
}

// SetResourceId sets the ResourceId field's value.
func (s *CreatePipelineWebhookURLInput) SetResourceId(v string) *CreatePipelineWebhookURLInput {
	s.ResourceId = &v
	return s
}

// SetType sets the Type field's value.
func (s *CreatePipelineWebhookURLInput) SetType(v string) *CreatePipelineWebhookURLInput {
	s.Type = &v
	return s
}

// SetWorkspaceId sets the WorkspaceId field's value.
func (s *CreatePipelineWebhookURLInput) SetWorkspaceId(v string) *CreatePipelineWebhookURLInput {
	s.WorkspaceId = &v
	return s
}

type CreatePipelineWebhookURLOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	WebhookURL *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreatePipelineWebhookURLOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreatePipelineWebhookURLOutput) GoString() string {
	return s.String()
}

// SetWebhookURL sets the WebhookURL field's value.
func (s *CreatePipelineWebhookURLOutput) SetWebhookURL(v string) *CreatePipelineWebhookURLOutput {
	s.WebhookURL = &v
	return s
}

const (
	// EnumOfTypeForCreatePipelineWebhookURLInputWebhook is a EnumOfTypeForCreatePipelineWebhookURLInput enum value
	EnumOfTypeForCreatePipelineWebhookURLInputWebhook = "Webhook"

	// EnumOfTypeForCreatePipelineWebhookURLInputGitWebhook is a EnumOfTypeForCreatePipelineWebhookURLInput enum value
	EnumOfTypeForCreatePipelineWebhookURLInputGitWebhook = "GitWebhook"

	// EnumOfTypeForCreatePipelineWebhookURLInputPerforceWebhook is a EnumOfTypeForCreatePipelineWebhookURLInput enum value
	EnumOfTypeForCreatePipelineWebhookURLInputPerforceWebhook = "PerforceWebhook"

	// EnumOfTypeForCreatePipelineWebhookURLInputCrwebhook is a EnumOfTypeForCreatePipelineWebhookURLInput enum value
	EnumOfTypeForCreatePipelineWebhookURLInputCrwebhook = "CRWebhook"

	// EnumOfTypeForCreatePipelineWebhookURLInputSchedule is a EnumOfTypeForCreatePipelineWebhookURLInput enum value
	EnumOfTypeForCreatePipelineWebhookURLInputSchedule = "Schedule"

	// EnumOfTypeForCreatePipelineWebhookURLInputManual is a EnumOfTypeForCreatePipelineWebhookURLInput enum value
	EnumOfTypeForCreatePipelineWebhookURLInputManual = "Manual"
)
