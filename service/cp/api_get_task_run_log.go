// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGetTaskRunLogCommon = "GetTaskRunLog"

// GetTaskRunLogCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GetTaskRunLogCommon operation. The "output" return
// value will be populated with the GetTaskRunLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetTaskRunLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetTaskRunLogCommon Send returns without error.
//
// See GetTaskRunLogCommon for more information on using the GetTaskRunLogCommon
// API call, and error handling.
//
//    // Example sending a request using the GetTaskRunLogCommonRequest method.
//    req, resp := client.GetTaskRunLogCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) GetTaskRunLogCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetTaskRunLogCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetTaskRunLogCommon API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation GetTaskRunLogCommon for usage and error information.
func (c *CP) GetTaskRunLogCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetTaskRunLogCommonRequest(input)
	return out, req.Send()
}

// GetTaskRunLogCommonWithContext is the same as GetTaskRunLogCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetTaskRunLogCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) GetTaskRunLogCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetTaskRunLogCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetTaskRunLog = "GetTaskRunLog"

// GetTaskRunLogRequest generates a "byteplus/request.Request" representing the
// client's request for the GetTaskRunLog operation. The "output" return
// value will be populated with the GetTaskRunLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetTaskRunLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after GetTaskRunLogCommon Send returns without error.
//
// See GetTaskRunLog for more information on using the GetTaskRunLog
// API call, and error handling.
//
//    // Example sending a request using the GetTaskRunLogRequest method.
//    req, resp := client.GetTaskRunLogRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) GetTaskRunLogRequest(input *GetTaskRunLogInput) (req *request.Request, output *GetTaskRunLogOutput) {
	op := &request.Operation{
		Name:       opGetTaskRunLog,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetTaskRunLogInput{}
	}

	output = &GetTaskRunLogOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetTaskRunLog API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation GetTaskRunLog for usage and error information.
func (c *CP) GetTaskRunLog(input *GetTaskRunLogInput) (*GetTaskRunLogOutput, error) {
	req, out := c.GetTaskRunLogRequest(input)
	return out, req.Send()
}

// GetTaskRunLogWithContext is the same as GetTaskRunLog with the addition of
// the ability to pass a context and additional request options.
//
// See GetTaskRunLog for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) GetTaskRunLogWithContext(ctx byteplus.Context, input *GetTaskRunLogInput, opts ...request.Option) (*GetTaskRunLogOutput, error) {
	req, out := c.GetTaskRunLogRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetTaskRunLogInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Limit *int64 `type:"int64" json:",omitempty"`

	Offset *int64 `type:"int64" json:",omitempty"`

	// PipelineId is a required field
	PipelineId *string `type:"string" json:",omitempty" required:"true"`

	// PipelineRunId is a required field
	PipelineRunId *string `type:"string" json:",omitempty" required:"true"`

	// StepName is a required field
	StepName *string `type:"string" json:",omitempty" required:"true"`

	// TaskId is a required field
	TaskId *string `type:"string" json:",omitempty" required:"true"`

	// TaskRunId is a required field
	TaskRunId *string `type:"string" json:",omitempty" required:"true"`

	// WorkspaceId is a required field
	WorkspaceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetTaskRunLogInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTaskRunLogInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetTaskRunLogInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetTaskRunLogInput"}
	if s.PipelineId == nil {
		invalidParams.Add(request.NewErrParamRequired("PipelineId"))
	}
	if s.PipelineRunId == nil {
		invalidParams.Add(request.NewErrParamRequired("PipelineRunId"))
	}
	if s.StepName == nil {
		invalidParams.Add(request.NewErrParamRequired("StepName"))
	}
	if s.TaskId == nil {
		invalidParams.Add(request.NewErrParamRequired("TaskId"))
	}
	if s.TaskRunId == nil {
		invalidParams.Add(request.NewErrParamRequired("TaskRunId"))
	}
	if s.WorkspaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLimit sets the Limit field's value.
func (s *GetTaskRunLogInput) SetLimit(v int64) *GetTaskRunLogInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *GetTaskRunLogInput) SetOffset(v int64) *GetTaskRunLogInput {
	s.Offset = &v
	return s
}

// SetPipelineId sets the PipelineId field's value.
func (s *GetTaskRunLogInput) SetPipelineId(v string) *GetTaskRunLogInput {
	s.PipelineId = &v
	return s
}

// SetPipelineRunId sets the PipelineRunId field's value.
func (s *GetTaskRunLogInput) SetPipelineRunId(v string) *GetTaskRunLogInput {
	s.PipelineRunId = &v
	return s
}

// SetStepName sets the StepName field's value.
func (s *GetTaskRunLogInput) SetStepName(v string) *GetTaskRunLogInput {
	s.StepName = &v
	return s
}

// SetTaskId sets the TaskId field's value.
func (s *GetTaskRunLogInput) SetTaskId(v string) *GetTaskRunLogInput {
	s.TaskId = &v
	return s
}

// SetTaskRunId sets the TaskRunId field's value.
func (s *GetTaskRunLogInput) SetTaskRunId(v string) *GetTaskRunLogInput {
	s.TaskRunId = &v
	return s
}

// SetWorkspaceId sets the WorkspaceId field's value.
func (s *GetTaskRunLogInput) SetWorkspaceId(v string) *GetTaskRunLogInput {
	s.WorkspaceId = &v
	return s
}

type GetTaskRunLogOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	LogLines []*string `type:"list" json:",omitempty"`

	More *bool `type:"boolean" json:",omitempty"`

	NextLimit *int64 `type:"int64" json:",omitempty"`

	NextOffset *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s GetTaskRunLogOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTaskRunLogOutput) GoString() string {
	return s.String()
}

// SetLogLines sets the LogLines field's value.
func (s *GetTaskRunLogOutput) SetLogLines(v []*string) *GetTaskRunLogOutput {
	s.LogLines = v
	return s
}

// SetMore sets the More field's value.
func (s *GetTaskRunLogOutput) SetMore(v bool) *GetTaskRunLogOutput {
	s.More = &v
	return s
}

// SetNextLimit sets the NextLimit field's value.
func (s *GetTaskRunLogOutput) SetNextLimit(v int64) *GetTaskRunLogOutput {
	s.NextLimit = &v
	return s
}

// SetNextOffset sets the NextOffset field's value.
func (s *GetTaskRunLogOutput) SetNextOffset(v int64) *GetTaskRunLogOutput {
	s.NextOffset = &v
	return s
}
