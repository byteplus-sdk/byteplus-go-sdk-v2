// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUpdateComponentStepCommon = "UpdateComponentStep"

// UpdateComponentStepCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateComponentStepCommon operation. The "output" return
// value will be populated with the UpdateComponentStepCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateComponentStepCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateComponentStepCommon Send returns without error.
//
// See UpdateComponentStepCommon for more information on using the UpdateComponentStepCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateComponentStepCommonRequest method.
//    req, resp := client.UpdateComponentStepCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) UpdateComponentStepCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateComponentStepCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateComponentStepCommon API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation UpdateComponentStepCommon for usage and error information.
func (c *CP) UpdateComponentStepCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateComponentStepCommonRequest(input)
	return out, req.Send()
}

// UpdateComponentStepCommonWithContext is the same as UpdateComponentStepCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateComponentStepCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) UpdateComponentStepCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateComponentStepCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateComponentStep = "UpdateComponentStep"

// UpdateComponentStepRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateComponentStep operation. The "output" return
// value will be populated with the UpdateComponentStepCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateComponentStepCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateComponentStepCommon Send returns without error.
//
// See UpdateComponentStep for more information on using the UpdateComponentStep
// API call, and error handling.
//
//    // Example sending a request using the UpdateComponentStepRequest method.
//    req, resp := client.UpdateComponentStepRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) UpdateComponentStepRequest(input *UpdateComponentStepInput) (req *request.Request, output *UpdateComponentStepOutput) {
	op := &request.Operation{
		Name:       opUpdateComponentStep,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateComponentStepInput{}
	}

	output = &UpdateComponentStepOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateComponentStep API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation UpdateComponentStep for usage and error information.
func (c *CP) UpdateComponentStep(input *UpdateComponentStepInput) (*UpdateComponentStepOutput, error) {
	req, out := c.UpdateComponentStepRequest(input)
	return out, req.Send()
}

// UpdateComponentStepWithContext is the same as UpdateComponentStep with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateComponentStep for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) UpdateComponentStepWithContext(ctx byteplus.Context, input *UpdateComponentStepInput, opts ...request.Option) (*UpdateComponentStepOutput, error) {
	req, out := c.UpdateComponentStepRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateComponentStepInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ComponentStepYaml *string `type:"string" json:",omitempty"`

	// Identifier is a required field
	Identifier *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateComponentStepInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateComponentStepInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateComponentStepInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateComponentStepInput"}
	if s.Identifier == nil {
		invalidParams.Add(request.NewErrParamRequired("Identifier"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetComponentStepYaml sets the ComponentStepYaml field's value.
func (s *UpdateComponentStepInput) SetComponentStepYaml(v string) *UpdateComponentStepInput {
	s.ComponentStepYaml = &v
	return s
}

// SetIdentifier sets the Identifier field's value.
func (s *UpdateComponentStepInput) SetIdentifier(v string) *UpdateComponentStepInput {
	s.Identifier = &v
	return s
}

type UpdateComponentStepOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateComponentStepOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateComponentStepOutput) GoString() string {
	return s.String()
}
