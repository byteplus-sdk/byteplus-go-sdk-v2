// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opListTaskRunsCommon = "ListTaskRuns"

// ListTaskRunsCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ListTaskRunsCommon operation. The "output" return
// value will be populated with the ListTaskRunsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListTaskRunsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListTaskRunsCommon Send returns without error.
//
// See ListTaskRunsCommon for more information on using the ListTaskRunsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListTaskRunsCommonRequest method.
//    req, resp := client.ListTaskRunsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) ListTaskRunsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListTaskRunsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListTaskRunsCommon API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation ListTaskRunsCommon for usage and error information.
func (c *CP) ListTaskRunsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListTaskRunsCommonRequest(input)
	return out, req.Send()
}

// ListTaskRunsCommonWithContext is the same as ListTaskRunsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListTaskRunsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) ListTaskRunsCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListTaskRunsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListTaskRuns = "ListTaskRuns"

// ListTaskRunsRequest generates a "byteplus/request.Request" representing the
// client's request for the ListTaskRuns operation. The "output" return
// value will be populated with the ListTaskRunsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListTaskRunsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListTaskRunsCommon Send returns without error.
//
// See ListTaskRuns for more information on using the ListTaskRuns
// API call, and error handling.
//
//    // Example sending a request using the ListTaskRunsRequest method.
//    req, resp := client.ListTaskRunsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) ListTaskRunsRequest(input *ListTaskRunsInput) (req *request.Request, output *ListTaskRunsOutput) {
	op := &request.Operation{
		Name:       opListTaskRuns,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListTaskRunsInput{}
	}

	output = &ListTaskRunsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListTaskRuns API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation ListTaskRuns for usage and error information.
func (c *CP) ListTaskRuns(input *ListTaskRunsInput) (*ListTaskRunsOutput, error) {
	req, out := c.ListTaskRunsRequest(input)
	return out, req.Send()
}

// ListTaskRunsWithContext is the same as ListTaskRuns with the addition of
// the ability to pass a context and additional request options.
//
// See ListTaskRuns for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) ListTaskRunsWithContext(ctx byteplus.Context, input *ListTaskRunsInput, opts ...request.Option) (*ListTaskRunsOutput, error) {
	req, out := c.ListTaskRunsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type FilterForListTaskRunsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Ids []*string `type:"list" json:",omitempty"`

	Statuses []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s FilterForListTaskRunsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForListTaskRunsInput) GoString() string {
	return s.String()
}

// SetIds sets the Ids field's value.
func (s *FilterForListTaskRunsInput) SetIds(v []*string) *FilterForListTaskRunsInput {
	s.Ids = v
	return s
}

// SetStatuses sets the Statuses field's value.
func (s *FilterForListTaskRunsInput) SetStatuses(v []*string) *FilterForListTaskRunsInput {
	s.Statuses = v
	return s
}

type ItemForListTaskRunsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CreateTime *string `type:"string" json:",omitempty"`

	CustomContent *string `type:"string" json:",omitempty"`

	CustomPhase *string `type:"string" json:",omitempty"`

	FinishTime *string `type:"string" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	Outputs []*OutputForListTaskRunsOutput `type:"list" json:",omitempty"`

	StartTime *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`

	Steps []*StepForListTaskRunsOutput `type:"list" json:",omitempty"`

	TaskId *string `type:"string" json:",omitempty"`

	UpdateTime *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ItemForListTaskRunsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ItemForListTaskRunsOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *ItemForListTaskRunsOutput) SetCreateTime(v string) *ItemForListTaskRunsOutput {
	s.CreateTime = &v
	return s
}

// SetCustomContent sets the CustomContent field's value.
func (s *ItemForListTaskRunsOutput) SetCustomContent(v string) *ItemForListTaskRunsOutput {
	s.CustomContent = &v
	return s
}

// SetCustomPhase sets the CustomPhase field's value.
func (s *ItemForListTaskRunsOutput) SetCustomPhase(v string) *ItemForListTaskRunsOutput {
	s.CustomPhase = &v
	return s
}

// SetFinishTime sets the FinishTime field's value.
func (s *ItemForListTaskRunsOutput) SetFinishTime(v string) *ItemForListTaskRunsOutput {
	s.FinishTime = &v
	return s
}

// SetId sets the Id field's value.
func (s *ItemForListTaskRunsOutput) SetId(v string) *ItemForListTaskRunsOutput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *ItemForListTaskRunsOutput) SetName(v string) *ItemForListTaskRunsOutput {
	s.Name = &v
	return s
}

// SetOutputs sets the Outputs field's value.
func (s *ItemForListTaskRunsOutput) SetOutputs(v []*OutputForListTaskRunsOutput) *ItemForListTaskRunsOutput {
	s.Outputs = v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *ItemForListTaskRunsOutput) SetStartTime(v string) *ItemForListTaskRunsOutput {
	s.StartTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ItemForListTaskRunsOutput) SetStatus(v string) *ItemForListTaskRunsOutput {
	s.Status = &v
	return s
}

// SetSteps sets the Steps field's value.
func (s *ItemForListTaskRunsOutput) SetSteps(v []*StepForListTaskRunsOutput) *ItemForListTaskRunsOutput {
	s.Steps = v
	return s
}

// SetTaskId sets the TaskId field's value.
func (s *ItemForListTaskRunsOutput) SetTaskId(v string) *ItemForListTaskRunsOutput {
	s.TaskId = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *ItemForListTaskRunsOutput) SetUpdateTime(v string) *ItemForListTaskRunsOutput {
	s.UpdateTime = &v
	return s
}

type ListTaskRunsInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Filter *FilterForListTaskRunsInput `type:"structure" json:",omitempty"`

	PageNumber *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`

	// PipelineId is a required field
	PipelineId *string `type:"string" json:",omitempty" required:"true"`

	// PipelineRunId is a required field
	PipelineRunId *string `type:"string" json:",omitempty" required:"true"`

	// TaskId is a required field
	TaskId *string `type:"string" json:",omitempty" required:"true"`

	// WorkspaceId is a required field
	WorkspaceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s ListTaskRunsInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTaskRunsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListTaskRunsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListTaskRunsInput"}
	if s.PipelineId == nil {
		invalidParams.Add(request.NewErrParamRequired("PipelineId"))
	}
	if s.PipelineRunId == nil {
		invalidParams.Add(request.NewErrParamRequired("PipelineRunId"))
	}
	if s.TaskId == nil {
		invalidParams.Add(request.NewErrParamRequired("TaskId"))
	}
	if s.WorkspaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetFilter sets the Filter field's value.
func (s *ListTaskRunsInput) SetFilter(v *FilterForListTaskRunsInput) *ListTaskRunsInput {
	s.Filter = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListTaskRunsInput) SetPageNumber(v int64) *ListTaskRunsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListTaskRunsInput) SetPageSize(v int64) *ListTaskRunsInput {
	s.PageSize = &v
	return s
}

// SetPipelineId sets the PipelineId field's value.
func (s *ListTaskRunsInput) SetPipelineId(v string) *ListTaskRunsInput {
	s.PipelineId = &v
	return s
}

// SetPipelineRunId sets the PipelineRunId field's value.
func (s *ListTaskRunsInput) SetPipelineRunId(v string) *ListTaskRunsInput {
	s.PipelineRunId = &v
	return s
}

// SetTaskId sets the TaskId field's value.
func (s *ListTaskRunsInput) SetTaskId(v string) *ListTaskRunsInput {
	s.TaskId = &v
	return s
}

// SetWorkspaceId sets the WorkspaceId field's value.
func (s *ListTaskRunsInput) SetWorkspaceId(v string) *ListTaskRunsInput {
	s.WorkspaceId = &v
	return s
}

type ListTaskRunsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Items []*ItemForListTaskRunsOutput `type:"list" json:",omitempty"`

	PageNumber *int64 `type:"int64" json:",omitempty"`

	PageSize *int64 `type:"int64" json:",omitempty"`

	TotalCount *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s ListTaskRunsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ListTaskRunsOutput) GoString() string {
	return s.String()
}

// SetItems sets the Items field's value.
func (s *ListTaskRunsOutput) SetItems(v []*ItemForListTaskRunsOutput) *ListTaskRunsOutput {
	s.Items = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *ListTaskRunsOutput) SetPageNumber(v int64) *ListTaskRunsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *ListTaskRunsOutput) SetPageSize(v int64) *ListTaskRunsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *ListTaskRunsOutput) SetTotalCount(v int64) *ListTaskRunsOutput {
	s.TotalCount = &v
	return s
}

type OutputForListTaskRunsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s OutputForListTaskRunsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s OutputForListTaskRunsOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *OutputForListTaskRunsOutput) SetKey(v string) *OutputForListTaskRunsOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *OutputForListTaskRunsOutput) SetValue(v string) *OutputForListTaskRunsOutput {
	s.Value = &v
	return s
}

type StepForListTaskRunsOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	FinishTime *string `type:"string" json:",omitempty"`

	LogStatus *string `type:"string" json:",omitempty"`

	LogUri *string `type:"string" json:",omitempty"`

	Name *string `type:"string" json:",omitempty"`

	StartTime *string `type:"string" json:",omitempty"`

	Status *string `type:"string" json:",omitempty"`

	Version *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s StepForListTaskRunsOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s StepForListTaskRunsOutput) GoString() string {
	return s.String()
}

// SetFinishTime sets the FinishTime field's value.
func (s *StepForListTaskRunsOutput) SetFinishTime(v string) *StepForListTaskRunsOutput {
	s.FinishTime = &v
	return s
}

// SetLogStatus sets the LogStatus field's value.
func (s *StepForListTaskRunsOutput) SetLogStatus(v string) *StepForListTaskRunsOutput {
	s.LogStatus = &v
	return s
}

// SetLogUri sets the LogUri field's value.
func (s *StepForListTaskRunsOutput) SetLogUri(v string) *StepForListTaskRunsOutput {
	s.LogUri = &v
	return s
}

// SetName sets the Name field's value.
func (s *StepForListTaskRunsOutput) SetName(v string) *StepForListTaskRunsOutput {
	s.Name = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *StepForListTaskRunsOutput) SetStartTime(v string) *StepForListTaskRunsOutput {
	s.StartTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *StepForListTaskRunsOutput) SetStatus(v string) *StepForListTaskRunsOutput {
	s.Status = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *StepForListTaskRunsOutput) SetVersion(v string) *StepForListTaskRunsOutput {
	s.Version = &v
	return s
}
