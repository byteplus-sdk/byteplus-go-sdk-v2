// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUpdateWorkspaceCommon = "UpdateWorkspace"

// UpdateWorkspaceCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateWorkspaceCommon operation. The "output" return
// value will be populated with the UpdateWorkspaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateWorkspaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateWorkspaceCommon Send returns without error.
//
// See UpdateWorkspaceCommon for more information on using the UpdateWorkspaceCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateWorkspaceCommonRequest method.
//    req, resp := client.UpdateWorkspaceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) UpdateWorkspaceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateWorkspaceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateWorkspaceCommon API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation UpdateWorkspaceCommon for usage and error information.
func (c *CP) UpdateWorkspaceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateWorkspaceCommonRequest(input)
	return out, req.Send()
}

// UpdateWorkspaceCommonWithContext is the same as UpdateWorkspaceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateWorkspaceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) UpdateWorkspaceCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateWorkspaceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateWorkspace = "UpdateWorkspace"

// UpdateWorkspaceRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateWorkspace operation. The "output" return
// value will be populated with the UpdateWorkspaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateWorkspaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateWorkspaceCommon Send returns without error.
//
// See UpdateWorkspace for more information on using the UpdateWorkspace
// API call, and error handling.
//
//    // Example sending a request using the UpdateWorkspaceRequest method.
//    req, resp := client.UpdateWorkspaceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) UpdateWorkspaceRequest(input *UpdateWorkspaceInput) (req *request.Request, output *UpdateWorkspaceOutput) {
	op := &request.Operation{
		Name:       opUpdateWorkspace,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateWorkspaceInput{}
	}

	output = &UpdateWorkspaceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateWorkspace API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation UpdateWorkspace for usage and error information.
func (c *CP) UpdateWorkspace(input *UpdateWorkspaceInput) (*UpdateWorkspaceOutput, error) {
	req, out := c.UpdateWorkspaceRequest(input)
	return out, req.Send()
}

// UpdateWorkspaceWithContext is the same as UpdateWorkspace with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateWorkspace for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) UpdateWorkspaceWithContext(ctx byteplus.Context, input *UpdateWorkspaceInput, opts ...request.Option) (*UpdateWorkspaceOutput, error) {
	req, out := c.UpdateWorkspaceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateWorkspaceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	Name *string `type:"string" json:",omitempty"`

	Visibility *string `type:"string" json:",omitempty"`

	VisibleUsers []*VisibleUserForUpdateWorkspaceInput `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s UpdateWorkspaceInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateWorkspaceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateWorkspaceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateWorkspaceInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *UpdateWorkspaceInput) SetDescription(v string) *UpdateWorkspaceInput {
	s.Description = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateWorkspaceInput) SetId(v string) *UpdateWorkspaceInput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateWorkspaceInput) SetName(v string) *UpdateWorkspaceInput {
	s.Name = &v
	return s
}

// SetVisibility sets the Visibility field's value.
func (s *UpdateWorkspaceInput) SetVisibility(v string) *UpdateWorkspaceInput {
	s.Visibility = &v
	return s
}

// SetVisibleUsers sets the VisibleUsers field's value.
func (s *UpdateWorkspaceInput) SetVisibleUsers(v []*VisibleUserForUpdateWorkspaceInput) *UpdateWorkspaceInput {
	s.VisibleUsers = v
	return s
}

type UpdateWorkspaceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateWorkspaceOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateWorkspaceOutput) GoString() string {
	return s.String()
}

type VisibleUserForUpdateWorkspaceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccountId *int64 `type:"int64" json:",omitempty"`

	UserId *int64 `type:"int64" json:",omitempty"`
}

// String returns the string representation
func (s VisibleUserForUpdateWorkspaceInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s VisibleUserForUpdateWorkspaceInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *VisibleUserForUpdateWorkspaceInput) SetAccountId(v int64) *VisibleUserForUpdateWorkspaceInput {
	s.AccountId = &v
	return s
}

// SetUserId sets the UserId field's value.
func (s *VisibleUserForUpdateWorkspaceInput) SetUserId(v int64) *VisibleUserForUpdateWorkspaceInput {
	s.UserId = &v
	return s
}
