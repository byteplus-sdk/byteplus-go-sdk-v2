// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCancelPipelineRunCommon = "CancelPipelineRun"

// CancelPipelineRunCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CancelPipelineRunCommon operation. The "output" return
// value will be populated with the CancelPipelineRunCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelPipelineRunCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelPipelineRunCommon Send returns without error.
//
// See CancelPipelineRunCommon for more information on using the CancelPipelineRunCommon
// API call, and error handling.
//
//    // Example sending a request using the CancelPipelineRunCommonRequest method.
//    req, resp := client.CancelPipelineRunCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) CancelPipelineRunCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCancelPipelineRunCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CancelPipelineRunCommon API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation CancelPipelineRunCommon for usage and error information.
func (c *CP) CancelPipelineRunCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CancelPipelineRunCommonRequest(input)
	return out, req.Send()
}

// CancelPipelineRunCommonWithContext is the same as CancelPipelineRunCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CancelPipelineRunCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) CancelPipelineRunCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CancelPipelineRunCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCancelPipelineRun = "CancelPipelineRun"

// CancelPipelineRunRequest generates a "byteplus/request.Request" representing the
// client's request for the CancelPipelineRun operation. The "output" return
// value will be populated with the CancelPipelineRunCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CancelPipelineRunCommon Request to send the API call to the service.
// the "output" return value is not valid until after CancelPipelineRunCommon Send returns without error.
//
// See CancelPipelineRun for more information on using the CancelPipelineRun
// API call, and error handling.
//
//    // Example sending a request using the CancelPipelineRunRequest method.
//    req, resp := client.CancelPipelineRunRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) CancelPipelineRunRequest(input *CancelPipelineRunInput) (req *request.Request, output *CancelPipelineRunOutput) {
	op := &request.Operation{
		Name:       opCancelPipelineRun,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CancelPipelineRunInput{}
	}

	output = &CancelPipelineRunOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CancelPipelineRun API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation CancelPipelineRun for usage and error information.
func (c *CP) CancelPipelineRun(input *CancelPipelineRunInput) (*CancelPipelineRunOutput, error) {
	req, out := c.CancelPipelineRunRequest(input)
	return out, req.Send()
}

// CancelPipelineRunWithContext is the same as CancelPipelineRun with the addition of
// the ability to pass a context and additional request options.
//
// See CancelPipelineRun for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) CancelPipelineRunWithContext(ctx byteplus.Context, input *CancelPipelineRunInput, opts ...request.Option) (*CancelPipelineRunOutput, error) {
	req, out := c.CancelPipelineRunRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CancelPipelineRunInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	// PipelineId is a required field
	PipelineId *string `type:"string" json:",omitempty" required:"true"`

	// WorkspaceId is a required field
	WorkspaceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CancelPipelineRunInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelPipelineRunInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CancelPipelineRunInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CancelPipelineRunInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.PipelineId == nil {
		invalidParams.Add(request.NewErrParamRequired("PipelineId"))
	}
	if s.WorkspaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetId sets the Id field's value.
func (s *CancelPipelineRunInput) SetId(v string) *CancelPipelineRunInput {
	s.Id = &v
	return s
}

// SetPipelineId sets the PipelineId field's value.
func (s *CancelPipelineRunInput) SetPipelineId(v string) *CancelPipelineRunInput {
	s.PipelineId = &v
	return s
}

// SetWorkspaceId sets the WorkspaceId field's value.
func (s *CancelPipelineRunInput) SetWorkspaceId(v string) *CancelPipelineRunInput {
	s.WorkspaceId = &v
	return s
}

type CancelPipelineRunOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CancelPipelineRunOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CancelPipelineRunOutput) GoString() string {
	return s.String()
}
