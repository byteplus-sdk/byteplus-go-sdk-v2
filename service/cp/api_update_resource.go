// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUpdateResourceCommon = "UpdateResource"

// UpdateResourceCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateResourceCommon operation. The "output" return
// value will be populated with the UpdateResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateResourceCommon Send returns without error.
//
// See UpdateResourceCommon for more information on using the UpdateResourceCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateResourceCommonRequest method.
//    req, resp := client.UpdateResourceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) UpdateResourceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateResourceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateResourceCommon API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation UpdateResourceCommon for usage and error information.
func (c *CP) UpdateResourceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateResourceCommonRequest(input)
	return out, req.Send()
}

// UpdateResourceCommonWithContext is the same as UpdateResourceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateResourceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) UpdateResourceCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateResourceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateResource = "UpdateResource"

// UpdateResourceRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateResource operation. The "output" return
// value will be populated with the UpdateResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateResourceCommon Send returns without error.
//
// See UpdateResource for more information on using the UpdateResource
// API call, and error handling.
//
//    // Example sending a request using the UpdateResourceRequest method.
//    req, resp := client.UpdateResourceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) UpdateResourceRequest(input *UpdateResourceInput) (req *request.Request, output *UpdateResourceOutput) {
	op := &request.Operation{
		Name:       opUpdateResource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateResourceInput{}
	}

	output = &UpdateResourceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateResource API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation UpdateResource for usage and error information.
func (c *CP) UpdateResource(input *UpdateResourceInput) (*UpdateResourceOutput, error) {
	req, out := c.UpdateResourceRequest(input)
	return out, req.Send()
}

// UpdateResourceWithContext is the same as UpdateResource with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateResource for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) UpdateResourceWithContext(ctx byteplus.Context, input *UpdateResourceInput, opts ...request.Option) (*UpdateResourceOutput, error) {
	req, out := c.UpdateResourceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConfigurationForUpdateResourceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Git *GitForUpdateResourceInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ConfigurationForUpdateResourceInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigurationForUpdateResourceInput) GoString() string {
	return s.String()
}

// SetGit sets the Git field's value.
func (s *ConfigurationForUpdateResourceInput) SetGit(v *GitForUpdateResourceInput) *ConfigurationForUpdateResourceInput {
	s.Git = v
	return s
}

type GitForUpdateResourceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccessKey *string `type:"string" json:",omitempty"`

	CloneDepth *int64 `type:"int64" json:",omitempty"`

	Password *string `type:"string" json:",omitempty"`

	SecretKey *string `type:"string" json:",omitempty"`

	Url *string `type:"string" json:",omitempty"`

	UserName *string `type:"string" json:",omitempty"`

	UserToken *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GitForUpdateResourceInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GitForUpdateResourceInput) GoString() string {
	return s.String()
}

// SetAccessKey sets the AccessKey field's value.
func (s *GitForUpdateResourceInput) SetAccessKey(v string) *GitForUpdateResourceInput {
	s.AccessKey = &v
	return s
}

// SetCloneDepth sets the CloneDepth field's value.
func (s *GitForUpdateResourceInput) SetCloneDepth(v int64) *GitForUpdateResourceInput {
	s.CloneDepth = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *GitForUpdateResourceInput) SetPassword(v string) *GitForUpdateResourceInput {
	s.Password = &v
	return s
}

// SetSecretKey sets the SecretKey field's value.
func (s *GitForUpdateResourceInput) SetSecretKey(v string) *GitForUpdateResourceInput {
	s.SecretKey = &v
	return s
}

// SetUrl sets the Url field's value.
func (s *GitForUpdateResourceInput) SetUrl(v string) *GitForUpdateResourceInput {
	s.Url = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *GitForUpdateResourceInput) SetUserName(v string) *GitForUpdateResourceInput {
	s.UserName = &v
	return s
}

// SetUserToken sets the UserToken field's value.
func (s *GitForUpdateResourceInput) SetUserToken(v string) *GitForUpdateResourceInput {
	s.UserToken = &v
	return s
}

type UpdateResourceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Configuration *ConfigurationForUpdateResourceInput `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	Name *string `type:"string" json:",omitempty"`

	// WorkspaceId is a required field
	WorkspaceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateResourceInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateResourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateResourceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateResourceInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.WorkspaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConfiguration sets the Configuration field's value.
func (s *UpdateResourceInput) SetConfiguration(v *ConfigurationForUpdateResourceInput) *UpdateResourceInput {
	s.Configuration = v
	return s
}

// SetDescription sets the Description field's value.
func (s *UpdateResourceInput) SetDescription(v string) *UpdateResourceInput {
	s.Description = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateResourceInput) SetId(v string) *UpdateResourceInput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateResourceInput) SetName(v string) *UpdateResourceInput {
	s.Name = &v
	return s
}

// SetWorkspaceId sets the WorkspaceId field's value.
func (s *UpdateResourceInput) SetWorkspaceId(v string) *UpdateResourceInput {
	s.WorkspaceId = &v
	return s
}

type UpdateResourceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateResourceOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateResourceOutput) GoString() string {
	return s.String()
}
