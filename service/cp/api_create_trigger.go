// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateTriggerCommon = "CreateTrigger"

// CreateTriggerCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateTriggerCommon operation. The "output" return
// value will be populated with the CreateTriggerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTriggerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTriggerCommon Send returns without error.
//
// See CreateTriggerCommon for more information on using the CreateTriggerCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateTriggerCommonRequest method.
//    req, resp := client.CreateTriggerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) CreateTriggerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateTriggerCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateTriggerCommon API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation CreateTriggerCommon for usage and error information.
func (c *CP) CreateTriggerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateTriggerCommonRequest(input)
	return out, req.Send()
}

// CreateTriggerCommonWithContext is the same as CreateTriggerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTriggerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) CreateTriggerCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateTriggerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateTrigger = "CreateTrigger"

// CreateTriggerRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateTrigger operation. The "output" return
// value will be populated with the CreateTriggerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateTriggerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateTriggerCommon Send returns without error.
//
// See CreateTrigger for more information on using the CreateTrigger
// API call, and error handling.
//
//    // Example sending a request using the CreateTriggerRequest method.
//    req, resp := client.CreateTriggerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) CreateTriggerRequest(input *CreateTriggerInput) (req *request.Request, output *CreateTriggerOutput) {
	op := &request.Operation{
		Name:       opCreateTrigger,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateTriggerInput{}
	}

	output = &CreateTriggerOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateTrigger API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation CreateTrigger for usage and error information.
func (c *CP) CreateTrigger(input *CreateTriggerInput) (*CreateTriggerOutput, error) {
	req, out := c.CreateTriggerRequest(input)
	return out, req.Send()
}

// CreateTriggerWithContext is the same as CreateTrigger with the addition of
// the ability to pass a context and additional request options.
//
// See CreateTrigger for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) CreateTriggerWithContext(ctx byteplus.Context, input *CreateTriggerInput, opts ...request.Option) (*CreateTriggerOutput, error) {
	req, out := c.CreateTriggerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CRForCreateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Filter *FilterForCreateTriggerInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s CRForCreateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CRForCreateTriggerInput) GoString() string {
	return s.String()
}

// SetFilter sets the Filter field's value.
func (s *CRForCreateTriggerInput) SetFilter(v *FilterForCreateTriggerInput) *CRForCreateTriggerInput {
	s.Filter = v
	return s
}

type ConfigForCreateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	References []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ConfigForCreateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigForCreateTriggerInput) GoString() string {
	return s.String()
}

// SetReferences sets the References field's value.
func (s *ConfigForCreateTriggerInput) SetReferences(v []*string) *ConfigForCreateTriggerInput {
	s.References = v
	return s
}

type ConfigurationForCreateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Schedule *ScheduleForCreateTriggerInput `type:"structure" json:",omitempty"`

	Webhook *WebhookForCreateTriggerInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ConfigurationForCreateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigurationForCreateTriggerInput) GoString() string {
	return s.String()
}

// SetSchedule sets the Schedule field's value.
func (s *ConfigurationForCreateTriggerInput) SetSchedule(v *ScheduleForCreateTriggerInput) *ConfigurationForCreateTriggerInput {
	s.Schedule = v
	return s
}

// SetWebhook sets the Webhook field's value.
func (s *ConfigurationForCreateTriggerInput) SetWebhook(v *WebhookForCreateTriggerInput) *ConfigurationForCreateTriggerInput {
	s.Webhook = v
	return s
}

type ConvertFilterForCreateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Config *ConfigForCreateTriggerInput `type:"structure" json:",omitempty"`

	EventType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ConvertFilterForCreateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ConvertFilterForCreateTriggerInput) GoString() string {
	return s.String()
}

// SetConfig sets the Config field's value.
func (s *ConvertFilterForCreateTriggerInput) SetConfig(v *ConfigForCreateTriggerInput) *ConvertFilterForCreateTriggerInput {
	s.Config = v
	return s
}

// SetEventType sets the EventType field's value.
func (s *ConvertFilterForCreateTriggerInput) SetEventType(v string) *ConvertFilterForCreateTriggerInput {
	s.EventType = &v
	return s
}

type CreateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Configuration *ConfigurationForCreateTriggerInput `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	Parameters []*ParameterForCreateTriggerInput `type:"list" json:",omitempty"`

	// PipelineId is a required field
	PipelineId *string `type:"string" json:",omitempty" required:"true"`

	Resources []*ResourceForCreateTriggerInput `type:"list" json:",omitempty"`

	// Type is a required field
	Type *string `type:"string" json:",omitempty" required:"true" enum:"EnumOfTypeForCreateTriggerInput"`

	// WorkspaceId is a required field
	WorkspaceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTriggerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateTriggerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateTriggerInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.PipelineId == nil {
		invalidParams.Add(request.NewErrParamRequired("PipelineId"))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}
	if s.WorkspaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConfiguration sets the Configuration field's value.
func (s *CreateTriggerInput) SetConfiguration(v *ConfigurationForCreateTriggerInput) *CreateTriggerInput {
	s.Configuration = v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateTriggerInput) SetDescription(v string) *CreateTriggerInput {
	s.Description = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateTriggerInput) SetName(v string) *CreateTriggerInput {
	s.Name = &v
	return s
}

// SetParameters sets the Parameters field's value.
func (s *CreateTriggerInput) SetParameters(v []*ParameterForCreateTriggerInput) *CreateTriggerInput {
	s.Parameters = v
	return s
}

// SetPipelineId sets the PipelineId field's value.
func (s *CreateTriggerInput) SetPipelineId(v string) *CreateTriggerInput {
	s.PipelineId = &v
	return s
}

// SetResources sets the Resources field's value.
func (s *CreateTriggerInput) SetResources(v []*ResourceForCreateTriggerInput) *CreateTriggerInput {
	s.Resources = v
	return s
}

// SetType sets the Type field's value.
func (s *CreateTriggerInput) SetType(v string) *CreateTriggerInput {
	s.Type = &v
	return s
}

// SetWorkspaceId sets the WorkspaceId field's value.
func (s *CreateTriggerInput) SetWorkspaceId(v string) *CreateTriggerInput {
	s.WorkspaceId = &v
	return s
}

type CreateTriggerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateTriggerOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateTriggerOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CreateTriggerOutput) SetId(v string) *CreateTriggerOutput {
	s.Id = &v
	return s
}

type FilterForCreateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CREventType *string `type:"string" json:",omitempty"`

	Condition *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FilterForCreateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForCreateTriggerInput) GoString() string {
	return s.String()
}

// SetCREventType sets the CREventType field's value.
func (s *FilterForCreateTriggerInput) SetCREventType(v string) *FilterForCreateTriggerInput {
	s.CREventType = &v
	return s
}

// SetCondition sets the Condition field's value.
func (s *FilterForCreateTriggerInput) SetCondition(v string) *FilterForCreateTriggerInput {
	s.Condition = &v
	return s
}

type GitForCreateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Filters []*ConvertFilterForCreateTriggerInput `type:"list" json:",omitempty"`

	ResourceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GitForCreateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GitForCreateTriggerInput) GoString() string {
	return s.String()
}

// SetFilters sets the Filters field's value.
func (s *GitForCreateTriggerInput) SetFilters(v []*ConvertFilterForCreateTriggerInput) *GitForCreateTriggerInput {
	s.Filters = v
	return s
}

// SetResourceId sets the ResourceId field's value.
func (s *GitForCreateTriggerInput) SetResourceId(v string) *GitForCreateTriggerInput {
	s.ResourceId = &v
	return s
}

type ParameterForCreateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ParameterForCreateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ParameterForCreateTriggerInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *ParameterForCreateTriggerInput) SetKey(v string) *ParameterForCreateTriggerInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *ParameterForCreateTriggerInput) SetValue(v string) *ParameterForCreateTriggerInput {
	s.Value = &v
	return s
}

type ResourceForCreateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Reference *string `type:"string" json:",omitempty"`

	ResourceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ResourceForCreateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceForCreateTriggerInput) GoString() string {
	return s.String()
}

// SetReference sets the Reference field's value.
func (s *ResourceForCreateTriggerInput) SetReference(v string) *ResourceForCreateTriggerInput {
	s.Reference = &v
	return s
}

// SetResourceId sets the ResourceId field's value.
func (s *ResourceForCreateTriggerInput) SetResourceId(v string) *ResourceForCreateTriggerInput {
	s.ResourceId = &v
	return s
}

type ScheduleForCreateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ScheduleConfig *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ScheduleForCreateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ScheduleForCreateTriggerInput) GoString() string {
	return s.String()
}

// SetScheduleConfig sets the ScheduleConfig field's value.
func (s *ScheduleForCreateTriggerInput) SetScheduleConfig(v string) *ScheduleForCreateTriggerInput {
	s.ScheduleConfig = &v
	return s
}

type WebhookForCreateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CR *CRForCreateTriggerInput `type:"structure" json:",omitempty"`

	Git *GitForCreateTriggerInput `type:"structure" json:",omitempty"`

	URL *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s WebhookForCreateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s WebhookForCreateTriggerInput) GoString() string {
	return s.String()
}

// SetCR sets the CR field's value.
func (s *WebhookForCreateTriggerInput) SetCR(v *CRForCreateTriggerInput) *WebhookForCreateTriggerInput {
	s.CR = v
	return s
}

// SetGit sets the Git field's value.
func (s *WebhookForCreateTriggerInput) SetGit(v *GitForCreateTriggerInput) *WebhookForCreateTriggerInput {
	s.Git = v
	return s
}

// SetURL sets the URL field's value.
func (s *WebhookForCreateTriggerInput) SetURL(v string) *WebhookForCreateTriggerInput {
	s.URL = &v
	return s
}

const (
	// EnumOfTypeForCreateTriggerInputWebhook is a EnumOfTypeForCreateTriggerInput enum value
	EnumOfTypeForCreateTriggerInputWebhook = "Webhook"

	// EnumOfTypeForCreateTriggerInputGitWebhook is a EnumOfTypeForCreateTriggerInput enum value
	EnumOfTypeForCreateTriggerInputGitWebhook = "GitWebhook"

	// EnumOfTypeForCreateTriggerInputPerforceWebhook is a EnumOfTypeForCreateTriggerInput enum value
	EnumOfTypeForCreateTriggerInputPerforceWebhook = "PerforceWebhook"

	// EnumOfTypeForCreateTriggerInputCrwebhook is a EnumOfTypeForCreateTriggerInput enum value
	EnumOfTypeForCreateTriggerInputCrwebhook = "CRWebhook"

	// EnumOfTypeForCreateTriggerInputSchedule is a EnumOfTypeForCreateTriggerInput enum value
	EnumOfTypeForCreateTriggerInputSchedule = "Schedule"

	// EnumOfTypeForCreateTriggerInputManual is a EnumOfTypeForCreateTriggerInput enum value
	EnumOfTypeForCreateTriggerInputManual = "Manual"
)
