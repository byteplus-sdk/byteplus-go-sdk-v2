// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opGetTaskRunLogDownloadURICommon = "GetTaskRunLogDownloadURI"

// GetTaskRunLogDownloadURICommonRequest generates a "byteplus/request.Request" representing the
// client's request for the GetTaskRunLogDownloadURICommon operation. The "output" return
// value will be populated with the GetTaskRunLogDownloadURICommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetTaskRunLogDownloadURICommon Request to send the API call to the service.
// the "output" return value is not valid until after GetTaskRunLogDownloadURICommon Send returns without error.
//
// See GetTaskRunLogDownloadURICommon for more information on using the GetTaskRunLogDownloadURICommon
// API call, and error handling.
//
//    // Example sending a request using the GetTaskRunLogDownloadURICommonRequest method.
//    req, resp := client.GetTaskRunLogDownloadURICommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) GetTaskRunLogDownloadURICommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetTaskRunLogDownloadURICommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetTaskRunLogDownloadURICommon API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation GetTaskRunLogDownloadURICommon for usage and error information.
func (c *CP) GetTaskRunLogDownloadURICommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetTaskRunLogDownloadURICommonRequest(input)
	return out, req.Send()
}

// GetTaskRunLogDownloadURICommonWithContext is the same as GetTaskRunLogDownloadURICommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetTaskRunLogDownloadURICommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) GetTaskRunLogDownloadURICommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetTaskRunLogDownloadURICommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetTaskRunLogDownloadURI = "GetTaskRunLogDownloadURI"

// GetTaskRunLogDownloadURIRequest generates a "byteplus/request.Request" representing the
// client's request for the GetTaskRunLogDownloadURI operation. The "output" return
// value will be populated with the GetTaskRunLogDownloadURICommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GetTaskRunLogDownloadURICommon Request to send the API call to the service.
// the "output" return value is not valid until after GetTaskRunLogDownloadURICommon Send returns without error.
//
// See GetTaskRunLogDownloadURI for more information on using the GetTaskRunLogDownloadURI
// API call, and error handling.
//
//    // Example sending a request using the GetTaskRunLogDownloadURIRequest method.
//    req, resp := client.GetTaskRunLogDownloadURIRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) GetTaskRunLogDownloadURIRequest(input *GetTaskRunLogDownloadURIInput) (req *request.Request, output *GetTaskRunLogDownloadURIOutput) {
	op := &request.Operation{
		Name:       opGetTaskRunLogDownloadURI,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetTaskRunLogDownloadURIInput{}
	}

	output = &GetTaskRunLogDownloadURIOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GetTaskRunLogDownloadURI API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation GetTaskRunLogDownloadURI for usage and error information.
func (c *CP) GetTaskRunLogDownloadURI(input *GetTaskRunLogDownloadURIInput) (*GetTaskRunLogDownloadURIOutput, error) {
	req, out := c.GetTaskRunLogDownloadURIRequest(input)
	return out, req.Send()
}

// GetTaskRunLogDownloadURIWithContext is the same as GetTaskRunLogDownloadURI with the addition of
// the ability to pass a context and additional request options.
//
// See GetTaskRunLogDownloadURI for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) GetTaskRunLogDownloadURIWithContext(ctx byteplus.Context, input *GetTaskRunLogDownloadURIInput, opts ...request.Option) (*GetTaskRunLogDownloadURIOutput, error) {
	req, out := c.GetTaskRunLogDownloadURIRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GetTaskRunLogDownloadURIInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	// PipelineId is a required field
	PipelineId *string `type:"string" json:",omitempty" required:"true"`

	// PipelineRunId is a required field
	PipelineRunId *string `type:"string" json:",omitempty" required:"true"`

	// StepName is a required field
	StepName *string `type:"string" json:",omitempty" required:"true"`

	// TaskId is a required field
	TaskId *string `type:"string" json:",omitempty" required:"true"`

	// TaskRunId is a required field
	TaskRunId *string `type:"string" json:",omitempty" required:"true"`

	// WorkspaceId is a required field
	WorkspaceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s GetTaskRunLogDownloadURIInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTaskRunLogDownloadURIInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetTaskRunLogDownloadURIInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GetTaskRunLogDownloadURIInput"}
	if s.PipelineId == nil {
		invalidParams.Add(request.NewErrParamRequired("PipelineId"))
	}
	if s.PipelineRunId == nil {
		invalidParams.Add(request.NewErrParamRequired("PipelineRunId"))
	}
	if s.StepName == nil {
		invalidParams.Add(request.NewErrParamRequired("StepName"))
	}
	if s.TaskId == nil {
		invalidParams.Add(request.NewErrParamRequired("TaskId"))
	}
	if s.TaskRunId == nil {
		invalidParams.Add(request.NewErrParamRequired("TaskRunId"))
	}
	if s.WorkspaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPipelineId sets the PipelineId field's value.
func (s *GetTaskRunLogDownloadURIInput) SetPipelineId(v string) *GetTaskRunLogDownloadURIInput {
	s.PipelineId = &v
	return s
}

// SetPipelineRunId sets the PipelineRunId field's value.
func (s *GetTaskRunLogDownloadURIInput) SetPipelineRunId(v string) *GetTaskRunLogDownloadURIInput {
	s.PipelineRunId = &v
	return s
}

// SetStepName sets the StepName field's value.
func (s *GetTaskRunLogDownloadURIInput) SetStepName(v string) *GetTaskRunLogDownloadURIInput {
	s.StepName = &v
	return s
}

// SetTaskId sets the TaskId field's value.
func (s *GetTaskRunLogDownloadURIInput) SetTaskId(v string) *GetTaskRunLogDownloadURIInput {
	s.TaskId = &v
	return s
}

// SetTaskRunId sets the TaskRunId field's value.
func (s *GetTaskRunLogDownloadURIInput) SetTaskRunId(v string) *GetTaskRunLogDownloadURIInput {
	s.TaskRunId = &v
	return s
}

// SetWorkspaceId sets the WorkspaceId field's value.
func (s *GetTaskRunLogDownloadURIInput) SetWorkspaceId(v string) *GetTaskRunLogDownloadURIInput {
	s.WorkspaceId = &v
	return s
}

type GetTaskRunLogDownloadURIOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Url *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GetTaskRunLogDownloadURIOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GetTaskRunLogDownloadURIOutput) GoString() string {
	return s.String()
}

// SetUrl sets the Url field's value.
func (s *GetTaskRunLogDownloadURIOutput) SetUrl(v string) *GetTaskRunLogDownloadURIOutput {
	s.Url = &v
	return s
}
