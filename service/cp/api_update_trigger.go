// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUpdateTriggerCommon = "UpdateTrigger"

// UpdateTriggerCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateTriggerCommon operation. The "output" return
// value will be populated with the UpdateTriggerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateTriggerCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateTriggerCommon Send returns without error.
//
// See UpdateTriggerCommon for more information on using the UpdateTriggerCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateTriggerCommonRequest method.
//    req, resp := client.UpdateTriggerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) UpdateTriggerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateTriggerCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateTriggerCommon API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation UpdateTriggerCommon for usage and error information.
func (c *CP) UpdateTriggerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateTriggerCommonRequest(input)
	return out, req.Send()
}

// UpdateTriggerCommonWithContext is the same as UpdateTriggerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateTriggerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) UpdateTriggerCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateTriggerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateTrigger = "UpdateTrigger"

// UpdateTriggerRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateTrigger operation. The "output" return
// value will be populated with the UpdateTriggerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateTriggerCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateTriggerCommon Send returns without error.
//
// See UpdateTrigger for more information on using the UpdateTrigger
// API call, and error handling.
//
//    // Example sending a request using the UpdateTriggerRequest method.
//    req, resp := client.UpdateTriggerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) UpdateTriggerRequest(input *UpdateTriggerInput) (req *request.Request, output *UpdateTriggerOutput) {
	op := &request.Operation{
		Name:       opUpdateTrigger,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateTriggerInput{}
	}

	output = &UpdateTriggerOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateTrigger API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation UpdateTrigger for usage and error information.
func (c *CP) UpdateTrigger(input *UpdateTriggerInput) (*UpdateTriggerOutput, error) {
	req, out := c.UpdateTriggerRequest(input)
	return out, req.Send()
}

// UpdateTriggerWithContext is the same as UpdateTrigger with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateTrigger for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) UpdateTriggerWithContext(ctx byteplus.Context, input *UpdateTriggerInput, opts ...request.Option) (*UpdateTriggerOutput, error) {
	req, out := c.UpdateTriggerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CRForUpdateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Filter *FilterForUpdateTriggerInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s CRForUpdateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CRForUpdateTriggerInput) GoString() string {
	return s.String()
}

// SetFilter sets the Filter field's value.
func (s *CRForUpdateTriggerInput) SetFilter(v *FilterForUpdateTriggerInput) *CRForUpdateTriggerInput {
	s.Filter = v
	return s
}

type ConfigForUpdateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	References []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s ConfigForUpdateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigForUpdateTriggerInput) GoString() string {
	return s.String()
}

// SetReferences sets the References field's value.
func (s *ConfigForUpdateTriggerInput) SetReferences(v []*string) *ConfigForUpdateTriggerInput {
	s.References = v
	return s
}

type ConfigurationForUpdateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Schedule *ScheduleForUpdateTriggerInput `type:"structure" json:",omitempty"`

	Webhook *WebhookForUpdateTriggerInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ConfigurationForUpdateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigurationForUpdateTriggerInput) GoString() string {
	return s.String()
}

// SetSchedule sets the Schedule field's value.
func (s *ConfigurationForUpdateTriggerInput) SetSchedule(v *ScheduleForUpdateTriggerInput) *ConfigurationForUpdateTriggerInput {
	s.Schedule = v
	return s
}

// SetWebhook sets the Webhook field's value.
func (s *ConfigurationForUpdateTriggerInput) SetWebhook(v *WebhookForUpdateTriggerInput) *ConfigurationForUpdateTriggerInput {
	s.Webhook = v
	return s
}

type ConvertFilterForUpdateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Config *ConfigForUpdateTriggerInput `type:"structure" json:",omitempty"`

	EventType *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ConvertFilterForUpdateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ConvertFilterForUpdateTriggerInput) GoString() string {
	return s.String()
}

// SetConfig sets the Config field's value.
func (s *ConvertFilterForUpdateTriggerInput) SetConfig(v *ConfigForUpdateTriggerInput) *ConvertFilterForUpdateTriggerInput {
	s.Config = v
	return s
}

// SetEventType sets the EventType field's value.
func (s *ConvertFilterForUpdateTriggerInput) SetEventType(v string) *ConvertFilterForUpdateTriggerInput {
	s.EventType = &v
	return s
}

type FilterForUpdateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CREventType *string `type:"string" json:",omitempty"`

	Condition *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s FilterForUpdateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s FilterForUpdateTriggerInput) GoString() string {
	return s.String()
}

// SetCREventType sets the CREventType field's value.
func (s *FilterForUpdateTriggerInput) SetCREventType(v string) *FilterForUpdateTriggerInput {
	s.CREventType = &v
	return s
}

// SetCondition sets the Condition field's value.
func (s *FilterForUpdateTriggerInput) SetCondition(v string) *FilterForUpdateTriggerInput {
	s.Condition = &v
	return s
}

type GitForUpdateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Filters []*ConvertFilterForUpdateTriggerInput `type:"list" json:",omitempty"`

	ResourceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GitForUpdateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GitForUpdateTriggerInput) GoString() string {
	return s.String()
}

// SetFilters sets the Filters field's value.
func (s *GitForUpdateTriggerInput) SetFilters(v []*ConvertFilterForUpdateTriggerInput) *GitForUpdateTriggerInput {
	s.Filters = v
	return s
}

// SetResourceId sets the ResourceId field's value.
func (s *GitForUpdateTriggerInput) SetResourceId(v string) *GitForUpdateTriggerInput {
	s.ResourceId = &v
	return s
}

type ParameterForUpdateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Key *string `type:"string" json:",omitempty"`

	Value *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ParameterForUpdateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ParameterForUpdateTriggerInput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *ParameterForUpdateTriggerInput) SetKey(v string) *ParameterForUpdateTriggerInput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *ParameterForUpdateTriggerInput) SetValue(v string) *ParameterForUpdateTriggerInput {
	s.Value = &v
	return s
}

type ResourceForUpdateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Reference *string `type:"string" json:",omitempty"`

	ResourceId *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ResourceForUpdateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ResourceForUpdateTriggerInput) GoString() string {
	return s.String()
}

// SetReference sets the Reference field's value.
func (s *ResourceForUpdateTriggerInput) SetReference(v string) *ResourceForUpdateTriggerInput {
	s.Reference = &v
	return s
}

// SetResourceId sets the ResourceId field's value.
func (s *ResourceForUpdateTriggerInput) SetResourceId(v string) *ResourceForUpdateTriggerInput {
	s.ResourceId = &v
	return s
}

type ScheduleForUpdateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ScheduleConfig *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ScheduleForUpdateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ScheduleForUpdateTriggerInput) GoString() string {
	return s.String()
}

// SetScheduleConfig sets the ScheduleConfig field's value.
func (s *ScheduleForUpdateTriggerInput) SetScheduleConfig(v string) *ScheduleForUpdateTriggerInput {
	s.ScheduleConfig = &v
	return s
}

type UpdateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Configuration *ConfigurationForUpdateTriggerInput `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	Name *string `type:"string" json:",omitempty"`

	Parameters []*ParameterForUpdateTriggerInput `type:"list" json:",omitempty"`

	// PipelineId is a required field
	PipelineId *string `type:"string" json:",omitempty" required:"true"`

	Resources []*ResourceForUpdateTriggerInput `type:"list" json:",omitempty"`

	// WorkspaceId is a required field
	WorkspaceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateTriggerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateTriggerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateTriggerInput"}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}
	if s.PipelineId == nil {
		invalidParams.Add(request.NewErrParamRequired("PipelineId"))
	}
	if s.WorkspaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConfiguration sets the Configuration field's value.
func (s *UpdateTriggerInput) SetConfiguration(v *ConfigurationForUpdateTriggerInput) *UpdateTriggerInput {
	s.Configuration = v
	return s
}

// SetDescription sets the Description field's value.
func (s *UpdateTriggerInput) SetDescription(v string) *UpdateTriggerInput {
	s.Description = &v
	return s
}

// SetId sets the Id field's value.
func (s *UpdateTriggerInput) SetId(v string) *UpdateTriggerInput {
	s.Id = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateTriggerInput) SetName(v string) *UpdateTriggerInput {
	s.Name = &v
	return s
}

// SetParameters sets the Parameters field's value.
func (s *UpdateTriggerInput) SetParameters(v []*ParameterForUpdateTriggerInput) *UpdateTriggerInput {
	s.Parameters = v
	return s
}

// SetPipelineId sets the PipelineId field's value.
func (s *UpdateTriggerInput) SetPipelineId(v string) *UpdateTriggerInput {
	s.PipelineId = &v
	return s
}

// SetResources sets the Resources field's value.
func (s *UpdateTriggerInput) SetResources(v []*ResourceForUpdateTriggerInput) *UpdateTriggerInput {
	s.Resources = v
	return s
}

// SetWorkspaceId sets the WorkspaceId field's value.
func (s *UpdateTriggerInput) SetWorkspaceId(v string) *UpdateTriggerInput {
	s.WorkspaceId = &v
	return s
}

type UpdateTriggerOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateTriggerOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateTriggerOutput) GoString() string {
	return s.String()
}

type WebhookForUpdateTriggerInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CR *CRForUpdateTriggerInput `type:"structure" json:",omitempty"`

	Git *GitForUpdateTriggerInput `type:"structure" json:",omitempty"`

	URL *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s WebhookForUpdateTriggerInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s WebhookForUpdateTriggerInput) GoString() string {
	return s.String()
}

// SetCR sets the CR field's value.
func (s *WebhookForUpdateTriggerInput) SetCR(v *CRForUpdateTriggerInput) *WebhookForUpdateTriggerInput {
	s.CR = v
	return s
}

// SetGit sets the Git field's value.
func (s *WebhookForUpdateTriggerInput) SetGit(v *GitForUpdateTriggerInput) *WebhookForUpdateTriggerInput {
	s.Git = v
	return s
}

// SetURL sets the URL field's value.
func (s *WebhookForUpdateTriggerInput) SetURL(v string) *WebhookForUpdateTriggerInput {
	s.URL = &v
	return s
}
