// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cp

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opCreateResourceCommon = "CreateResource"

// CreateResourceCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateResourceCommon operation. The "output" return
// value will be populated with the CreateResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateResourceCommon Send returns without error.
//
// See CreateResourceCommon for more information on using the CreateResourceCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateResourceCommonRequest method.
//    req, resp := client.CreateResourceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) CreateResourceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateResourceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateResourceCommon API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation CreateResourceCommon for usage and error information.
func (c *CP) CreateResourceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateResourceCommonRequest(input)
	return out, req.Send()
}

// CreateResourceCommonWithContext is the same as CreateResourceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateResourceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) CreateResourceCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateResourceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateResource = "CreateResource"

// CreateResourceRequest generates a "byteplus/request.Request" representing the
// client's request for the CreateResource operation. The "output" return
// value will be populated with the CreateResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateResourceCommon Send returns without error.
//
// See CreateResource for more information on using the CreateResource
// API call, and error handling.
//
//    // Example sending a request using the CreateResourceRequest method.
//    req, resp := client.CreateResourceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CP) CreateResourceRequest(input *CreateResourceInput) (req *request.Request, output *CreateResourceOutput) {
	op := &request.Operation{
		Name:       opCreateResource,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateResourceInput{}
	}

	output = &CreateResourceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateResource API operation for CP.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for CP's
// API operation CreateResource for usage and error information.
func (c *CP) CreateResource(input *CreateResourceInput) (*CreateResourceOutput, error) {
	req, out := c.CreateResourceRequest(input)
	return out, req.Send()
}

// CreateResourceWithContext is the same as CreateResource with the addition of
// the ability to pass a context and additional request options.
//
// See CreateResource for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CP) CreateResourceWithContext(ctx byteplus.Context, input *CreateResourceInput, opts ...request.Option) (*CreateResourceOutput, error) {
	req, out := c.CreateResourceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ConfigurationForCreateResourceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Git *GitForCreateResourceInput `type:"structure" json:",omitempty"`
}

// String returns the string representation
func (s ConfigurationForCreateResourceInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfigurationForCreateResourceInput) GoString() string {
	return s.String()
}

// SetGit sets the Git field's value.
func (s *ConfigurationForCreateResourceInput) SetGit(v *GitForCreateResourceInput) *ConfigurationForCreateResourceInput {
	s.Git = v
	return s
}

type CreateResourceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Configuration *ConfigurationForCreateResourceInput `type:"structure" json:",omitempty"`

	Description *string `type:"string" json:",omitempty"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	// Type is a required field
	Type *string `type:"string" json:",omitempty" required:"true"`

	// WorkspaceId is a required field
	WorkspaceId *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s CreateResourceInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateResourceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateResourceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateResourceInput"}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}
	if s.WorkspaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("WorkspaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetConfiguration sets the Configuration field's value.
func (s *CreateResourceInput) SetConfiguration(v *ConfigurationForCreateResourceInput) *CreateResourceInput {
	s.Configuration = v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateResourceInput) SetDescription(v string) *CreateResourceInput {
	s.Description = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateResourceInput) SetName(v string) *CreateResourceInput {
	s.Name = &v
	return s
}

// SetType sets the Type field's value.
func (s *CreateResourceInput) SetType(v string) *CreateResourceInput {
	s.Type = &v
	return s
}

// SetWorkspaceId sets the WorkspaceId field's value.
func (s *CreateResourceInput) SetWorkspaceId(v string) *CreateResourceInput {
	s.WorkspaceId = &v
	return s
}

type CreateResourceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s CreateResourceOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateResourceOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CreateResourceOutput) SetId(v string) *CreateResourceOutput {
	s.Id = &v
	return s
}

type GitForCreateResourceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AccessKey *string `type:"string" json:",omitempty"`

	CloneDepth *int64 `type:"int64" json:",omitempty"`

	Password *string `type:"string" json:",omitempty"`

	SecretKey *string `type:"string" json:",omitempty"`

	Url *string `type:"string" json:",omitempty"`

	UserName *string `type:"string" json:",omitempty"`

	UserToken *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s GitForCreateResourceInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s GitForCreateResourceInput) GoString() string {
	return s.String()
}

// SetAccessKey sets the AccessKey field's value.
func (s *GitForCreateResourceInput) SetAccessKey(v string) *GitForCreateResourceInput {
	s.AccessKey = &v
	return s
}

// SetCloneDepth sets the CloneDepth field's value.
func (s *GitForCreateResourceInput) SetCloneDepth(v int64) *GitForCreateResourceInput {
	s.CloneDepth = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *GitForCreateResourceInput) SetPassword(v string) *GitForCreateResourceInput {
	s.Password = &v
	return s
}

// SetSecretKey sets the SecretKey field's value.
func (s *GitForCreateResourceInput) SetSecretKey(v string) *GitForCreateResourceInput {
	s.SecretKey = &v
	return s
}

// SetUrl sets the Url field's value.
func (s *GitForCreateResourceInput) SetUrl(v string) *GitForCreateResourceInput {
	s.Url = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *GitForCreateResourceInput) SetUserName(v string) *GitForCreateResourceInput {
	s.UserName = &v
	return s
}

// SetUserToken sets the UserToken field's value.
func (s *GitForCreateResourceInput) SetUserToken(v string) *GitForCreateResourceInput {
	s.UserToken = &v
	return s
}
