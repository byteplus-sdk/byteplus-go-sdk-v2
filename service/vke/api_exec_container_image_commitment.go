// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vke

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opExecContainerImageCommitmentCommon = "ExecContainerImageCommitment"

// ExecContainerImageCommitmentCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the ExecContainerImageCommitmentCommon operation. The "output" return
// value will be populated with the ExecContainerImageCommitmentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExecContainerImageCommitmentCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExecContainerImageCommitmentCommon Send returns without error.
//
// See ExecContainerImageCommitmentCommon for more information on using the ExecContainerImageCommitmentCommon
// API call, and error handling.
//
//    // Example sending a request using the ExecContainerImageCommitmentCommonRequest method.
//    req, resp := client.ExecContainerImageCommitmentCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) ExecContainerImageCommitmentCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opExecContainerImageCommitmentCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ExecContainerImageCommitmentCommon API operation for VKE.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VKE's
// API operation ExecContainerImageCommitmentCommon for usage and error information.
func (c *VKE) ExecContainerImageCommitmentCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ExecContainerImageCommitmentCommonRequest(input)
	return out, req.Send()
}

// ExecContainerImageCommitmentCommonWithContext is the same as ExecContainerImageCommitmentCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ExecContainerImageCommitmentCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) ExecContainerImageCommitmentCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ExecContainerImageCommitmentCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opExecContainerImageCommitment = "ExecContainerImageCommitment"

// ExecContainerImageCommitmentRequest generates a "byteplus/request.Request" representing the
// client's request for the ExecContainerImageCommitment operation. The "output" return
// value will be populated with the ExecContainerImageCommitmentCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExecContainerImageCommitmentCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExecContainerImageCommitmentCommon Send returns without error.
//
// See ExecContainerImageCommitment for more information on using the ExecContainerImageCommitment
// API call, and error handling.
//
//    // Example sending a request using the ExecContainerImageCommitmentRequest method.
//    req, resp := client.ExecContainerImageCommitmentRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) ExecContainerImageCommitmentRequest(input *ExecContainerImageCommitmentInput) (req *request.Request, output *ExecContainerImageCommitmentOutput) {
	op := &request.Operation{
		Name:       opExecContainerImageCommitment,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ExecContainerImageCommitmentInput{}
	}

	output = &ExecContainerImageCommitmentOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ExecContainerImageCommitment API operation for VKE.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VKE's
// API operation ExecContainerImageCommitment for usage and error information.
func (c *VKE) ExecContainerImageCommitment(input *ExecContainerImageCommitmentInput) (*ExecContainerImageCommitmentOutput, error) {
	req, out := c.ExecContainerImageCommitmentRequest(input)
	return out, req.Send()
}

// ExecContainerImageCommitmentWithContext is the same as ExecContainerImageCommitment with the addition of
// the ability to pass a context and additional request options.
//
// See ExecContainerImageCommitment for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) ExecContainerImageCommitmentWithContext(ctx byteplus.Context, input *ExecContainerImageCommitmentInput, opts ...request.Option) (*ExecContainerImageCommitmentOutput, error) {
	req, out := c.ExecContainerImageCommitmentRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AuthConfigForExecContainerImageCommitmentInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Password *string `type:"string" json:",omitempty"`

	PlainHTTP *bool `type:"boolean" json:",omitempty"`

	SkipTLSVerify *bool `type:"boolean" json:",omitempty"`

	Username *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s AuthConfigForExecContainerImageCommitmentInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s AuthConfigForExecContainerImageCommitmentInput) GoString() string {
	return s.String()
}

// SetPassword sets the Password field's value.
func (s *AuthConfigForExecContainerImageCommitmentInput) SetPassword(v string) *AuthConfigForExecContainerImageCommitmentInput {
	s.Password = &v
	return s
}

// SetPlainHTTP sets the PlainHTTP field's value.
func (s *AuthConfigForExecContainerImageCommitmentInput) SetPlainHTTP(v bool) *AuthConfigForExecContainerImageCommitmentInput {
	s.PlainHTTP = &v
	return s
}

// SetSkipTLSVerify sets the SkipTLSVerify field's value.
func (s *AuthConfigForExecContainerImageCommitmentInput) SetSkipTLSVerify(v bool) *AuthConfigForExecContainerImageCommitmentInput {
	s.SkipTLSVerify = &v
	return s
}

// SetUsername sets the Username field's value.
func (s *AuthConfigForExecContainerImageCommitmentInput) SetUsername(v string) *AuthConfigForExecContainerImageCommitmentInput {
	s.Username = &v
	return s
}

type ExecContainerImageCommitmentInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	AuthConfig *AuthConfigForExecContainerImageCommitmentInput `type:"structure" json:",omitempty"`

	// ContainerName is a required field
	ContainerName *string `type:"string" json:",omitempty" required:"true"`

	ImageSpec *ImageSpecForExecContainerImageCommitmentInput `type:"structure" json:",omitempty"`

	// InstanceId is a required field
	InstanceId *string `type:"string" json:",omitempty" required:"true"`

	Pause *bool `type:"boolean" json:",omitempty"`
}

// String returns the string representation
func (s ExecContainerImageCommitmentInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ExecContainerImageCommitmentInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ExecContainerImageCommitmentInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ExecContainerImageCommitmentInput"}
	if s.ContainerName == nil {
		invalidParams.Add(request.NewErrParamRequired("ContainerName"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAuthConfig sets the AuthConfig field's value.
func (s *ExecContainerImageCommitmentInput) SetAuthConfig(v *AuthConfigForExecContainerImageCommitmentInput) *ExecContainerImageCommitmentInput {
	s.AuthConfig = v
	return s
}

// SetContainerName sets the ContainerName field's value.
func (s *ExecContainerImageCommitmentInput) SetContainerName(v string) *ExecContainerImageCommitmentInput {
	s.ContainerName = &v
	return s
}

// SetImageSpec sets the ImageSpec field's value.
func (s *ExecContainerImageCommitmentInput) SetImageSpec(v *ImageSpecForExecContainerImageCommitmentInput) *ExecContainerImageCommitmentInput {
	s.ImageSpec = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ExecContainerImageCommitmentInput) SetInstanceId(v string) *ExecContainerImageCommitmentInput {
	s.InstanceId = &v
	return s
}

// SetPause sets the Pause field's value.
func (s *ExecContainerImageCommitmentInput) SetPause(v bool) *ExecContainerImageCommitmentInput {
	s.Pause = &v
	return s
}

type ExecContainerImageCommitmentOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ExecContainerImageCommitmentOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ExecContainerImageCommitmentOutput) GoString() string {
	return s.String()
}

type ImageSpecForExecContainerImageCommitmentInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Author *string `type:"string" json:",omitempty"`

	Changes []*string `type:"list" json:",omitempty"`

	ImageName *string `type:"string" json:",omitempty"`

	Message *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s ImageSpecForExecContainerImageCommitmentInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s ImageSpecForExecContainerImageCommitmentInput) GoString() string {
	return s.String()
}

// SetAuthor sets the Author field's value.
func (s *ImageSpecForExecContainerImageCommitmentInput) SetAuthor(v string) *ImageSpecForExecContainerImageCommitmentInput {
	s.Author = &v
	return s
}

// SetChanges sets the Changes field's value.
func (s *ImageSpecForExecContainerImageCommitmentInput) SetChanges(v []*string) *ImageSpecForExecContainerImageCommitmentInput {
	s.Changes = v
	return s
}

// SetImageName sets the ImageName field's value.
func (s *ImageSpecForExecContainerImageCommitmentInput) SetImageName(v string) *ImageSpecForExecContainerImageCommitmentInput {
	s.ImageName = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *ImageSpecForExecContainerImageCommitmentInput) SetMessage(v string) *ImageSpecForExecContainerImageCommitmentInput {
	s.Message = &v
	return s
}
