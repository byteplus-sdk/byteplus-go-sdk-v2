// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vke

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteNodePoolCommon = "DeleteNodePool"

// DeleteNodePoolCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteNodePoolCommon operation. The "output" return
// value will be populated with the DeleteNodePoolCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNodePoolCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNodePoolCommon Send returns without error.
//
// See DeleteNodePoolCommon for more information on using the DeleteNodePoolCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteNodePoolCommonRequest method.
//    req, resp := client.DeleteNodePoolCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) DeleteNodePoolCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteNodePoolCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteNodePoolCommon API operation for VKE.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VKE's
// API operation DeleteNodePoolCommon for usage and error information.
func (c *VKE) DeleteNodePoolCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteNodePoolCommonRequest(input)
	return out, req.Send()
}

// DeleteNodePoolCommonWithContext is the same as DeleteNodePoolCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNodePoolCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) DeleteNodePoolCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteNodePoolCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteNodePool = "DeleteNodePool"

// DeleteNodePoolRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteNodePool operation. The "output" return
// value will be populated with the DeleteNodePoolCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNodePoolCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNodePoolCommon Send returns without error.
//
// See DeleteNodePool for more information on using the DeleteNodePool
// API call, and error handling.
//
//    // Example sending a request using the DeleteNodePoolRequest method.
//    req, resp := client.DeleteNodePoolRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) DeleteNodePoolRequest(input *DeleteNodePoolInput) (req *request.Request, output *DeleteNodePoolOutput) {
	op := &request.Operation{
		Name:       opDeleteNodePool,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteNodePoolInput{}
	}

	output = &DeleteNodePoolOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteNodePool API operation for VKE.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VKE's
// API operation DeleteNodePool for usage and error information.
func (c *VKE) DeleteNodePool(input *DeleteNodePoolInput) (*DeleteNodePoolOutput, error) {
	req, out := c.DeleteNodePoolRequest(input)
	return out, req.Send()
}

// DeleteNodePoolWithContext is the same as DeleteNodePool with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNodePool for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) DeleteNodePoolWithContext(ctx byteplus.Context, input *DeleteNodePoolInput, opts ...request.Option) (*DeleteNodePoolOutput, error) {
	req, out := c.DeleteNodePoolRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteNodePoolInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CascadingDeleteResources []*string `type:"list" json:",omitempty"`

	// ClusterId is a required field
	ClusterId *string `type:"string" json:",omitempty" required:"true"`

	// Id is a required field
	Id *string `type:"string" json:",omitempty" required:"true"`

	RetainResources []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DeleteNodePoolInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNodePoolInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteNodePoolInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteNodePoolInput"}
	if s.ClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("ClusterId"))
	}
	if s.Id == nil {
		invalidParams.Add(request.NewErrParamRequired("Id"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCascadingDeleteResources sets the CascadingDeleteResources field's value.
func (s *DeleteNodePoolInput) SetCascadingDeleteResources(v []*string) *DeleteNodePoolInput {
	s.CascadingDeleteResources = v
	return s
}

// SetClusterId sets the ClusterId field's value.
func (s *DeleteNodePoolInput) SetClusterId(v string) *DeleteNodePoolInput {
	s.ClusterId = &v
	return s
}

// SetId sets the Id field's value.
func (s *DeleteNodePoolInput) SetId(v string) *DeleteNodePoolInput {
	s.Id = &v
	return s
}

// SetRetainResources sets the RetainResources field's value.
func (s *DeleteNodePoolInput) SetRetainResources(v []*string) *DeleteNodePoolInput {
	s.RetainResources = v
	return s
}

type DeleteNodePoolOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteNodePoolOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNodePoolOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfCascadingDeleteResourceListForDeleteNodePoolInputEcs is a EnumOfCascadingDeleteResourceListForDeleteNodePoolInput enum value
	EnumOfCascadingDeleteResourceListForDeleteNodePoolInputEcs = "Ecs"
)

const (
	// EnumOfRetainResourceListForDeleteNodePoolInputEcs is a EnumOfRetainResourceListForDeleteNodePoolInput enum value
	EnumOfRetainResourceListForDeleteNodePoolInputEcs = "Ecs"
)
