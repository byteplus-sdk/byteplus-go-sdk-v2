// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vke

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opUpdateAddonVersionCommon = "UpdateAddonVersion"

// UpdateAddonVersionCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateAddonVersionCommon operation. The "output" return
// value will be populated with the UpdateAddonVersionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateAddonVersionCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateAddonVersionCommon Send returns without error.
//
// See UpdateAddonVersionCommon for more information on using the UpdateAddonVersionCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdateAddonVersionCommonRequest method.
//    req, resp := client.UpdateAddonVersionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) UpdateAddonVersionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdateAddonVersionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateAddonVersionCommon API operation for VKE.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VKE's
// API operation UpdateAddonVersionCommon for usage and error information.
func (c *VKE) UpdateAddonVersionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdateAddonVersionCommonRequest(input)
	return out, req.Send()
}

// UpdateAddonVersionCommonWithContext is the same as UpdateAddonVersionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateAddonVersionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) UpdateAddonVersionCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdateAddonVersionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdateAddonVersion = "UpdateAddonVersion"

// UpdateAddonVersionRequest generates a "byteplus/request.Request" representing the
// client's request for the UpdateAddonVersion operation. The "output" return
// value will be populated with the UpdateAddonVersionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdateAddonVersionCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdateAddonVersionCommon Send returns without error.
//
// See UpdateAddonVersion for more information on using the UpdateAddonVersion
// API call, and error handling.
//
//    // Example sending a request using the UpdateAddonVersionRequest method.
//    req, resp := client.UpdateAddonVersionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) UpdateAddonVersionRequest(input *UpdateAddonVersionInput) (req *request.Request, output *UpdateAddonVersionOutput) {
	op := &request.Operation{
		Name:       opUpdateAddonVersion,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdateAddonVersionInput{}
	}

	output = &UpdateAddonVersionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdateAddonVersion API operation for VKE.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VKE's
// API operation UpdateAddonVersion for usage and error information.
func (c *VKE) UpdateAddonVersion(input *UpdateAddonVersionInput) (*UpdateAddonVersionOutput, error) {
	req, out := c.UpdateAddonVersionRequest(input)
	return out, req.Send()
}

// UpdateAddonVersionWithContext is the same as UpdateAddonVersion with the addition of
// the ability to pass a context and additional request options.
//
// See UpdateAddonVersion for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) UpdateAddonVersionWithContext(ctx byteplus.Context, input *UpdateAddonVersionInput, opts ...request.Option) (*UpdateAddonVersionOutput, error) {
	req, out := c.UpdateAddonVersionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdateAddonVersionInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	ClientToken *string `type:"string" json:",omitempty"`

	// ClusterId is a required field
	ClusterId *string `type:"string" json:",omitempty" required:"true"`

	// Name is a required field
	Name *string `type:"string" json:",omitempty" required:"true"`

	// Version is a required field
	Version *string `type:"string" json:",omitempty" required:"true"`
}

// String returns the string representation
func (s UpdateAddonVersionInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateAddonVersionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateAddonVersionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UpdateAddonVersionInput"}
	if s.ClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("ClusterId"))
	}
	if s.Name == nil {
		invalidParams.Add(request.NewErrParamRequired("Name"))
	}
	if s.Version == nil {
		invalidParams.Add(request.NewErrParamRequired("Version"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetClientToken sets the ClientToken field's value.
func (s *UpdateAddonVersionInput) SetClientToken(v string) *UpdateAddonVersionInput {
	s.ClientToken = &v
	return s
}

// SetClusterId sets the ClusterId field's value.
func (s *UpdateAddonVersionInput) SetClusterId(v string) *UpdateAddonVersionInput {
	s.ClusterId = &v
	return s
}

// SetName sets the Name field's value.
func (s *UpdateAddonVersionInput) SetName(v string) *UpdateAddonVersionInput {
	s.Name = &v
	return s
}

// SetVersion sets the Version field's value.
func (s *UpdateAddonVersionInput) SetVersion(v string) *UpdateAddonVersionInput {
	s.Version = &v
	return s
}

type UpdateAddonVersionOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdateAddonVersionOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateAddonVersionOutput) GoString() string {
	return s.String()
}
