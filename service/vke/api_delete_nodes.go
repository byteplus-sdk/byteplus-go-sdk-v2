// Code generated by byteplus with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vke

import (
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/byteplusutil"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/request"
	"github.com/byteplus-sdk/byteplus-go-sdk-v2/byteplus/response"
)

const opDeleteNodesCommon = "DeleteNodes"

// DeleteNodesCommonRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteNodesCommon operation. The "output" return
// value will be populated with the DeleteNodesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNodesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNodesCommon Send returns without error.
//
// See DeleteNodesCommon for more information on using the DeleteNodesCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteNodesCommonRequest method.
//    req, resp := client.DeleteNodesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) DeleteNodesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteNodesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteNodesCommon API operation for VKE.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VKE's
// API operation DeleteNodesCommon for usage and error information.
func (c *VKE) DeleteNodesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteNodesCommonRequest(input)
	return out, req.Send()
}

// DeleteNodesCommonWithContext is the same as DeleteNodesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNodesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) DeleteNodesCommonWithContext(ctx byteplus.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteNodesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteNodes = "DeleteNodes"

// DeleteNodesRequest generates a "byteplus/request.Request" representing the
// client's request for the DeleteNodes operation. The "output" return
// value will be populated with the DeleteNodesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNodesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNodesCommon Send returns without error.
//
// See DeleteNodes for more information on using the DeleteNodes
// API call, and error handling.
//
//    // Example sending a request using the DeleteNodesRequest method.
//    req, resp := client.DeleteNodesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VKE) DeleteNodesRequest(input *DeleteNodesInput) (req *request.Request, output *DeleteNodesOutput) {
	op := &request.Operation{
		Name:       opDeleteNodes,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteNodesInput{}
	}

	output = &DeleteNodesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteNodes API operation for VKE.
//
// Returns bytepluserr.Error for service API and SDK errors. Use runtime type assertions
// with bytepluserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the BYTEPLUS API reference guide for VKE's
// API operation DeleteNodes for usage and error information.
func (c *VKE) DeleteNodes(input *DeleteNodesInput) (*DeleteNodesOutput, error) {
	req, out := c.DeleteNodesRequest(input)
	return out, req.Send()
}

// DeleteNodesWithContext is the same as DeleteNodes with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNodes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) DeleteNodesWithContext(ctx byteplus.Context, input *DeleteNodesInput, opts ...request.Option) (*DeleteNodesOutput, error) {
	req, out := c.DeleteNodesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteNodesInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	CascadingDeleteResources []*string `type:"list" json:",omitempty"`

	// ClusterId is a required field
	ClusterId *string `type:"string" json:",omitempty" required:"true"`

	Ids []*string `type:"list" json:",omitempty"`

	// NodePoolId is a required field
	NodePoolId *string `type:"string" json:",omitempty" required:"true"`

	RetainResources []*string `type:"list" json:",omitempty"`
}

// String returns the string representation
func (s DeleteNodesInput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNodesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteNodesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteNodesInput"}
	if s.ClusterId == nil {
		invalidParams.Add(request.NewErrParamRequired("ClusterId"))
	}
	if s.NodePoolId == nil {
		invalidParams.Add(request.NewErrParamRequired("NodePoolId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCascadingDeleteResources sets the CascadingDeleteResources field's value.
func (s *DeleteNodesInput) SetCascadingDeleteResources(v []*string) *DeleteNodesInput {
	s.CascadingDeleteResources = v
	return s
}

// SetClusterId sets the ClusterId field's value.
func (s *DeleteNodesInput) SetClusterId(v string) *DeleteNodesInput {
	s.ClusterId = &v
	return s
}

// SetIds sets the Ids field's value.
func (s *DeleteNodesInput) SetIds(v []*string) *DeleteNodesInput {
	s.Ids = v
	return s
}

// SetNodePoolId sets the NodePoolId field's value.
func (s *DeleteNodesInput) SetNodePoolId(v string) *DeleteNodesInput {
	s.NodePoolId = &v
	return s
}

// SetRetainResources sets the RetainResources field's value.
func (s *DeleteNodesInput) SetRetainResources(v []*string) *DeleteNodesInput {
	s.RetainResources = v
	return s
}

type DeleteNodesOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteNodesOutput) String() string {
	return byteplusutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNodesOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfCascadingDeleteResourceListForDeleteNodesInputEcs is a EnumOfCascadingDeleteResourceListForDeleteNodesInput enum value
	EnumOfCascadingDeleteResourceListForDeleteNodesInputEcs = "Ecs"
)

const (
	// EnumOfRetainResourceListForDeleteNodesInputEcs is a EnumOfRetainResourceListForDeleteNodesInput enum value
	EnumOfRetainResourceListForDeleteNodesInputEcs = "Ecs"
)
